{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1557199791204},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1557199791204},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1557199791204},{"_id":"themes/maupassant/README.md","hash":"90032cb3a46f741a3d6198de9f83ce384505519e","modified":1557199791204},{"_id":"themes/maupassant/_config.yml","hash":"880783caa3a08ab39eb77f69028696d636ebfa01","modified":1557199923701},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1557199791212},{"_id":"source/about/index.md","hash":"db5f6561508fc5f2ea38b8a5c78adae87bec54ec","modified":1557195577808},{"_id":"source/_posts/android_activity1.md","hash":"02af7087040913c176a76ef42416c441f9aa3de1","modified":1557195577806},{"_id":"source/_posts/android_activity2.md","hash":"d14ada813171d2efe03d7fae105096838f2cde0e","modified":1557195577806},{"_id":"source/_posts/android_activity3.md","hash":"80c211f578d49e2bd2363d41ee0270dd6509266f","modified":1557195577806},{"_id":"source/_posts/android_activity4.md","hash":"311dfe6f39dc7ddc32babe63f8a21d18b0d2cfa8","modified":1557195577807},{"_id":"source/_posts/android_store1.md","hash":"422728db6ec0e446cb122bb3c1d2cbc77008e241","modified":1557195577807},{"_id":"source/_posts/blog_hexo_GitHub.md","hash":"8360f8a7c32001bfe153a220a90a07289d1c46fe","modified":1557195577807},{"_id":"source/_posts/erlang_base1.md","hash":"d1af04c4f35a311b2b87259825975ae2298b1201","modified":1557195577807},{"_id":"source/_posts/erlang_base2.md","hash":"f7df7f9d4d6670cd3c7181e2c0f197db3f9b1af7","modified":1557195577807},{"_id":"source/_posts/javascirpt_base1.md","hash":"4c187e358a23708f52883d3eb2ef9dd8e6c4ad4f","modified":1557195577808},{"_id":"source/_posts/erlang_do1.md","hash":"30bdf08b63ac4897ed69c08c61fa125feebc9cdf","modified":1557195577807},{"_id":"source/_posts/javascript_es6_1.md","hash":"1d03b7dccc06e9a9879101d8002a278e579796ea","modified":1557388108159},{"_id":"source/_posts/更新时间树.md","hash":"9ba6c4c48f2fae539475e8b310fae9666ba038e5","modified":1557388192383},{"_id":"source/_posts/git_1.md","hash":"a4f93c09539ae1e0b20c1ff45c7620a7f4c697cb","modified":1557195577808},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557199791196},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1557199791198},{"_id":"source/_posts/git_lfs1.md","hash":"baec9e79eb4329f3c119cf002709450ae4b26f3e","modified":1557200099472},{"_id":"source/_posts/yaws.web1.md","hash":"55300c6b63cc30069a024fd9bf84f7df92957342","modified":1557195577808},{"_id":"source/tags/index.md","hash":"a108953363be0328af1fec414f48d608028e5a62","modified":1557195577808},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557199771653},{"_id":"themes/maupassant/.git/index","hash":"f78b6d1c7c0bdbf40911c646ad730029bcb48fef","modified":1557200897206},{"_id":"themes/maupassant/.git/packed-refs","hash":"936fbde790cc520205e1157e5102310c9e4bdd49","modified":1557199791193},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1557199791205},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1557199791205},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1557199791205},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1557199791206},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1557199791206},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1557199791206},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1557199791206},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1557199791206},{"_id":"themes/maupassant/layout/archive.pug","hash":"2fe2cff144c9b7b509b7b6cb1b3acba27aa1d132","modified":1557199791210},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1557199791210},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1557199791210},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1557199791210},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1557199791211},{"_id":"themes/maupassant/layout/post.pug","hash":"f4d17b1b2a590cc076e80d912591648f9e99aeaf","modified":1557199791211},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1557199791211},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1557199791211},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557199771654},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557199771653},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557199771654},{"_id":"themes/maupassant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557199771654},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557199771653},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557199771655},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557199771655},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557199771654},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557199771653},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557199771654},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557199771653},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557199771655},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"9ec26c891ee09b1a78de77e358d57dbc7854fed8","modified":1557199791197},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"31bf35a57634ff8a796c71dd5246eba3a3db10ee","modified":1557199791207},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ff14baa25f6db34dedfb5e029c25687a335ad430","modified":1557199791207},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1557199791207},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"8af6e452ea2a56b110b5079f79bf743b643f7d6c","modified":1557199791207},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1557199791207},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1557199791207},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1557199791208},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1557199791208},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1557199791208},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1557199791208},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1557199791208},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1557199791208},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1557199791209},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1557199791209},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1557199791209},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1557199791209},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1557199791209},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1557199791209},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1557199791212},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1557199791212},{"_id":"themes/maupassant/source/css/style.scss","hash":"498ef1d94cf437629871f094e8d490c73bb59302","modified":1557199791213},{"_id":"themes/maupassant/source/donate/index.html","hash":"c42428765d48c8674ce28100ad95fdf4c7806a85","modified":1557199791213},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1557199791214},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1557199791214},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1557199791215},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1557199791215},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1557199791216},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1557199791216},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1557199791218},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1557199791218},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1557199791217},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1557199791217},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1557199791218},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1557199791219},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1557199791221},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1557199791221},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1557199791221},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1557199791222},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"aba579e16aee2b1085818c7208dc13bd3dff2601","modified":1557199791197},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1557199791220},{"_id":"themes/maupassant/.git/objects/pack/pack-8001fff696543c3a0ab8e15c48728d3f1745fe24.idx","hash":"795e56b8cf1ca88964dd4edd1f5586580d7fb02c","modified":1557199791185},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"9ec26c891ee09b1a78de77e358d57dbc7854fed8","modified":1557199791197},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557199791195},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"9ec26c891ee09b1a78de77e358d57dbc7854fed8","modified":1557199791195},{"_id":"themes/maupassant/.git/objects/pack/pack-8001fff696543c3a0ab8e15c48728d3f1745fe24.pack","hash":"5ece2f8c91c9796e77719836f6ed06c10f5ab64d","modified":1557199791184},{"_id":"public/atom.xml","hash":"336a051a28ffa97b224d2a4c0ec505b720febce0","modified":1557388201109},{"_id":"public/about/index.html","hash":"c3d4b33fa7d3606ab35e1d1507e267c4d174fdb3","modified":1557388148478},{"_id":"public/tags/index.html","hash":"9b6dad329343e3cd2f4a79cb64f6d3ccbb084ce6","modified":1557388148478},{"_id":"public/2019/05/07/git_lfs1/index.html","hash":"256c46d8a7cd6f02ac392cd289ab04b17bca9270","modified":1557388148478},{"_id":"public/2018/04/26/yaws.web1/index.html","hash":"dfa93c055275c307ffc8bda6a15449a48d9d72f3","modified":1557388148478},{"_id":"public/2018/03/26/android_activity1/index.html","hash":"5872f4fd786afd4df57d1c4e067a0710c679ed44","modified":1557388148478},{"_id":"public/2018/03/26/更新时间树/index.html","hash":"afc4683aea59198cf07ea481f4dbe5703bc253ed","modified":1557388201124},{"_id":"public/archives/index.html","hash":"47f8bcca319270fc57e85a1f5df3561736cce80f","modified":1557388148479},{"_id":"public/archives/page/2/index.html","hash":"9d760280c9c2b7092c19b060d0733f481f52f413","modified":1557388148479},{"_id":"public/archives/2018/index.html","hash":"725920c0b36cdd573ba1b1f4f73d6fa59ebd28b1","modified":1557388148479},{"_id":"public/archives/2018/page/2/index.html","hash":"3426543a3102a8d1feaf549c5128bcf0496c2825","modified":1557388148479},{"_id":"public/archives/2018/03/index.html","hash":"c4193aca24688ca0b28ac64dc367e6f968126957","modified":1557388148479},{"_id":"public/archives/2018/04/index.html","hash":"08078e7d7b9272cfbcd3091f9d40d229ce4d9c43","modified":1557388148479},{"_id":"public/archives/2018/05/index.html","hash":"bc6523ccee5d1b47ba2f96b5f39e86d5cc621a00","modified":1557388148479},{"_id":"public/archives/2018/06/index.html","hash":"faa688de89646d6800ddbdd565dacfcfc6880e8c","modified":1557388148479},{"_id":"public/archives/2019/index.html","hash":"22bc04e54e6cb7d16a322e52dc1100ec00c889f6","modified":1557388148479},{"_id":"public/archives/2019/05/index.html","hash":"22bc04e54e6cb7d16a322e52dc1100ec00c889f6","modified":1557388148479},{"_id":"public/categories/张永枫/index.html","hash":"936e771c3832249ae4e196d804c2a718410e15a4","modified":1557388148479},{"_id":"public/categories/张永枫/page/2/index.html","hash":"1b56f537c44fb6efbd1b8ef9d6233eda0558f04a","modified":1557388148480},{"_id":"public/categories/蔡向炜/index.html","hash":"b2d229a22bcbb410649a7f4fc554a56d452e44d0","modified":1557388148480},{"_id":"public/categories/recode/index.html","hash":"6b8025949f83991f7c66030b27186e7486bfc3e8","modified":1557388148480},{"_id":"public/index.html","hash":"f945d1bd7ee81d7be9b11a709f1240ca3b44f3e6","modified":1557388148480},{"_id":"public/page/2/index.html","hash":"dc2a29de92699000cf79d477e3106d3cd1e42461","modified":1557388148480},{"_id":"public/tags/android/index.html","hash":"746a8f4d8c9f9272d15d8882ee834461dbda984c","modified":1557388148480},{"_id":"public/tags/Activity/index.html","hash":"3f9085b276fe5fd9308804e3a93caf54971fdbf3","modified":1557388148480},{"_id":"public/tags/hexo/index.html","hash":"a02bf038696891640449ec592345dc9d3d6d9583","modified":1557388148480},{"_id":"public/tags/erlang/index.html","hash":"d3c89df14d1906809cd936ea66a5e932cb36786e","modified":1557388148481},{"_id":"public/tags/javascript/index.html","hash":"bba0cacfa9bae1971861c6cd81c62aeff46fab15","modified":1557388148481},{"_id":"public/tags/更新/index.html","hash":"202d2803917509ff59310c0420a5c9b70d6f9d48","modified":1557388148481},{"_id":"public/tags/记录/index.html","hash":"5da88b23acc83058a29b60b5b8250049b9ad6039","modified":1557388148481},{"_id":"public/tags/plan/index.html","hash":"190b90a90b395edce9cdd21cac1cba02ffcf1006","modified":1557388148482},{"_id":"public/tags/git-lfs/index.html","hash":"3f1b325d31d07f3278f924b8d7b0286b2584b90e","modified":1557388148482},{"_id":"public/tags/yaws/index.html","hash":"d844366c66ec606a813993d2620d7096b0d1c119","modified":1557388148482},{"_id":"public/tags/web/index.html","hash":"e23f1d0d5b321648c4477624c8c95809e99491b8","modified":1557388148482},{"_id":"public/tags/file/index.html","hash":"173f276f81a9f7f63b558e9ac4a5fae106f7860f","modified":1557388148482},{"_id":"public/tags/git/index.html","hash":"45159d51a235f9561a4d27c823c76961c0b9f0fe","modified":1557388148482},{"_id":"public/2019/05/06/git_1/index.html","hash":"a4727d415a67091ff541c6ccbe26c223ed01ed97","modified":1557388148482},{"_id":"public/2018/06/26/javascirpt_base1/index.html","hash":"88d4d5cace8870e1119eb7185a52c68e094fc91e","modified":1557388148482},{"_id":"public/2018/06/26/erlang_do1/index.html","hash":"f34e8592f35cb312d5aa1924e5e81be305a5cf80","modified":1557388148482},{"_id":"public/2018/06/12/erlang_base2/index.html","hash":"d2aea94cffb5bf72dfa4c153702a780066d053eb","modified":1557388148482},{"_id":"public/2018/06/11/erlang_base1/index.html","hash":"b97bcaf79bc2ca24881ee217c56b92e0405d10f7","modified":1557388148482},{"_id":"public/2018/05/02/android_store1/index.html","hash":"56e4ffc38631db92f5d6c2a324755eb8f369f79f","modified":1557388148482},{"_id":"public/2018/04/10/android_activity4/index.html","hash":"5f34ef819f8b69650ea23c37fbe819ebd504fbca","modified":1557388148483},{"_id":"public/2018/04/01/android_activity3/index.html","hash":"106c4ac4868b8ff6f6116ddac7a808402e613167","modified":1557388148483},{"_id":"public/2018/03/27/android_activity2/index.html","hash":"c2894c7fd0147b57a784a79011240905825c16b3","modified":1557388148483},{"_id":"public/2018/03/23/blog_hexo_GitHub/index.html","hash":"94c8af51227abd35a7015d723f3755a012fb3963","modified":1557388148483},{"_id":"public/tags/ES6/index.html","hash":"3ee7ffaf447e0d4b972b5bd5082267a9aa0aa9fc","modified":1557388148486},{"_id":"public/2019/05/09/javascript_es6_1/index.html","hash":"dac30d857fe9fac021573b35c2e3acd72390a9b7","modified":1557388148486},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1557388148489},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1557388148489},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1557388148489},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1557388148490},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1557388148490},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1557388148490},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1557388148490},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1557388148490},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1557388148490},{"_id":"public/donate/index.html","hash":"c42428765d48c8674ce28100ad95fdf4c7806a85","modified":1557388148495},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1557388148495},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1557388148496},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1557388148507},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1557388148507},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1557388148507},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1557388148507},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1557388148507},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1557388148508},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1557388148510},{"_id":"public/css/style.css","hash":"d42dc2e26ab1ff51408804815d812b444e080c99","modified":1557388148583},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1557388148585}],"Category":[{"name":"张永枫","_id":"cjvgcowlj0004p7saqj1ejx7m"},{"name":"蔡向炜","_id":"cjvgcowlz000ep7sauas3i22j"},{"name":"recode","_id":"cjvgcowm8000pp7sadvveroqc"}],"Data":[],"Page":[{"title":"about","date":"2019-05-06T06:20:53.000Z","_content":"### me\n\nqq: 503977995\n\ngithub: https://github.com/zhangyongfeng1\n\ne-mail: 503977995qq.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-05-06 14:20:53\n---\n### me\n\nqq: 503977995\n\ngithub: https://github.com/zhangyongfeng1\n\ne-mail: 503977995qq.com","updated":"2019-05-07T02:19:37.808Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvgcowl50000p7saxc2rjrme","content":"<h3 id=\"me\"><a href=\"#me\" class=\"headerlink\" title=\"me\"></a>me</h3><p>qq: 503977995</p>\n<p>github: <a href=\"https://github.com/zhangyongfeng1\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangyongfeng1</a></p>\n<p>e-mail: 503977995qq.com</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"me\"><a href=\"#me\" class=\"headerlink\" title=\"me\"></a>me</h3><p>qq: 503977995</p>\n<p>github: <a href=\"https://github.com/zhangyongfeng1\" target=\"_blank\" rel=\"noopener\">https://github.com/zhangyongfeng1</a></p>\n<p>e-mail: 503977995qq.com</p>\n"},{"title":"tags","date":"2019-05-06T06:19:53.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-05-06 14:19:53\n---\n","updated":"2019-05-07T02:19:37.808Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjvgcowle0002p7savmhlk15u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android_Activity_1--活动入门","date":"2018-03-26T08:25:25.000Z","description":"本文是以Android Studio为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录","_content":"\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n- [1、写在前面](#1%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2)\n- [2、介绍](#2%E4%BB%8B%E7%BB%8D)\n- [3、手动创建活动](#3%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E6%B4%BB%E5%8A%A8)\n- [4、创建和加载布局](#4%E5%88%9B%E5%BB%BA%E5%92%8C%E5%8A%A0%E8%BD%BD%E5%B8%83%E5%B1%80)\n  - [4.1、 Android 设计原则：](#41-android-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99)\n  - [4.2、 创建一个布局](#42-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80)\n  - [4.3、 可视化布局编辑器](#43-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80%E7%BC%96%E8%BE%91%E5%99%A8)\n  - [4.4、 在布局中添加一个按扭](#44-%E5%9C%A8%E5%B8%83%E5%B1%80%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%8C%89%E6%89%AD)\n  - [4.5、 在一个活动（Activity）中加载一个布局(Layout)](#45-%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%B4%BB%E5%8A%A8activity%E4%B8%AD%E5%8A%A0%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80layout)\n  - [4.6、 关于R文件](#46-%E5%85%B3%E4%BA%8Er%E6%96%87%E4%BB%B6)\n  - [4.7、 在AndroidManifest文件中注册](#47-%E5%9C%A8androidmanifest%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%86%8C)\n  - [4.8、 设置主活动的方法](#48-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95)\n  - [4.9、 启动器的标题](#49-%E5%90%AF%E5%8A%A8%E5%99%A8%E7%9A%84%E6%A0%87%E9%A2%98)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n\n## 1、写在前面\n\n本文是以Android Studio为开发工具，\n<<第一行代码Anroid第2版>> 为学习指导书籍\n> [电子书pdf百度云下载地址:](https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg)\n密码:rx3g\n[Android Studio运行的测试代码下载地址:](https://zhangyongfeng1.github.io/dowland/MyApplication1.zip)\n\n\n## 2、介绍\n\nActivity 是一种可以包括界面的组件，主要用于和用户的交互，\n一个应用程序可以有0个或多个活动。\n\n## 3、手动创建活动\n\n使项目在Project模式下面，\n1. 选中在app/src/main/java/下面的包中右键点击；\n2. 再选择New->Activity->Empty Activity 创建一个活动的对话框 会有以下选项：\nGenerate Layout File 表示会自动为创建的活动生成一个对应的layout布局文件（可不选）；\nLauncher Activity 表示会自动将当前创建的活动设置为当前项目的主活动 （有主活动时不选）；\nBackwards Compatibility 表示为项目启用向下兼容的模式（这个要选）；\n3. 点击finish 之后会自动生成一个java文件（会自动继承AppCompatActivity这个类，并且重写 onCrate()方法）。\n\n\n## 4、创建和加载布局\n\n\n### 4.1、 Android 设计原则：\n\n逻辑和视图分离，最好一个活动都能对应一个布局；\n\n（Activity 是处理逻辑用javap实现，layout 负责显示内容用xmL实现）。\n\n### 4.2、 创建一个布局\n\n使项目在Project模式下面：\n\n1. 选中在app/src/main/res/layout目录下面的包中右键点击，\n\n2. 再选择New->Layout resource file 创建一个布局文件\n\n3. 在弹出框有中两个选项：\n\nFlie name : 这个自已命名就可以了\n\nBoot element: 根元素（先默认选择LinerLayout）\n\n4. 点击完成，会自动生成一个xml文件\n\n### 4.3、 可视化布局编辑器\n\n屏幕中央区域显示预览的效果；\n\n最下方有两个切换的选项：\n\n* Design:     显示当前的可视化布局\n\n* Text:    是显示xml文件的内容\n\n### 4.4、 在布局中添加一个按扭\n\n添加的button元素中中添加了几个属性\n\n* android:id (定义一个唯一个标识符）；\n\n* android:layout_width(指定当前的宽度，使用match_parent表示和当前父元素一样宽）；\n\n* android:layout_height(指定当前的高度，使用wrap_content表示适应控件里的内容)；\n\n* android:text(指定元素中显示的内容)；\n\n### 4.5、 在一个活动（Activity）中加载一个布局(Layout)\n\n在onCreate()方法中添加\n```\nsetContentView(R.layout.frist_layout);\n```\n\n### 4.6、 关于R文件\n\n\n项目中任何添加任何资源都会在R文件中生成一个相应的资源id\n\n(因此可以直接使用setContentView()方法加载R.layout.frist_layout)\n\n\n### 4.7、 在AndroidManifest文件中注册\n\n所有的活动activity,要在AndroidMainifest.xml中进行注册才会生效；\n\nAndroidMainifest.xml文件在项目中的位app/src/main/AndroidManifest.xml；\n\n<activity>标签中使用android:name来表示指定具体注册那个活动；\n\n注：不过要是只有一个活动，而没有配置主活动的话，代码在android studio 中是跑不起来的，会抛弃出一串异常的代码\n```\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task …\n\n```\n### 4.8、 设置主活动的方法\n\n\n在<activity>标签内部加入<intent-filter>标签，并在标签中添加\n\n```\n<action android:name=“android.intent.action.MAIN”/>\n```\n和\n```\n<category android:name=“android.intent.category.LAUNCHER”/>\n```\n这两名声明即可。\n\n\n### 4.9、 启动器的标题\n\n\n除此之外如果给主活动指定一个label的话，你会发现标题栏中的内容也变成了启动器中的应用程序显示的名称。\n\n如果应用程序没有声明任何一个活动作为主活动，这个程序仍然可以正常安装，可是你无法在启动器中看到或者打开这个程序，这类程序一般都是作为第三方服务供其他应用内部调用，如支付宝快捷支付服务。\n","source":"_posts/android_activity1.md","raw":"---\ntitle:  Android_Activity_1--活动入门\ndate: 2018-03-26 16:25:25\ntags: [android,Activity]\ncategories: 张永枫\ndescription: 本文是以Android Studio为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录\n---\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n- [1、写在前面](#1%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2)\n- [2、介绍](#2%E4%BB%8B%E7%BB%8D)\n- [3、手动创建活动](#3%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E6%B4%BB%E5%8A%A8)\n- [4、创建和加载布局](#4%E5%88%9B%E5%BB%BA%E5%92%8C%E5%8A%A0%E8%BD%BD%E5%B8%83%E5%B1%80)\n  - [4.1、 Android 设计原则：](#41-android-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99)\n  - [4.2、 创建一个布局](#42-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80)\n  - [4.3、 可视化布局编辑器](#43-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80%E7%BC%96%E8%BE%91%E5%99%A8)\n  - [4.4、 在布局中添加一个按扭](#44-%E5%9C%A8%E5%B8%83%E5%B1%80%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%8C%89%E6%89%AD)\n  - [4.5、 在一个活动（Activity）中加载一个布局(Layout)](#45-%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%B4%BB%E5%8A%A8activity%E4%B8%AD%E5%8A%A0%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80layout)\n  - [4.6、 关于R文件](#46-%E5%85%B3%E4%BA%8Er%E6%96%87%E4%BB%B6)\n  - [4.7、 在AndroidManifest文件中注册](#47-%E5%9C%A8androidmanifest%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%86%8C)\n  - [4.8、 设置主活动的方法](#48-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95)\n  - [4.9、 启动器的标题](#49-%E5%90%AF%E5%8A%A8%E5%99%A8%E7%9A%84%E6%A0%87%E9%A2%98)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n\n## 1、写在前面\n\n本文是以Android Studio为开发工具，\n<<第一行代码Anroid第2版>> 为学习指导书籍\n> [电子书pdf百度云下载地址:](https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg)\n密码:rx3g\n[Android Studio运行的测试代码下载地址:](https://zhangyongfeng1.github.io/dowland/MyApplication1.zip)\n\n\n## 2、介绍\n\nActivity 是一种可以包括界面的组件，主要用于和用户的交互，\n一个应用程序可以有0个或多个活动。\n\n## 3、手动创建活动\n\n使项目在Project模式下面，\n1. 选中在app/src/main/java/下面的包中右键点击；\n2. 再选择New->Activity->Empty Activity 创建一个活动的对话框 会有以下选项：\nGenerate Layout File 表示会自动为创建的活动生成一个对应的layout布局文件（可不选）；\nLauncher Activity 表示会自动将当前创建的活动设置为当前项目的主活动 （有主活动时不选）；\nBackwards Compatibility 表示为项目启用向下兼容的模式（这个要选）；\n3. 点击finish 之后会自动生成一个java文件（会自动继承AppCompatActivity这个类，并且重写 onCrate()方法）。\n\n\n## 4、创建和加载布局\n\n\n### 4.1、 Android 设计原则：\n\n逻辑和视图分离，最好一个活动都能对应一个布局；\n\n（Activity 是处理逻辑用javap实现，layout 负责显示内容用xmL实现）。\n\n### 4.2、 创建一个布局\n\n使项目在Project模式下面：\n\n1. 选中在app/src/main/res/layout目录下面的包中右键点击，\n\n2. 再选择New->Layout resource file 创建一个布局文件\n\n3. 在弹出框有中两个选项：\n\nFlie name : 这个自已命名就可以了\n\nBoot element: 根元素（先默认选择LinerLayout）\n\n4. 点击完成，会自动生成一个xml文件\n\n### 4.3、 可视化布局编辑器\n\n屏幕中央区域显示预览的效果；\n\n最下方有两个切换的选项：\n\n* Design:     显示当前的可视化布局\n\n* Text:    是显示xml文件的内容\n\n### 4.4、 在布局中添加一个按扭\n\n添加的button元素中中添加了几个属性\n\n* android:id (定义一个唯一个标识符）；\n\n* android:layout_width(指定当前的宽度，使用match_parent表示和当前父元素一样宽）；\n\n* android:layout_height(指定当前的高度，使用wrap_content表示适应控件里的内容)；\n\n* android:text(指定元素中显示的内容)；\n\n### 4.5、 在一个活动（Activity）中加载一个布局(Layout)\n\n在onCreate()方法中添加\n```\nsetContentView(R.layout.frist_layout);\n```\n\n### 4.6、 关于R文件\n\n\n项目中任何添加任何资源都会在R文件中生成一个相应的资源id\n\n(因此可以直接使用setContentView()方法加载R.layout.frist_layout)\n\n\n### 4.7、 在AndroidManifest文件中注册\n\n所有的活动activity,要在AndroidMainifest.xml中进行注册才会生效；\n\nAndroidMainifest.xml文件在项目中的位app/src/main/AndroidManifest.xml；\n\n<activity>标签中使用android:name来表示指定具体注册那个活动；\n\n注：不过要是只有一个活动，而没有配置主活动的话，代码在android studio 中是跑不起来的，会抛弃出一串异常的代码\n```\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task …\n\n```\n### 4.8、 设置主活动的方法\n\n\n在<activity>标签内部加入<intent-filter>标签，并在标签中添加\n\n```\n<action android:name=“android.intent.action.MAIN”/>\n```\n和\n```\n<category android:name=“android.intent.category.LAUNCHER”/>\n```\n这两名声明即可。\n\n\n### 4.9、 启动器的标题\n\n\n除此之外如果给主活动指定一个label的话，你会发现标题栏中的内容也变成了启动器中的应用程序显示的名称。\n\n如果应用程序没有声明任何一个活动作为主活动，这个程序仍然可以正常安装，可是你无法在启动器中看到或者打开这个程序，这类程序一般都是作为第三方服务供其他应用内部调用，如支付宝快捷支付服务。\n","slug":"android_activity1","published":1,"updated":"2019-05-07T02:19:37.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowl80001p7sat0y6svbv","content":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<ul>\n<li><a href=\"#1%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2\">1、写在前面</a></li>\n<li><a href=\"#2%E4%BB%8B%E7%BB%8D\">2、介绍</a></li>\n<li><a href=\"#3%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E6%B4%BB%E5%8A%A8\">3、手动创建活动</a></li>\n<li><a href=\"#4%E5%88%9B%E5%BB%BA%E5%92%8C%E5%8A%A0%E8%BD%BD%E5%B8%83%E5%B1%80\">4、创建和加载布局</a><ul>\n<li><a href=\"#41-android-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\">4.1、 Android 设计原则：</a></li>\n<li><a href=\"#42-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80\">4.2、 创建一个布局</a></li>\n<li><a href=\"#43-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80%E7%BC%96%E8%BE%91%E5%99%A8\">4.3、 可视化布局编辑器</a></li>\n<li><a href=\"#44-%E5%9C%A8%E5%B8%83%E5%B1%80%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%8C%89%E6%89%AD\">4.4、 在布局中添加一个按扭</a></li>\n<li><a href=\"#45-%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%B4%BB%E5%8A%A8activity%E4%B8%AD%E5%8A%A0%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80layout\">4.5、 在一个活动（Activity）中加载一个布局(Layout)</a></li>\n<li><a href=\"#46-%E5%85%B3%E4%BA%8Er%E6%96%87%E4%BB%B6\">4.6、 关于R文件</a></li>\n<li><a href=\"#47-%E5%9C%A8androidmanifest%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%86%8C\">4.7、 在AndroidManifest文件中注册</a></li>\n<li><a href=\"#48-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95\">4.8、 设置主活动的方法</a></li>\n<li><a href=\"#49-%E5%90%AF%E5%8A%A8%E5%99%A8%E7%9A%84%E6%A0%87%E9%A2%98\">4.9、 启动器的标题</a></li>\n</ul>\n</li>\n</ul>\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>本文是以Android Studio为开发工具，<br>&lt;&lt;第一行代码Anroid第2版&gt;&gt; 为学习指导书籍</p>\n<blockquote>\n<p><a href=\"https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg\" target=\"_blank\" rel=\"noopener\">电子书pdf百度云下载地址:</a><br>密码:rx3g<br><a href=\"https://zhangyongfeng1.github.io/dowland/MyApplication1.zip\">Android Studio运行的测试代码下载地址:</a></p>\n</blockquote>\n<h2 id=\"2、介绍\"><a href=\"#2、介绍\" class=\"headerlink\" title=\"2、介绍\"></a>2、介绍</h2><p>Activity 是一种可以包括界面的组件，主要用于和用户的交互，<br>一个应用程序可以有0个或多个活动。</p>\n<h2 id=\"3、手动创建活动\"><a href=\"#3、手动创建活动\" class=\"headerlink\" title=\"3、手动创建活动\"></a>3、手动创建活动</h2><p>使项目在Project模式下面，</p>\n<ol>\n<li>选中在app/src/main/java/下面的包中右键点击；</li>\n<li>再选择New-&gt;Activity-&gt;Empty Activity 创建一个活动的对话框 会有以下选项：<br>Generate Layout File 表示会自动为创建的活动生成一个对应的layout布局文件（可不选）；<br>Launcher Activity 表示会自动将当前创建的活动设置为当前项目的主活动 （有主活动时不选）；<br>Backwards Compatibility 表示为项目启用向下兼容的模式（这个要选）；</li>\n<li>点击finish 之后会自动生成一个java文件（会自动继承AppCompatActivity这个类，并且重写 onCrate()方法）。</li>\n</ol>\n<h2 id=\"4、创建和加载布局\"><a href=\"#4、创建和加载布局\" class=\"headerlink\" title=\"4、创建和加载布局\"></a>4、创建和加载布局</h2><h3 id=\"4-1、-Android-设计原则：\"><a href=\"#4-1、-Android-设计原则：\" class=\"headerlink\" title=\"4.1、 Android 设计原则：\"></a>4.1、 Android 设计原则：</h3><p>逻辑和视图分离，最好一个活动都能对应一个布局；</p>\n<p>（Activity 是处理逻辑用javap实现，layout 负责显示内容用xmL实现）。</p>\n<h3 id=\"4-2、-创建一个布局\"><a href=\"#4-2、-创建一个布局\" class=\"headerlink\" title=\"4.2、 创建一个布局\"></a>4.2、 创建一个布局</h3><p>使项目在Project模式下面：</p>\n<ol>\n<li><p>选中在app/src/main/res/layout目录下面的包中右键点击，</p>\n</li>\n<li><p>再选择New-&gt;Layout resource file 创建一个布局文件</p>\n</li>\n<li><p>在弹出框有中两个选项：</p>\n</li>\n</ol>\n<p>Flie name : 这个自已命名就可以了</p>\n<p>Boot element: 根元素（先默认选择LinerLayout）</p>\n<ol start=\"4\">\n<li>点击完成，会自动生成一个xml文件</li>\n</ol>\n<h3 id=\"4-3、-可视化布局编辑器\"><a href=\"#4-3、-可视化布局编辑器\" class=\"headerlink\" title=\"4.3、 可视化布局编辑器\"></a>4.3、 可视化布局编辑器</h3><p>屏幕中央区域显示预览的效果；</p>\n<p>最下方有两个切换的选项：</p>\n<ul>\n<li><p>Design:     显示当前的可视化布局</p>\n</li>\n<li><p>Text:    是显示xml文件的内容</p>\n</li>\n</ul>\n<h3 id=\"4-4、-在布局中添加一个按扭\"><a href=\"#4-4、-在布局中添加一个按扭\" class=\"headerlink\" title=\"4.4、 在布局中添加一个按扭\"></a>4.4、 在布局中添加一个按扭</h3><p>添加的button元素中中添加了几个属性</p>\n<ul>\n<li><p>android:id (定义一个唯一个标识符）；</p>\n</li>\n<li><p>android:layout_width(指定当前的宽度，使用match_parent表示和当前父元素一样宽）；</p>\n</li>\n<li><p>android:layout_height(指定当前的高度，使用wrap_content表示适应控件里的内容)；</p>\n</li>\n<li><p>android:text(指定元素中显示的内容)；</p>\n</li>\n</ul>\n<h3 id=\"4-5、-在一个活动（Activity）中加载一个布局-Layout\"><a href=\"#4-5、-在一个活动（Activity）中加载一个布局-Layout\" class=\"headerlink\" title=\"4.5、 在一个活动（Activity）中加载一个布局(Layout)\"></a>4.5、 在一个活动（Activity）中加载一个布局(Layout)</h3><p>在onCreate()方法中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContentView(R.layout.frist_layout);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6、-关于R文件\"><a href=\"#4-6、-关于R文件\" class=\"headerlink\" title=\"4.6、 关于R文件\"></a>4.6、 关于R文件</h3><p>项目中任何添加任何资源都会在R文件中生成一个相应的资源id</p>\n<p>(因此可以直接使用setContentView()方法加载R.layout.frist_layout)</p>\n<h3 id=\"4-7、-在AndroidManifest文件中注册\"><a href=\"#4-7、-在AndroidManifest文件中注册\" class=\"headerlink\" title=\"4.7、 在AndroidManifest文件中注册\"></a>4.7、 在AndroidManifest文件中注册</h3><p>所有的活动activity,要在AndroidMainifest.xml中进行注册才会生效；</p>\n<p>AndroidMainifest.xml文件在项目中的位app/src/main/AndroidManifest.xml；</p>\n<p><activity>标签中使用android:name来表示指定具体注册那个活动；</activity></p>\n<p>注：不过要是只有一个活动，而没有配置主活动的话，代码在android studio 中是跑不起来的，会抛弃出一串异常的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.gradle.api.tasks.TaskExecutionException: Execution failed for task …</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-8、-设置主活动的方法\"><a href=\"#4-8、-设置主活动的方法\" class=\"headerlink\" title=\"4.8、 设置主活动的方法\"></a>4.8、 设置主活动的方法</h3><p>在<activity>标签内部加入<intent-filter>标签，并在标签中添加</intent-filter></activity></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action android:name=“android.intent.action.MAIN”/&gt;</span><br></pre></td></tr></table></figure>\n<p>和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;category android:name=“android.intent.category.LAUNCHER”/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这两名声明即可。</p>\n<h3 id=\"4-9、-启动器的标题\"><a href=\"#4-9、-启动器的标题\" class=\"headerlink\" title=\"4.9、 启动器的标题\"></a>4.9、 启动器的标题</h3><p>除此之外如果给主活动指定一个label的话，你会发现标题栏中的内容也变成了启动器中的应用程序显示的名称。</p>\n<p>如果应用程序没有声明任何一个活动作为主活动，这个程序仍然可以正常安装，可是你无法在启动器中看到或者打开这个程序，这类程序一般都是作为第三方服务供其他应用内部调用，如支付宝快捷支付服务。</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<ul>\n<li><a href=\"#1%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2\">1、写在前面</a></li>\n<li><a href=\"#2%E4%BB%8B%E7%BB%8D\">2、介绍</a></li>\n<li><a href=\"#3%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E6%B4%BB%E5%8A%A8\">3、手动创建活动</a></li>\n<li><a href=\"#4%E5%88%9B%E5%BB%BA%E5%92%8C%E5%8A%A0%E8%BD%BD%E5%B8%83%E5%B1%80\">4、创建和加载布局</a><ul>\n<li><a href=\"#41-android-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\">4.1、 Android 设计原则：</a></li>\n<li><a href=\"#42-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80\">4.2、 创建一个布局</a></li>\n<li><a href=\"#43-%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80%E7%BC%96%E8%BE%91%E5%99%A8\">4.3、 可视化布局编辑器</a></li>\n<li><a href=\"#44-%E5%9C%A8%E5%B8%83%E5%B1%80%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%8C%89%E6%89%AD\">4.4、 在布局中添加一个按扭</a></li>\n<li><a href=\"#45-%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%B4%BB%E5%8A%A8activity%E4%B8%AD%E5%8A%A0%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B1%80layout\">4.5、 在一个活动（Activity）中加载一个布局(Layout)</a></li>\n<li><a href=\"#46-%E5%85%B3%E4%BA%8Er%E6%96%87%E4%BB%B6\">4.6、 关于R文件</a></li>\n<li><a href=\"#47-%E5%9C%A8androidmanifest%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B3%A8%E5%86%8C\">4.7、 在AndroidManifest文件中注册</a></li>\n<li><a href=\"#48-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95\">4.8、 设置主活动的方法</a></li>\n<li><a href=\"#49-%E5%90%AF%E5%8A%A8%E5%99%A8%E7%9A%84%E6%A0%87%E9%A2%98\">4.9、 启动器的标题</a></li>\n</ul>\n</li>\n</ul>\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>本文是以Android Studio为开发工具，<br>&lt;&lt;第一行代码Anroid第2版&gt;&gt; 为学习指导书籍</p>\n<blockquote>\n<p><a href=\"https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg\" target=\"_blank\" rel=\"noopener\">电子书pdf百度云下载地址:</a><br>密码:rx3g<br><a href=\"https://zhangyongfeng1.github.io/dowland/MyApplication1.zip\">Android Studio运行的测试代码下载地址:</a></p>\n</blockquote>\n<h2 id=\"2、介绍\"><a href=\"#2、介绍\" class=\"headerlink\" title=\"2、介绍\"></a>2、介绍</h2><p>Activity 是一种可以包括界面的组件，主要用于和用户的交互，<br>一个应用程序可以有0个或多个活动。</p>\n<h2 id=\"3、手动创建活动\"><a href=\"#3、手动创建活动\" class=\"headerlink\" title=\"3、手动创建活动\"></a>3、手动创建活动</h2><p>使项目在Project模式下面，</p>\n<ol>\n<li>选中在app/src/main/java/下面的包中右键点击；</li>\n<li>再选择New-&gt;Activity-&gt;Empty Activity 创建一个活动的对话框 会有以下选项：<br>Generate Layout File 表示会自动为创建的活动生成一个对应的layout布局文件（可不选）；<br>Launcher Activity 表示会自动将当前创建的活动设置为当前项目的主活动 （有主活动时不选）；<br>Backwards Compatibility 表示为项目启用向下兼容的模式（这个要选）；</li>\n<li>点击finish 之后会自动生成一个java文件（会自动继承AppCompatActivity这个类，并且重写 onCrate()方法）。</li>\n</ol>\n<h2 id=\"4、创建和加载布局\"><a href=\"#4、创建和加载布局\" class=\"headerlink\" title=\"4、创建和加载布局\"></a>4、创建和加载布局</h2><h3 id=\"4-1、-Android-设计原则：\"><a href=\"#4-1、-Android-设计原则：\" class=\"headerlink\" title=\"4.1、 Android 设计原则：\"></a>4.1、 Android 设计原则：</h3><p>逻辑和视图分离，最好一个活动都能对应一个布局；</p>\n<p>（Activity 是处理逻辑用javap实现，layout 负责显示内容用xmL实现）。</p>\n<h3 id=\"4-2、-创建一个布局\"><a href=\"#4-2、-创建一个布局\" class=\"headerlink\" title=\"4.2、 创建一个布局\"></a>4.2、 创建一个布局</h3><p>使项目在Project模式下面：</p>\n<ol>\n<li><p>选中在app/src/main/res/layout目录下面的包中右键点击，</p>\n</li>\n<li><p>再选择New-&gt;Layout resource file 创建一个布局文件</p>\n</li>\n<li><p>在弹出框有中两个选项：</p>\n</li>\n</ol>\n<p>Flie name : 这个自已命名就可以了</p>\n<p>Boot element: 根元素（先默认选择LinerLayout）</p>\n<ol start=\"4\">\n<li>点击完成，会自动生成一个xml文件</li>\n</ol>\n<h3 id=\"4-3、-可视化布局编辑器\"><a href=\"#4-3、-可视化布局编辑器\" class=\"headerlink\" title=\"4.3、 可视化布局编辑器\"></a>4.3、 可视化布局编辑器</h3><p>屏幕中央区域显示预览的效果；</p>\n<p>最下方有两个切换的选项：</p>\n<ul>\n<li><p>Design:     显示当前的可视化布局</p>\n</li>\n<li><p>Text:    是显示xml文件的内容</p>\n</li>\n</ul>\n<h3 id=\"4-4、-在布局中添加一个按扭\"><a href=\"#4-4、-在布局中添加一个按扭\" class=\"headerlink\" title=\"4.4、 在布局中添加一个按扭\"></a>4.4、 在布局中添加一个按扭</h3><p>添加的button元素中中添加了几个属性</p>\n<ul>\n<li><p>android:id (定义一个唯一个标识符）；</p>\n</li>\n<li><p>android:layout_width(指定当前的宽度，使用match_parent表示和当前父元素一样宽）；</p>\n</li>\n<li><p>android:layout_height(指定当前的高度，使用wrap_content表示适应控件里的内容)；</p>\n</li>\n<li><p>android:text(指定元素中显示的内容)；</p>\n</li>\n</ul>\n<h3 id=\"4-5、-在一个活动（Activity）中加载一个布局-Layout\"><a href=\"#4-5、-在一个活动（Activity）中加载一个布局-Layout\" class=\"headerlink\" title=\"4.5、 在一个活动（Activity）中加载一个布局(Layout)\"></a>4.5、 在一个活动（Activity）中加载一个布局(Layout)</h3><p>在onCreate()方法中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContentView(R.layout.frist_layout);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-6、-关于R文件\"><a href=\"#4-6、-关于R文件\" class=\"headerlink\" title=\"4.6、 关于R文件\"></a>4.6、 关于R文件</h3><p>项目中任何添加任何资源都会在R文件中生成一个相应的资源id</p>\n<p>(因此可以直接使用setContentView()方法加载R.layout.frist_layout)</p>\n<h3 id=\"4-7、-在AndroidManifest文件中注册\"><a href=\"#4-7、-在AndroidManifest文件中注册\" class=\"headerlink\" title=\"4.7、 在AndroidManifest文件中注册\"></a>4.7、 在AndroidManifest文件中注册</h3><p>所有的活动activity,要在AndroidMainifest.xml中进行注册才会生效；</p>\n<p>AndroidMainifest.xml文件在项目中的位app/src/main/AndroidManifest.xml；</p>\n<p><activity>标签中使用android:name来表示指定具体注册那个活动；</activity></p>\n<p>注：不过要是只有一个活动，而没有配置主活动的话，代码在android studio 中是跑不起来的，会抛弃出一串异常的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.gradle.api.tasks.TaskExecutionException: Execution failed for task …</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-8、-设置主活动的方法\"><a href=\"#4-8、-设置主活动的方法\" class=\"headerlink\" title=\"4.8、 设置主活动的方法\"></a>4.8、 设置主活动的方法</h3><p>在<activity>标签内部加入<intent-filter>标签，并在标签中添加</intent-filter></activity></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action android:name=“android.intent.action.MAIN”/&gt;</span><br></pre></td></tr></table></figure>\n<p>和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;category android:name=“android.intent.category.LAUNCHER”/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这两名声明即可。</p>\n<h3 id=\"4-9、-启动器的标题\"><a href=\"#4-9、-启动器的标题\" class=\"headerlink\" title=\"4.9、 启动器的标题\"></a>4.9、 启动器的标题</h3><p>除此之外如果给主活动指定一个label的话，你会发现标题栏中的内容也变成了启动器中的应用程序显示的名称。</p>\n<p>如果应用程序没有声明任何一个活动作为主活动，这个程序仍然可以正常安装，可是你无法在启动器中看到或者打开这个程序，这类程序一般都是作为第三方服务供其他应用内部调用，如支付宝快捷支付服务。</p>\n"},{"title":"Android_Activity_3-活动括展","date":"2018-03-27T07:25:25.000Z","description":"本文是以Android Studio为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录","_content":"\n<!-- TOC -->\n\n- [1、写在前面](#1写在前面)\n- [2、在活动中使用Toast（android 友好提醒方式）](#2在活动中使用toastandroid-友好提醒方式)\n- [3、在活动中使用Menu(菜单)](#3在活动中使用menu菜单)\n- [4、销毁一个活动](#4销毁一个活动)\n\n<!-- /TOC -->\n\n## 1、写在前面\n\n本文是以Android Studio为开发工具，\n<<第一行代码Anroid第2版>> 为学习指导书籍\n> [电子书pdf百度云下载地址:](https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg) \n密码:rx3g\n[Android Studio运行的测试代码下载地址:](https://zhangyongfeng1.github.io/dowland/MyApplication1.zip)\n\n\n## 2、在活动中使用Toast（android 友好提醒方式）\n\n在程序中可以使用它将一些短小的信息通知给用户，这些信息在一段时间后会自动消失。\n示例：\n需要定义一个弹出Toast的触发点，在一个页面上定义一个按钮，点击这个按钮提示一个Tast\n\n\n在onCreate()方法中添加如下代码：\n```\npackage com.bignerdranch.android.myapplication1;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.Toast;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n//        setContentView(R.layout.activity_main);\n//        日志打印\n        setContentView(R.layout.first_layout);//先布局后面才可以签听对象\n\n        Log.v(\"MainActivity1\",\"zyf_@@@@@@@@@@@@--verbose\");\n        Log.d(\"MainActivity2\",\"zyf_@@@@@@@@@@@@--debug\");\n        Log.i(\"MainActivity3\",\"zyf_@@@@@@@@@@@@--info\");\n        Log.w(\"MainActivity4\",\"zyf_@@@@@@@@@@@@--warn\");\n        Log.e(\"MainActivity5\",\"zyf_@@@@@@@@@@@@--error\");\n        Button button1  = (Button) findViewById(R.id.button_1);\n        button1.setOnClickListener(new View.OnClickListener() {\n                   public void onClick(View v) {\n                       Toast.makeText(MainActivity.this, \"you clicked Button 1\", Toast.LENGTH_SHORT).show();\n                    }\n                                   });\n    }\n}\n```\n\n注：要记得引入button 类\n1. 在活动中通过调用方法 findViewById()方法获取到布局文件中定义的元素（\n示例中我们传入R.id.button_1 （这个值是在layout 文件中通过android:id 来得到）按扭的实例。\n2. findViewById()返回的是一个View对象，要向下转型将它转成Button对象\n3. 拿到Button对象之后，可以通过调用setOnClickListenter()方法为按钮注册一个监听器。点击按钮之后就会执行监听器中的onClick()方法，在onClick()方法中调用Toast\n4. Toast的用法 通过静态方法makeText()创建出一个Toast对象，然后调用show()将Toast 显示出来就可以了\nmakeText()方法定义中要传入的三个参数\n第一个参数是Context,Toast上下文，由于活动本身就是一个Context对象，因此这里直接传入MainActivity.this\n就可以了\n第二个参数是显示文本的内容\n第三个参数是Toast显示的时长，这里内置了两个常量\nToast.LENGTH_SHORT\nToast.LENGTH_LONG\n\n## 3、在活动中使用Menu(菜单)\n\n添加一个菜单\n1、在res目录下面新建一个menu文件夹，\n2、然后再menu下面再新建一个名收main的菜单文件（右击menu文件—>new —>Menu resourse file）生成一个main.xml文件\n\n输入内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:id=\"@+id/add_item\"\n        android:title=\"Add\"/>\n    <item\n        android:id=\"@+id/remove_item\"\n        android:title=\"Remove\"/>\n</menu>\n```\n\n其中 <item>标签下面 \nandroid:id 表示给这个菜单定义一个唯一的标识符\nandroid:title 表示给这个菜音定一个名称\n\n然后回到主活动MainActivity.java中重写如下方法\n\n```\n//重写方法\npublic boolean onCreateOptionsMenu(Menu menu){\n    getMenuInflater().inflate(R.menu.main,menu);\n    return true;\n}\n```\n\n\n1、通过getMenuInflater()方法能得到MenuInflater 对象，\n\n2、再调用inflate() 方法可以组给当前活动创建菜单，\n\n3、inflate()方法上送两个参数\n\n第一个是指定通过资源文件创建menu菜单 （菜单R地址）\n\n第二个指定要添加的对象（方法传入的menu 对象）\n\n4、onCreateOptionsMenu() 返回true表示显示菜单\n\n再重写方法加入弹框提示\n\n```\n//重写方法 弹框提示\npublic boolean onOptionsItemSelected(MenuItem item){\n    switch (item.getItemId()){\n        case R.id.add_item:\n            Toast.makeText(this,\"you clicked add\",Toast.LENGTH_SHORT);\n            break;\n        case R.id.remove_item:\n            Toast.makeText(this,\"you clicked remove\",Toast.LENGTH_SHORT);\n            break;\n        default:\n    }\n    return true;\n}\n```\n\n通过item.getItemId()\n来判断点击了那个菜单\n\n## 4、销毁一个活动\n\n一般按一下返加按钮（back）键就可以销毁当前的活动\n\n也可以通过Activity类的 finish()方法调用来销毁当前的活动\n\n","source":"_posts/android_activity2.md","raw":"---\ntitle:  Android_Activity_3-活动括展\ndate: 2018-03-27 15:25:25\ntags: [android,Activity]\ncategories: 张永枫\ndescription: 本文是以Android Studio为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录\n---\n\n<!-- TOC -->\n\n- [1、写在前面](#1写在前面)\n- [2、在活动中使用Toast（android 友好提醒方式）](#2在活动中使用toastandroid-友好提醒方式)\n- [3、在活动中使用Menu(菜单)](#3在活动中使用menu菜单)\n- [4、销毁一个活动](#4销毁一个活动)\n\n<!-- /TOC -->\n\n## 1、写在前面\n\n本文是以Android Studio为开发工具，\n<<第一行代码Anroid第2版>> 为学习指导书籍\n> [电子书pdf百度云下载地址:](https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg) \n密码:rx3g\n[Android Studio运行的测试代码下载地址:](https://zhangyongfeng1.github.io/dowland/MyApplication1.zip)\n\n\n## 2、在活动中使用Toast（android 友好提醒方式）\n\n在程序中可以使用它将一些短小的信息通知给用户，这些信息在一段时间后会自动消失。\n示例：\n需要定义一个弹出Toast的触发点，在一个页面上定义一个按钮，点击这个按钮提示一个Tast\n\n\n在onCreate()方法中添加如下代码：\n```\npackage com.bignerdranch.android.myapplication1;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.Toast;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n//        setContentView(R.layout.activity_main);\n//        日志打印\n        setContentView(R.layout.first_layout);//先布局后面才可以签听对象\n\n        Log.v(\"MainActivity1\",\"zyf_@@@@@@@@@@@@--verbose\");\n        Log.d(\"MainActivity2\",\"zyf_@@@@@@@@@@@@--debug\");\n        Log.i(\"MainActivity3\",\"zyf_@@@@@@@@@@@@--info\");\n        Log.w(\"MainActivity4\",\"zyf_@@@@@@@@@@@@--warn\");\n        Log.e(\"MainActivity5\",\"zyf_@@@@@@@@@@@@--error\");\n        Button button1  = (Button) findViewById(R.id.button_1);\n        button1.setOnClickListener(new View.OnClickListener() {\n                   public void onClick(View v) {\n                       Toast.makeText(MainActivity.this, \"you clicked Button 1\", Toast.LENGTH_SHORT).show();\n                    }\n                                   });\n    }\n}\n```\n\n注：要记得引入button 类\n1. 在活动中通过调用方法 findViewById()方法获取到布局文件中定义的元素（\n示例中我们传入R.id.button_1 （这个值是在layout 文件中通过android:id 来得到）按扭的实例。\n2. findViewById()返回的是一个View对象，要向下转型将它转成Button对象\n3. 拿到Button对象之后，可以通过调用setOnClickListenter()方法为按钮注册一个监听器。点击按钮之后就会执行监听器中的onClick()方法，在onClick()方法中调用Toast\n4. Toast的用法 通过静态方法makeText()创建出一个Toast对象，然后调用show()将Toast 显示出来就可以了\nmakeText()方法定义中要传入的三个参数\n第一个参数是Context,Toast上下文，由于活动本身就是一个Context对象，因此这里直接传入MainActivity.this\n就可以了\n第二个参数是显示文本的内容\n第三个参数是Toast显示的时长，这里内置了两个常量\nToast.LENGTH_SHORT\nToast.LENGTH_LONG\n\n## 3、在活动中使用Menu(菜单)\n\n添加一个菜单\n1、在res目录下面新建一个menu文件夹，\n2、然后再menu下面再新建一个名收main的菜单文件（右击menu文件—>new —>Menu resourse file）生成一个main.xml文件\n\n输入内容如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:id=\"@+id/add_item\"\n        android:title=\"Add\"/>\n    <item\n        android:id=\"@+id/remove_item\"\n        android:title=\"Remove\"/>\n</menu>\n```\n\n其中 <item>标签下面 \nandroid:id 表示给这个菜单定义一个唯一的标识符\nandroid:title 表示给这个菜音定一个名称\n\n然后回到主活动MainActivity.java中重写如下方法\n\n```\n//重写方法\npublic boolean onCreateOptionsMenu(Menu menu){\n    getMenuInflater().inflate(R.menu.main,menu);\n    return true;\n}\n```\n\n\n1、通过getMenuInflater()方法能得到MenuInflater 对象，\n\n2、再调用inflate() 方法可以组给当前活动创建菜单，\n\n3、inflate()方法上送两个参数\n\n第一个是指定通过资源文件创建menu菜单 （菜单R地址）\n\n第二个指定要添加的对象（方法传入的menu 对象）\n\n4、onCreateOptionsMenu() 返回true表示显示菜单\n\n再重写方法加入弹框提示\n\n```\n//重写方法 弹框提示\npublic boolean onOptionsItemSelected(MenuItem item){\n    switch (item.getItemId()){\n        case R.id.add_item:\n            Toast.makeText(this,\"you clicked add\",Toast.LENGTH_SHORT);\n            break;\n        case R.id.remove_item:\n            Toast.makeText(this,\"you clicked remove\",Toast.LENGTH_SHORT);\n            break;\n        default:\n    }\n    return true;\n}\n```\n\n通过item.getItemId()\n来判断点击了那个菜单\n\n## 4、销毁一个活动\n\n一般按一下返加按钮（back）键就可以销毁当前的活动\n\n也可以通过Activity类的 finish()方法调用来销毁当前的活动\n\n","slug":"android_activity2","published":1,"updated":"2019-05-07T02:19:37.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowlf0003p7sa28fwvd1q","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1写在前面\">1、写在前面</a></li>\n<li><a href=\"#2在活动中使用toastandroid-友好提醒方式\">2、在活动中使用Toast（android 友好提醒方式）</a></li>\n<li><a href=\"#3在活动中使用menu菜单\">3、在活动中使用Menu(菜单)</a></li>\n<li><a href=\"#4销毁一个活动\">4、销毁一个活动</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>本文是以Android Studio为开发工具，<br>&lt;&lt;第一行代码Anroid第2版&gt;&gt; 为学习指导书籍</p>\n<blockquote>\n<p><a href=\"https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg\" target=\"_blank\" rel=\"noopener\">电子书pdf百度云下载地址:</a><br>密码:rx3g<br><a href=\"https://zhangyongfeng1.github.io/dowland/MyApplication1.zip\">Android Studio运行的测试代码下载地址:</a></p>\n</blockquote>\n<h2 id=\"2、在活动中使用Toast（android-友好提醒方式）\"><a href=\"#2、在活动中使用Toast（android-友好提醒方式）\" class=\"headerlink\" title=\"2、在活动中使用Toast（android 友好提醒方式）\"></a>2、在活动中使用Toast（android 友好提醒方式）</h2><p>在程序中可以使用它将一些短小的信息通知给用户，这些信息在一段时间后会自动消失。<br>示例：<br>需要定义一个弹出Toast的触发点，在一个页面上定义一个按钮，点击这个按钮提示一个Tast</p>\n<p>在onCreate()方法中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bignerdranch.android.myapplication1;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">//        setContentView(R.layout.activity_main);</span><br><span class=\"line\">//        日志打印</span><br><span class=\"line\">        setContentView(R.layout.first_layout);//先布局后面才可以签听对象</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.v(&quot;MainActivity1&quot;,&quot;zyf_@@@@@@@@@@@@--verbose&quot;);</span><br><span class=\"line\">        Log.d(&quot;MainActivity2&quot;,&quot;zyf_@@@@@@@@@@@@--debug&quot;);</span><br><span class=\"line\">        Log.i(&quot;MainActivity3&quot;,&quot;zyf_@@@@@@@@@@@@--info&quot;);</span><br><span class=\"line\">        Log.w(&quot;MainActivity4&quot;,&quot;zyf_@@@@@@@@@@@@--warn&quot;);</span><br><span class=\"line\">        Log.e(&quot;MainActivity5&quot;,&quot;zyf_@@@@@@@@@@@@--error&quot;);</span><br><span class=\"line\">        Button button1  = (Button) findViewById(R.id.button_1);</span><br><span class=\"line\">        button1.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">                   public void onClick(View v) &#123;</span><br><span class=\"line\">                       Toast.makeText(MainActivity.this, &quot;you clicked Button 1&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                                   &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：要记得引入button 类</p>\n<ol>\n<li>在活动中通过调用方法 findViewById()方法获取到布局文件中定义的元素（<br>示例中我们传入R.id.button_1 （这个值是在layout 文件中通过android:id 来得到）按扭的实例。</li>\n<li>findViewById()返回的是一个View对象，要向下转型将它转成Button对象</li>\n<li>拿到Button对象之后，可以通过调用setOnClickListenter()方法为按钮注册一个监听器。点击按钮之后就会执行监听器中的onClick()方法，在onClick()方法中调用Toast</li>\n<li>Toast的用法 通过静态方法makeText()创建出一个Toast对象，然后调用show()将Toast 显示出来就可以了<br>makeText()方法定义中要传入的三个参数<br>第一个参数是Context,Toast上下文，由于活动本身就是一个Context对象，因此这里直接传入MainActivity.this<br>就可以了<br>第二个参数是显示文本的内容<br>第三个参数是Toast显示的时长，这里内置了两个常量<br>Toast.LENGTH_SHORT<br>Toast.LENGTH_LONG</li>\n</ol>\n<h2 id=\"3、在活动中使用Menu-菜单\"><a href=\"#3、在活动中使用Menu-菜单\" class=\"headerlink\" title=\"3、在活动中使用Menu(菜单)\"></a>3、在活动中使用Menu(菜单)</h2><p>添加一个菜单<br>1、在res目录下面新建一个menu文件夹，<br>2、然后再menu下面再新建一个名收main的菜单文件（右击menu文件—&gt;new —&gt;Menu resourse file）生成一个main.xml文件</p>\n<p>输入内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=&quot;@+id/add_item&quot;</span><br><span class=\"line\">        android:title=&quot;Add&quot;/&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=&quot;@+id/remove_item&quot;</span><br><span class=\"line\">        android:title=&quot;Remove&quot;/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<p>其中 <item>标签下面<br>android:id 表示给这个菜单定义一个唯一的标识符<br>android:title 表示给这个菜音定一个名称</item></p>\n<p>然后回到主活动MainActivity.java中重写如下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写方法</span><br><span class=\"line\">public boolean onCreateOptionsMenu(Menu menu)&#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.main,menu);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1、通过getMenuInflater()方法能得到MenuInflater 对象，</p>\n<p>2、再调用inflate() 方法可以组给当前活动创建菜单，</p>\n<p>3、inflate()方法上送两个参数</p>\n<p>第一个是指定通过资源文件创建menu菜单 （菜单R地址）</p>\n<p>第二个指定要添加的对象（方法传入的menu 对象）</p>\n<p>4、onCreateOptionsMenu() 返回true表示显示菜单</p>\n<p>再重写方法加入弹框提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写方法 弹框提示</span><br><span class=\"line\">public boolean onOptionsItemSelected(MenuItem item)&#123;</span><br><span class=\"line\">    switch (item.getItemId())&#123;</span><br><span class=\"line\">        case R.id.add_item:</span><br><span class=\"line\">            Toast.makeText(this,&quot;you clicked add&quot;,Toast.LENGTH_SHORT);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.remove_item:</span><br><span class=\"line\">            Toast.makeText(this,&quot;you clicked remove&quot;,Toast.LENGTH_SHORT);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过item.getItemId()<br>来判断点击了那个菜单</p>\n<h2 id=\"4、销毁一个活动\"><a href=\"#4、销毁一个活动\" class=\"headerlink\" title=\"4、销毁一个活动\"></a>4、销毁一个活动</h2><p>一般按一下返加按钮（back）键就可以销毁当前的活动</p>\n<p>也可以通过Activity类的 finish()方法调用来销毁当前的活动</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#1写在前面\">1、写在前面</a></li>\n<li><a href=\"#2在活动中使用toastandroid-友好提醒方式\">2、在活动中使用Toast（android 友好提醒方式）</a></li>\n<li><a href=\"#3在活动中使用menu菜单\">3、在活动中使用Menu(菜单)</a></li>\n<li><a href=\"#4销毁一个活动\">4、销毁一个活动</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>本文是以Android Studio为开发工具，<br>&lt;&lt;第一行代码Anroid第2版&gt;&gt; 为学习指导书籍</p>\n<blockquote>\n<p><a href=\"https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg\" target=\"_blank\" rel=\"noopener\">电子书pdf百度云下载地址:</a><br>密码:rx3g<br><a href=\"https://zhangyongfeng1.github.io/dowland/MyApplication1.zip\">Android Studio运行的测试代码下载地址:</a></p>\n</blockquote>\n<h2 id=\"2、在活动中使用Toast（android-友好提醒方式）\"><a href=\"#2、在活动中使用Toast（android-友好提醒方式）\" class=\"headerlink\" title=\"2、在活动中使用Toast（android 友好提醒方式）\"></a>2、在活动中使用Toast（android 友好提醒方式）</h2><p>在程序中可以使用它将一些短小的信息通知给用户，这些信息在一段时间后会自动消失。<br>示例：<br>需要定义一个弹出Toast的触发点，在一个页面上定义一个按钮，点击这个按钮提示一个Tast</p>\n<p>在onCreate()方法中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bignerdranch.android.myapplication1;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">//        setContentView(R.layout.activity_main);</span><br><span class=\"line\">//        日志打印</span><br><span class=\"line\">        setContentView(R.layout.first_layout);//先布局后面才可以签听对象</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.v(&quot;MainActivity1&quot;,&quot;zyf_@@@@@@@@@@@@--verbose&quot;);</span><br><span class=\"line\">        Log.d(&quot;MainActivity2&quot;,&quot;zyf_@@@@@@@@@@@@--debug&quot;);</span><br><span class=\"line\">        Log.i(&quot;MainActivity3&quot;,&quot;zyf_@@@@@@@@@@@@--info&quot;);</span><br><span class=\"line\">        Log.w(&quot;MainActivity4&quot;,&quot;zyf_@@@@@@@@@@@@--warn&quot;);</span><br><span class=\"line\">        Log.e(&quot;MainActivity5&quot;,&quot;zyf_@@@@@@@@@@@@--error&quot;);</span><br><span class=\"line\">        Button button1  = (Button) findViewById(R.id.button_1);</span><br><span class=\"line\">        button1.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">                   public void onClick(View v) &#123;</span><br><span class=\"line\">                       Toast.makeText(MainActivity.this, &quot;you clicked Button 1&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                                   &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：要记得引入button 类</p>\n<ol>\n<li>在活动中通过调用方法 findViewById()方法获取到布局文件中定义的元素（<br>示例中我们传入R.id.button_1 （这个值是在layout 文件中通过android:id 来得到）按扭的实例。</li>\n<li>findViewById()返回的是一个View对象，要向下转型将它转成Button对象</li>\n<li>拿到Button对象之后，可以通过调用setOnClickListenter()方法为按钮注册一个监听器。点击按钮之后就会执行监听器中的onClick()方法，在onClick()方法中调用Toast</li>\n<li>Toast的用法 通过静态方法makeText()创建出一个Toast对象，然后调用show()将Toast 显示出来就可以了<br>makeText()方法定义中要传入的三个参数<br>第一个参数是Context,Toast上下文，由于活动本身就是一个Context对象，因此这里直接传入MainActivity.this<br>就可以了<br>第二个参数是显示文本的内容<br>第三个参数是Toast显示的时长，这里内置了两个常量<br>Toast.LENGTH_SHORT<br>Toast.LENGTH_LONG</li>\n</ol>\n<h2 id=\"3、在活动中使用Menu-菜单\"><a href=\"#3、在活动中使用Menu-菜单\" class=\"headerlink\" title=\"3、在活动中使用Menu(菜单)\"></a>3、在活动中使用Menu(菜单)</h2><p>添加一个菜单<br>1、在res目录下面新建一个menu文件夹，<br>2、然后再menu下面再新建一个名收main的菜单文件（右击menu文件—&gt;new —&gt;Menu resourse file）生成一个main.xml文件</p>\n<p>输入内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=&quot;@+id/add_item&quot;</span><br><span class=\"line\">        android:title=&quot;Add&quot;/&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id=&quot;@+id/remove_item&quot;</span><br><span class=\"line\">        android:title=&quot;Remove&quot;/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<p>其中 <item>标签下面<br>android:id 表示给这个菜单定义一个唯一的标识符<br>android:title 表示给这个菜音定一个名称</item></p>\n<p>然后回到主活动MainActivity.java中重写如下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写方法</span><br><span class=\"line\">public boolean onCreateOptionsMenu(Menu menu)&#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.main,menu);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1、通过getMenuInflater()方法能得到MenuInflater 对象，</p>\n<p>2、再调用inflate() 方法可以组给当前活动创建菜单，</p>\n<p>3、inflate()方法上送两个参数</p>\n<p>第一个是指定通过资源文件创建menu菜单 （菜单R地址）</p>\n<p>第二个指定要添加的对象（方法传入的menu 对象）</p>\n<p>4、onCreateOptionsMenu() 返回true表示显示菜单</p>\n<p>再重写方法加入弹框提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写方法 弹框提示</span><br><span class=\"line\">public boolean onOptionsItemSelected(MenuItem item)&#123;</span><br><span class=\"line\">    switch (item.getItemId())&#123;</span><br><span class=\"line\">        case R.id.add_item:</span><br><span class=\"line\">            Toast.makeText(this,&quot;you clicked add&quot;,Toast.LENGTH_SHORT);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case R.id.remove_item:</span><br><span class=\"line\">            Toast.makeText(this,&quot;you clicked remove&quot;,Toast.LENGTH_SHORT);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过item.getItemId()<br>来判断点击了那个菜单</p>\n<h2 id=\"4、销毁一个活动\"><a href=\"#4、销毁一个活动\" class=\"headerlink\" title=\"4、销毁一个活动\"></a>4、销毁一个活动</h2><p>一般按一下返加按钮（back）键就可以销毁当前的活动</p>\n<p>也可以通过Activity类的 finish()方法调用来销毁当前的活动</p>\n"},{"title":"基于hexo搭建GitHub静态博客","date":"2018-03-23T11:05:00.000Z","description":"搭建博客参考教程","_content":"\n## 一.准备\n\n[hexo](https://github.com/hexojs/hexo) 是一个工具，可以帮助我们自动生成博客网站的代码，我们只需要用 MarkDown 写好博客，再使用 hexo 生成网站代码，最后把网站代码部署到 GitHub 上即可。需要以下准备：\n\n- 1.**GitHub**。 基于 Git 的代码托管网站，提供静态页面服务。首先要有一个GitHub账号，博客网站的代码是放在 GitHub 仓库上的。\n- 2.**Git**。 需要安装 [Git](https://gitforwindows.org) 版本控制器，类似 SVN 的工具。\n- 3.**Node.js**。 需要安装 [Node.js](http://nodejs.cn)。 hexo 是基于 nodejs 的一套框架工具。\n- 4.**MarkDown**。 程序员最爱的写文档工具，写博客需要用到。具体语法可以参考CSDN的MarkDown语法模板 [下载](/download/MarkDown.rar)。\n\n## 二.安装 hexo 环境。\n\n安装好 Nodejs 后，就可以安装 hexo 框架了。\n\n- 1.首先新建一个文件夹（涉及到代码的文件夹，请大家务必不要用中文），用于存放 hexo 框架，我这边以 `D:\\work\\hexo` 为例。\n\n- 2.打开 CMD 命令窗口，cd 进入 `hexo` 文件夹，输入以下命令安装 hexo ：\n\n``` bash\nnpm install hexo-cli -g\n```\n\n- 3.安装完成后，输入以下命令生成博客工程（文件夹），这边工程先命名为 `blog` ：\n\n``` bash\nhexo init blog\n```\n\n- 4.进入工程 `blog` 文件夹：\n\n``` bash\ncd blog\n```\n\n## 三.写文章\n\n安装完成后，可以看到 `blog` 目录下有一堆文件和文件夹，\n\n![Folder](/img/hexo/folder.jpg)\n\n其中：\n\nsource 用于放 MarkDown 写的文章文档；\n\nthemes 是存放博客主题的文件夹；\n\npublic 文件夹中存放自动生成的网站代码。\n\n知道这些就可以开始写博客了，可以看到 `\\source\\_posts` 下有一个默认的文档 helloworld ，就是一篇默认的博客。\n\n- 1.新建一篇博客，在 `D:\\work\\hexo\\blog` 目录下，输入以下命令会在 `D:\\work\\hexo\\blog\\source\\_posts` 中生成一个 .md 后缀的 MarkDown 文件：\n\n``` bash\nhexo new \"文章标题\"\n```\n\n- 2.在生成的文件中写博客，一般的文本编辑器都可以编写 MarkDown 文档；\n\n- 3.写完博客后，输入以下命令就可以在 `public` 目录下，自动生成静态的博客网站代码：\n\n``` bash\nhexo generate\n或\nhexo g\n```\n\n- 4.这时候启动本地服务，就可以预览网站（ http://localhost:4000/ ）效果了，启动服务命令：\n\n``` bash\nhexo server\n```\n\n## 四.部署到 GitHub 上\n\n- 1.新建 GitHub 代码仓库，进入你的 [GitHub](https://github.com/) 主页，点击右上角的加号，选择 New repository 新建项目。这里要注意，代码仓库格式必须是： XXX.github.io ，其中 **XXX 必须是你 GitHub 的 ID**。\n\n![GitHub](/img/hexo/GitHub_1.jpg)\n\n![GitHub](/img/hexo/GitHub_2.jpg)\n\n- 2.克隆 GitHub 代码仓库到本地，找个合适的文件夹放置网站代码：\n\n``` bash\ngit clone https://github.com/XXX/XXX.github.io.git\n```\n\nhttps://github.com/XXX/XXX.github.io.git 是代码仓库地址，获取方式如下：\n\n![GitHub](/img/hexo/GitHub_3.jpg)\n\n- 3.上传博客网站代码。前面写完文章，运行命令生成的网站代码都在 public 文件夹中，复制 public 目录下的所有文件，粘贴到上一步的代码仓库（`XXX.github.io` 文件夹）中。提交代码，即在代码仓库文件夹中，右键 Git Bash Here，依次执行以下命令：\n\n``` bash\ngit add . // 添加修改\ngit commit -m \"备注\" // 提交\ngit push origin master // 上传到GitHub代码库\n```\n\n然后输入账号密码，等待上传完成后，过几分钟就可以看到网站效果。\n\n注意：如果你是首次使用 Git ，它会提示你设置一些配置，只需按提示输入配置命令即可。\n\n### 以下是附加的，有兴趣可以尝试。\n\n## 五.更换主题\n\n以上步骤完成后，你就有一个博客了，但是还是默认的主题 landscape。可以在这两个地方找自己喜欢的主题：[hexo官网](https://hexo.io/themes/)、[有哪些好看的 Hexo 主题？](http://www.zhihu.com/question/24422335)，也可以直接上网搜 hexo 主题。\n\n以此博客的主题 [Maupassant](https://github.com/tufu9441/maupassant-hexo) 为例：\n\n- 1.克隆主题到 `themes` 文件夹中：\n\n``` bash\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\n```\n\n- 2.按照文档要求，安装插件：\n\n``` bash\nnpm install hexo-renderer-pug --save\nnpm install hexo-renderer-sass --save\n```\n\n- 3.修改博客 hexo 目录下的 `_config.yml` 文件：将 theme 项的 landscape 改为 maupassant。这里提示下，`_config.yml` 中还有博客的其他配置，可以按需更改。\n\n- 4.配置主题。主题文件夹中也有一个 `_config.yml` 文件，这个是主题里相关的配置，一般主题都会有配置文档可以参考。\n\n当前博客的配置参考: [下载](/download/blog_onfig.rar)\n\n## 六.RSS订阅\n\nRSS就是提供接口出来，让别人可以订阅你的博客。hexo 有对应相关的[插件](https://github.com/hexojs/hexo-generator-feed)。输入以下命令安装插件：\n\n``` bash\nnpm install hexo-generator-feed --save\n```\n\n在博客的配置文件 `_config.yml` 里添加如下配置，：\n\n```\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n```\n\n编译之后，`public` 根目录下会生成 `atom.xml` 文件，这就说明成功了。另外，一般主题都会默认配置好 RSS 文件的路径，如果没有，则在主题的配置文件里填上即可。\n\n## 七.404网页\n\n你还可以给自己自定义一个 404 网页，一旦访问你的网站的某个页面不存在时，就会跳到 404 网页。网上也有很多模板可以用，如：[腾讯的寻子公益404页面](http://www.qq.com/404/)。\n\n在 source 下新建一个 404.html 或 404.md 文件，把以下代码复制进去：\n\n```\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n``` \n\n两个参数\"homePageUrl\"、\"homePageName\"可以按需修改。\n","source":"_posts/blog_hexo_GitHub.md","raw":"---\ntitle: 基于hexo搭建GitHub静态博客\ndate: 2018-03-23 19:05:00\ntags: [hexo]\ncategories: 蔡向炜\ndescription: 搭建博客参考教程\n---\n\n## 一.准备\n\n[hexo](https://github.com/hexojs/hexo) 是一个工具，可以帮助我们自动生成博客网站的代码，我们只需要用 MarkDown 写好博客，再使用 hexo 生成网站代码，最后把网站代码部署到 GitHub 上即可。需要以下准备：\n\n- 1.**GitHub**。 基于 Git 的代码托管网站，提供静态页面服务。首先要有一个GitHub账号，博客网站的代码是放在 GitHub 仓库上的。\n- 2.**Git**。 需要安装 [Git](https://gitforwindows.org) 版本控制器，类似 SVN 的工具。\n- 3.**Node.js**。 需要安装 [Node.js](http://nodejs.cn)。 hexo 是基于 nodejs 的一套框架工具。\n- 4.**MarkDown**。 程序员最爱的写文档工具，写博客需要用到。具体语法可以参考CSDN的MarkDown语法模板 [下载](/download/MarkDown.rar)。\n\n## 二.安装 hexo 环境。\n\n安装好 Nodejs 后，就可以安装 hexo 框架了。\n\n- 1.首先新建一个文件夹（涉及到代码的文件夹，请大家务必不要用中文），用于存放 hexo 框架，我这边以 `D:\\work\\hexo` 为例。\n\n- 2.打开 CMD 命令窗口，cd 进入 `hexo` 文件夹，输入以下命令安装 hexo ：\n\n``` bash\nnpm install hexo-cli -g\n```\n\n- 3.安装完成后，输入以下命令生成博客工程（文件夹），这边工程先命名为 `blog` ：\n\n``` bash\nhexo init blog\n```\n\n- 4.进入工程 `blog` 文件夹：\n\n``` bash\ncd blog\n```\n\n## 三.写文章\n\n安装完成后，可以看到 `blog` 目录下有一堆文件和文件夹，\n\n![Folder](/img/hexo/folder.jpg)\n\n其中：\n\nsource 用于放 MarkDown 写的文章文档；\n\nthemes 是存放博客主题的文件夹；\n\npublic 文件夹中存放自动生成的网站代码。\n\n知道这些就可以开始写博客了，可以看到 `\\source\\_posts` 下有一个默认的文档 helloworld ，就是一篇默认的博客。\n\n- 1.新建一篇博客，在 `D:\\work\\hexo\\blog` 目录下，输入以下命令会在 `D:\\work\\hexo\\blog\\source\\_posts` 中生成一个 .md 后缀的 MarkDown 文件：\n\n``` bash\nhexo new \"文章标题\"\n```\n\n- 2.在生成的文件中写博客，一般的文本编辑器都可以编写 MarkDown 文档；\n\n- 3.写完博客后，输入以下命令就可以在 `public` 目录下，自动生成静态的博客网站代码：\n\n``` bash\nhexo generate\n或\nhexo g\n```\n\n- 4.这时候启动本地服务，就可以预览网站（ http://localhost:4000/ ）效果了，启动服务命令：\n\n``` bash\nhexo server\n```\n\n## 四.部署到 GitHub 上\n\n- 1.新建 GitHub 代码仓库，进入你的 [GitHub](https://github.com/) 主页，点击右上角的加号，选择 New repository 新建项目。这里要注意，代码仓库格式必须是： XXX.github.io ，其中 **XXX 必须是你 GitHub 的 ID**。\n\n![GitHub](/img/hexo/GitHub_1.jpg)\n\n![GitHub](/img/hexo/GitHub_2.jpg)\n\n- 2.克隆 GitHub 代码仓库到本地，找个合适的文件夹放置网站代码：\n\n``` bash\ngit clone https://github.com/XXX/XXX.github.io.git\n```\n\nhttps://github.com/XXX/XXX.github.io.git 是代码仓库地址，获取方式如下：\n\n![GitHub](/img/hexo/GitHub_3.jpg)\n\n- 3.上传博客网站代码。前面写完文章，运行命令生成的网站代码都在 public 文件夹中，复制 public 目录下的所有文件，粘贴到上一步的代码仓库（`XXX.github.io` 文件夹）中。提交代码，即在代码仓库文件夹中，右键 Git Bash Here，依次执行以下命令：\n\n``` bash\ngit add . // 添加修改\ngit commit -m \"备注\" // 提交\ngit push origin master // 上传到GitHub代码库\n```\n\n然后输入账号密码，等待上传完成后，过几分钟就可以看到网站效果。\n\n注意：如果你是首次使用 Git ，它会提示你设置一些配置，只需按提示输入配置命令即可。\n\n### 以下是附加的，有兴趣可以尝试。\n\n## 五.更换主题\n\n以上步骤完成后，你就有一个博客了，但是还是默认的主题 landscape。可以在这两个地方找自己喜欢的主题：[hexo官网](https://hexo.io/themes/)、[有哪些好看的 Hexo 主题？](http://www.zhihu.com/question/24422335)，也可以直接上网搜 hexo 主题。\n\n以此博客的主题 [Maupassant](https://github.com/tufu9441/maupassant-hexo) 为例：\n\n- 1.克隆主题到 `themes` 文件夹中：\n\n``` bash\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\n```\n\n- 2.按照文档要求，安装插件：\n\n``` bash\nnpm install hexo-renderer-pug --save\nnpm install hexo-renderer-sass --save\n```\n\n- 3.修改博客 hexo 目录下的 `_config.yml` 文件：将 theme 项的 landscape 改为 maupassant。这里提示下，`_config.yml` 中还有博客的其他配置，可以按需更改。\n\n- 4.配置主题。主题文件夹中也有一个 `_config.yml` 文件，这个是主题里相关的配置，一般主题都会有配置文档可以参考。\n\n当前博客的配置参考: [下载](/download/blog_onfig.rar)\n\n## 六.RSS订阅\n\nRSS就是提供接口出来，让别人可以订阅你的博客。hexo 有对应相关的[插件](https://github.com/hexojs/hexo-generator-feed)。输入以下命令安装插件：\n\n``` bash\nnpm install hexo-generator-feed --save\n```\n\n在博客的配置文件 `_config.yml` 里添加如下配置，：\n\n```\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n```\n\n编译之后，`public` 根目录下会生成 `atom.xml` 文件，这就说明成功了。另外，一般主题都会默认配置好 RSS 文件的路径，如果没有，则在主题的配置文件里填上即可。\n\n## 七.404网页\n\n你还可以给自己自定义一个 404 网页，一旦访问你的网站的某个页面不存在时，就会跳到 404 网页。网上也有很多模板可以用，如：[腾讯的寻子公益404页面](http://www.qq.com/404/)。\n\n在 source 下新建一个 404.html 或 404.md 文件，把以下代码复制进去：\n\n```\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n``` \n\n两个参数\"homePageUrl\"、\"homePageName\"可以按需修改。\n","slug":"blog_hexo_GitHub","published":1,"updated":"2019-05-07T02:19:37.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowlo0006p7sa6s017lt0","content":"<h2 id=\"一-准备\"><a href=\"#一-准备\" class=\"headerlink\" title=\"一.准备\"></a>一.准备</h2><p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo</a> 是一个工具，可以帮助我们自动生成博客网站的代码，我们只需要用 MarkDown 写好博客，再使用 hexo 生成网站代码，最后把网站代码部署到 GitHub 上即可。需要以下准备：</p>\n<ul>\n<li>1.<strong>GitHub</strong>。 基于 Git 的代码托管网站，提供静态页面服务。首先要有一个GitHub账号，博客网站的代码是放在 GitHub 仓库上的。</li>\n<li>2.<strong>Git</strong>。 需要安装 <a href=\"https://gitforwindows.org\" target=\"_blank\" rel=\"noopener\">Git</a> 版本控制器，类似 SVN 的工具。</li>\n<li>3.<strong>Node.js</strong>。 需要安装 <a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"noopener\">Node.js</a>。 hexo 是基于 nodejs 的一套框架工具。</li>\n<li>4.<strong>MarkDown</strong>。 程序员最爱的写文档工具，写博客需要用到。具体语法可以参考CSDN的MarkDown语法模板 <a href=\"/download/MarkDown.rar\">下载</a>。</li>\n</ul>\n<h2 id=\"二-安装-hexo-环境。\"><a href=\"#二-安装-hexo-环境。\" class=\"headerlink\" title=\"二.安装 hexo 环境。\"></a>二.安装 hexo 环境。</h2><p>安装好 Nodejs 后，就可以安装 hexo 框架了。</p>\n<ul>\n<li><p>1.首先新建一个文件夹（涉及到代码的文件夹，请大家务必不要用中文），用于存放 hexo 框架，我这边以 <code>D:\\work\\hexo</code> 为例。</p>\n</li>\n<li><p>2.打开 CMD 命令窗口，cd 进入 <code>hexo</code> 文件夹，输入以下命令安装 hexo ：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.安装完成后，输入以下命令生成博客工程（文件夹），这边工程先命名为 <code>blog</code> ：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.进入工程 <code>blog</code> 文件夹：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-写文章\"><a href=\"#三-写文章\" class=\"headerlink\" title=\"三.写文章\"></a>三.写文章</h2><p>安装完成后，可以看到 <code>blog</code> 目录下有一堆文件和文件夹，</p>\n<p><img src=\"/img/hexo/folder.jpg\" alt=\"Folder\"></p>\n<p>其中：</p>\n<p>source 用于放 MarkDown 写的文章文档；</p>\n<p>themes 是存放博客主题的文件夹；</p>\n<p>public 文件夹中存放自动生成的网站代码。</p>\n<p>知道这些就可以开始写博客了，可以看到 <code>\\source\\_posts</code> 下有一个默认的文档 helloworld ，就是一篇默认的博客。</p>\n<ul>\n<li>1.新建一篇博客，在 <code>D:\\work\\hexo\\blog</code> 目录下，输入以下命令会在 <code>D:\\work\\hexo\\blog\\source\\_posts</code> 中生成一个 .md 后缀的 MarkDown 文件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"文章标题\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>2.在生成的文件中写博客，一般的文本编辑器都可以编写 MarkDown 文档；</p>\n</li>\n<li><p>3.写完博客后，输入以下命令就可以在 <code>public</code> 目录下，自动生成静态的博客网站代码：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">或</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.这时候启动本地服务，就可以预览网站（ <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ）效果了，启动服务命令：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-部署到-GitHub-上\"><a href=\"#四-部署到-GitHub-上\" class=\"headerlink\" title=\"四.部署到 GitHub 上\"></a>四.部署到 GitHub 上</h2><ul>\n<li>1.新建 GitHub 代码仓库，进入你的 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 主页，点击右上角的加号，选择 New repository 新建项目。这里要注意，代码仓库格式必须是： XXX.github.io ，其中 <strong>XXX 必须是你 GitHub 的 ID</strong>。</li>\n</ul>\n<p><img src=\"/img/hexo/GitHub_1.jpg\" alt=\"GitHub\"></p>\n<p><img src=\"/img/hexo/GitHub_2.jpg\" alt=\"GitHub\"></p>\n<ul>\n<li>2.克隆 GitHub 代码仓库到本地，找个合适的文件夹放置网站代码：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/XXX/XXX.github.io.git</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/XXX/XXX.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/XXX/XXX.github.io.git</a> 是代码仓库地址，获取方式如下：</p>\n<p><img src=\"/img/hexo/GitHub_3.jpg\" alt=\"GitHub\"></p>\n<ul>\n<li>3.上传博客网站代码。前面写完文章，运行命令生成的网站代码都在 public 文件夹中，复制 public 目录下的所有文件，粘贴到上一步的代码仓库（<code>XXX.github.io</code> 文件夹）中。提交代码，即在代码仓库文件夹中，右键 Git Bash Here，依次执行以下命令：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . // 添加修改</span><br><span class=\"line\">git commit -m <span class=\"string\">\"备注\"</span> // 提交</span><br><span class=\"line\">git push origin master // 上传到GitHub代码库</span><br></pre></td></tr></table></figure>\n<p>然后输入账号密码，等待上传完成后，过几分钟就可以看到网站效果。</p>\n<p>注意：如果你是首次使用 Git ，它会提示你设置一些配置，只需按提示输入配置命令即可。</p>\n<h3 id=\"以下是附加的，有兴趣可以尝试。\"><a href=\"#以下是附加的，有兴趣可以尝试。\" class=\"headerlink\" title=\"以下是附加的，有兴趣可以尝试。\"></a>以下是附加的，有兴趣可以尝试。</h3><h2 id=\"五-更换主题\"><a href=\"#五-更换主题\" class=\"headerlink\" title=\"五.更换主题\"></a>五.更换主题</h2><p>以上步骤完成后，你就有一个博客了，但是还是默认的主题 landscape。可以在这两个地方找自己喜欢的主题：<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>、<a href=\"http://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">有哪些好看的 Hexo 主题？</a>，也可以直接上网搜 hexo 主题。</p>\n<p>以此博客的主题 <a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">Maupassant</a> 为例：</p>\n<ul>\n<li>1.克隆主题到 <code>themes</code> 文件夹中：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.按照文档要求，安装插件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-pug --save</span><br><span class=\"line\">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>3.修改博客 hexo 目录下的 <code>_config.yml</code> 文件：将 theme 项的 landscape 改为 maupassant。这里提示下，<code>_config.yml</code> 中还有博客的其他配置，可以按需更改。</p>\n</li>\n<li><p>4.配置主题。主题文件夹中也有一个 <code>_config.yml</code> 文件，这个是主题里相关的配置，一般主题都会有配置文档可以参考。</p>\n</li>\n</ul>\n<p>当前博客的配置参考: <a href=\"/download/blog_onfig.rar\">下载</a></p>\n<h2 id=\"六-RSS订阅\"><a href=\"#六-RSS订阅\" class=\"headerlink\" title=\"六.RSS订阅\"></a>六.RSS订阅</h2><p>RSS就是提供接口出来，让别人可以订阅你的博客。hexo 有对应相关的<a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">插件</a>。输入以下命令安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>在博客的配置文件 <code>_config.yml</code> 里添加如下配置，：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br><span class=\"line\">  content_limit: 140</span><br><span class=\"line\">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure>\n<p>编译之后，<code>public</code> 根目录下会生成 <code>atom.xml</code> 文件，这就说明成功了。另外，一般主题都会默认配置好 RSS 文件的路径，如果没有，则在主题的配置文件里填上即可。</p>\n<h2 id=\"七-404网页\"><a href=\"#七-404网页\" class=\"headerlink\" title=\"七.404网页\"></a>七.404网页</h2><p>你还可以给自己自定义一个 404 网页，一旦访问你的网站的某个页面不存在时，就会跳到 404 网页。网上也有很多模板可以用，如：<a href=\"http://www.qq.com/404/\" target=\"_blank\" rel=\"noopener\">腾讯的寻子公益404页面</a>。</p>\n<p>在 source 下新建一个 404.html 或 404.md 文件，把以下代码复制进去：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;\n</code></pre><p>两个参数”homePageUrl”、”homePageName”可以按需修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-准备\"><a href=\"#一-准备\" class=\"headerlink\" title=\"一.准备\"></a>一.准备</h2><p><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">hexo</a> 是一个工具，可以帮助我们自动生成博客网站的代码，我们只需要用 MarkDown 写好博客，再使用 hexo 生成网站代码，最后把网站代码部署到 GitHub 上即可。需要以下准备：</p>\n<ul>\n<li>1.<strong>GitHub</strong>。 基于 Git 的代码托管网站，提供静态页面服务。首先要有一个GitHub账号，博客网站的代码是放在 GitHub 仓库上的。</li>\n<li>2.<strong>Git</strong>。 需要安装 <a href=\"https://gitforwindows.org\" target=\"_blank\" rel=\"noopener\">Git</a> 版本控制器，类似 SVN 的工具。</li>\n<li>3.<strong>Node.js</strong>。 需要安装 <a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"noopener\">Node.js</a>。 hexo 是基于 nodejs 的一套框架工具。</li>\n<li>4.<strong>MarkDown</strong>。 程序员最爱的写文档工具，写博客需要用到。具体语法可以参考CSDN的MarkDown语法模板 <a href=\"/download/MarkDown.rar\">下载</a>。</li>\n</ul>\n<h2 id=\"二-安装-hexo-环境。\"><a href=\"#二-安装-hexo-环境。\" class=\"headerlink\" title=\"二.安装 hexo 环境。\"></a>二.安装 hexo 环境。</h2><p>安装好 Nodejs 后，就可以安装 hexo 框架了。</p>\n<ul>\n<li><p>1.首先新建一个文件夹（涉及到代码的文件夹，请大家务必不要用中文），用于存放 hexo 框架，我这边以 <code>D:\\work\\hexo</code> 为例。</p>\n</li>\n<li><p>2.打开 CMD 命令窗口，cd 进入 <code>hexo</code> 文件夹，输入以下命令安装 hexo ：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.安装完成后，输入以下命令生成博客工程（文件夹），这边工程先命名为 <code>blog</code> ：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.进入工程 <code>blog</code> 文件夹：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-写文章\"><a href=\"#三-写文章\" class=\"headerlink\" title=\"三.写文章\"></a>三.写文章</h2><p>安装完成后，可以看到 <code>blog</code> 目录下有一堆文件和文件夹，</p>\n<p><img src=\"/img/hexo/folder.jpg\" alt=\"Folder\"></p>\n<p>其中：</p>\n<p>source 用于放 MarkDown 写的文章文档；</p>\n<p>themes 是存放博客主题的文件夹；</p>\n<p>public 文件夹中存放自动生成的网站代码。</p>\n<p>知道这些就可以开始写博客了，可以看到 <code>\\source\\_posts</code> 下有一个默认的文档 helloworld ，就是一篇默认的博客。</p>\n<ul>\n<li>1.新建一篇博客，在 <code>D:\\work\\hexo\\blog</code> 目录下，输入以下命令会在 <code>D:\\work\\hexo\\blog\\source\\_posts</code> 中生成一个 .md 后缀的 MarkDown 文件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"文章标题\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>2.在生成的文件中写博客，一般的文本编辑器都可以编写 MarkDown 文档；</p>\n</li>\n<li><p>3.写完博客后，输入以下命令就可以在 <code>public</code> 目录下，自动生成静态的博客网站代码：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">或</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.这时候启动本地服务，就可以预览网站（ <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ）效果了，启动服务命令：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-部署到-GitHub-上\"><a href=\"#四-部署到-GitHub-上\" class=\"headerlink\" title=\"四.部署到 GitHub 上\"></a>四.部署到 GitHub 上</h2><ul>\n<li>1.新建 GitHub 代码仓库，进入你的 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a> 主页，点击右上角的加号，选择 New repository 新建项目。这里要注意，代码仓库格式必须是： XXX.github.io ，其中 <strong>XXX 必须是你 GitHub 的 ID</strong>。</li>\n</ul>\n<p><img src=\"/img/hexo/GitHub_1.jpg\" alt=\"GitHub\"></p>\n<p><img src=\"/img/hexo/GitHub_2.jpg\" alt=\"GitHub\"></p>\n<ul>\n<li>2.克隆 GitHub 代码仓库到本地，找个合适的文件夹放置网站代码：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/XXX/XXX.github.io.git</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/XXX/XXX.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/XXX/XXX.github.io.git</a> 是代码仓库地址，获取方式如下：</p>\n<p><img src=\"/img/hexo/GitHub_3.jpg\" alt=\"GitHub\"></p>\n<ul>\n<li>3.上传博客网站代码。前面写完文章，运行命令生成的网站代码都在 public 文件夹中，复制 public 目录下的所有文件，粘贴到上一步的代码仓库（<code>XXX.github.io</code> 文件夹）中。提交代码，即在代码仓库文件夹中，右键 Git Bash Here，依次执行以下命令：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . // 添加修改</span><br><span class=\"line\">git commit -m <span class=\"string\">\"备注\"</span> // 提交</span><br><span class=\"line\">git push origin master // 上传到GitHub代码库</span><br></pre></td></tr></table></figure>\n<p>然后输入账号密码，等待上传完成后，过几分钟就可以看到网站效果。</p>\n<p>注意：如果你是首次使用 Git ，它会提示你设置一些配置，只需按提示输入配置命令即可。</p>\n<h3 id=\"以下是附加的，有兴趣可以尝试。\"><a href=\"#以下是附加的，有兴趣可以尝试。\" class=\"headerlink\" title=\"以下是附加的，有兴趣可以尝试。\"></a>以下是附加的，有兴趣可以尝试。</h3><h2 id=\"五-更换主题\"><a href=\"#五-更换主题\" class=\"headerlink\" title=\"五.更换主题\"></a>五.更换主题</h2><p>以上步骤完成后，你就有一个博客了，但是还是默认的主题 landscape。可以在这两个地方找自己喜欢的主题：<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>、<a href=\"http://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">有哪些好看的 Hexo 主题？</a>，也可以直接上网搜 hexo 主题。</p>\n<p>以此博客的主题 <a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">Maupassant</a> 为例：</p>\n<ul>\n<li>1.克隆主题到 <code>themes</code> 文件夹中：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.按照文档要求，安装插件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-pug --save</span><br><span class=\"line\">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>3.修改博客 hexo 目录下的 <code>_config.yml</code> 文件：将 theme 项的 landscape 改为 maupassant。这里提示下，<code>_config.yml</code> 中还有博客的其他配置，可以按需更改。</p>\n</li>\n<li><p>4.配置主题。主题文件夹中也有一个 <code>_config.yml</code> 文件，这个是主题里相关的配置，一般主题都会有配置文档可以参考。</p>\n</li>\n</ul>\n<p>当前博客的配置参考: <a href=\"/download/blog_onfig.rar\">下载</a></p>\n<h2 id=\"六-RSS订阅\"><a href=\"#六-RSS订阅\" class=\"headerlink\" title=\"六.RSS订阅\"></a>六.RSS订阅</h2><p>RSS就是提供接口出来，让别人可以订阅你的博客。hexo 有对应相关的<a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">插件</a>。输入以下命令安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>在博客的配置文件 <code>_config.yml</code> 里添加如下配置，：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br><span class=\"line\">  content_limit: 140</span><br><span class=\"line\">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure>\n<p>编译之后，<code>public</code> 根目录下会生成 <code>atom.xml</code> 文件，这就说明成功了。另外，一般主题都会默认配置好 RSS 文件的路径，如果没有，则在主题的配置文件里填上即可。</p>\n<h2 id=\"七-404网页\"><a href=\"#七-404网页\" class=\"headerlink\" title=\"七.404网页\"></a>七.404网页</h2><p>你还可以给自己自定义一个 404 网页，一旦访问你的网站的某个页面不存在时，就会跳到 404 网页。网上也有很多模板可以用，如：<a href=\"http://www.qq.com/404/\" target=\"_blank\" rel=\"noopener\">腾讯的寻子公益404页面</a>。</p>\n<p>在 source 下新建一个 404.html 或 404.md 文件，把以下代码复制进去：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;\n</code></pre><p>两个参数”homePageUrl”、”homePageName”可以按需修改。</p>\n"},{"title":"erlang-基本语法_1、io:format输出、基本数据类型","date":"2018-06-11T05:27:25.000Z","description":null,"_content":"<!-- TOC -->\n\n- [写在前面](#写在前面)\n- [介绍](#介绍)\n    - [.为什么要用到erlang？](#为什么要用到erlang)\n    - [.什么时候要用到erlang？](#什么时候要用到erlang)\n    - [.erlang可以用来干什么？](#erlang可以用来干什么)\n- [安装（网上有教程这里先不说明）](#安装网上有教程这里先不说明)\n- [基本语法](#基本语法)\n    - [注释](#注释)\n    - [入门语法示例:](#入门语法示例)\n- [.基本数据类型](#基本数据类型)\n    - [.1、Numbers数字运算法则](#1numbers数字运算法则)\n    - [.2、Boolean布尔数据类型（与或非）](#2boolean布尔数据类型与或非)\n    - [.3、比较](#3比较)\n- [写在后面](#写在后面)\n\n<!-- /TOC -->\n## 写在前面\n本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。\n\n## 介绍\n![自已梳理erlang学习脑图](https://upload-images.jianshu.io/upload_images/6841945-2243e6e21b9b06d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### .为什么要用到erlang？\n高并发（）\n高容错（）\n软实时（修改一个erl文件时，不需要全部文件重新编译，只需要编译修改的那个文件即可）\n\n### .什么时候要用到erlang？\n高并发请求的服务可以用到。\n\n### .erlang可以用来干什么？\n可以搭建成一个web的服务器。\n\n## 安装（网上有教程这里先不说明）\n\n## 基本语法\n### 注释\n（用％来注释）\n### 入门语法示例:\n```\n➜ ~ erl Erlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace] Eshell V9.3 (abort with ^G)\n 1> io:format(\"hello world!~n\").\n hello world! \nok \n2> 1 + 1.\n2 \n3> q(). \nok \n➜ ~\n```\n第一个是io:format(\"hello world!~n\").表示输出一串hello world的字符串，\n其中的~n表示的是换行处理，\n输出的ok，是函数的返回值。\n\n第二个是一个加法的运算;\n\n第三个是退出当前erlang的shell命令窗口;也可以在erlang shell（erlang交互命令行） 中执行halt().来退出命令窗口。\n\n```\n9> halt().\n➜  erlang \n```\n\n## .基本数据类型\n### .1、Numbers数字运算法则\n```\n1> 2 + 15. ％加法\n17 \n2> 49 * 100. ％乘法\n4900 \n3> 1892 - 1472. ％减法\n420 \n4> 5 / 2. %% 最常用的浮点数除法 \n2.5 \n5> 5 div 2. %% div 是整除 \n2 \n6> 5 rem 2. %% rem 是取余运算 \n1\n %% 数字前面可以用 ‘#’ 来标注其 ‘Base’\n %% 语法：Base#Value %% 默认的 Base 10 … \n％％从其他进制转为十进制\n10> 2#101010. %% 2 进制的 101010 \n42 \n11> 8#0677. %% 8 进制的 0677 \n447 \n12> 16#AE. %% 16 进制的 AE \n174\n```\n### .2、Boolean布尔数据类型（与或非）\n\natom 类型的 true 和 false 两个值，被用作布尔处理。\n```\n1> true and false. %% 逻辑 并 \nfalse \n2> false or true. %% 逻辑 或 \ntrue \n3> true xor false. %% 逻辑 异或 \ntrue \n4> not false. %% 逻辑 非 \ntrue \n5> not (true and true). \nfalse \n```\n还有两个与 and 和 or 类似的操作：andalso和 orelse。区别是 and 和 or 不论左边的运算结果是真还是假，都会执行右边的操作。而 andalso 和 orelse是短路的，意味着右边的运算不一定会执行。\n\n来看一下比较：\n### .3、比较\n```\n6> 5 =:= 5. %% =:= 是\"严格相等\"运算符，== \"是大概相等\" \ntrue \n7> 1 =:= 0. \nfalse \n8> 1 =/= 0. %% =/= 是\"严格不等\"运算符，/= \"是相差很多\" \ntrue \n9> 5 =:= 5.0. \nfalse \n10> 5 == 5.0. \ntrue \n11> 5 /= 5.0. \nfalse \n```\n一般如果懒得纠结太多，用 =:= 和 =/= 就可以了。\n\n```\n12> 1 < 2. \ntrue \n13> 1 < 1. \nfalse \n14> 1 >= 1. %% 大于等于 \ntrue \n15> 1 =< 1. %% 注意这个 \"小于等于\" 的写法，= 在前面。因为 => 还有其他的用处。。 \ntrue \n17> 0 == false. %% 数字和 atom 类型是不相等的 \nfalse \n18> 1 < false. \ntrue \n```\n\n虽然不同的类型之间可以比较，也有个对应的顺序，但一般情况用不到的:\nnumber < atom < reference < fun < port < pid < tuple < list < bit string\n\n\n## 写在后面\n引用网络博客内容：\nhttps://www.jianshu.com/p/b45eb9314d1e        （30 分钟学 Erlang (一)）\nhttps://www.w3cschool.cn/erlang/tohb1p5z.html      （w3cschool erlang教程）\n\n\n","source":"_posts/erlang_base1.md","raw":"\n---\ntitle: erlang-基本语法_1、io:format输出、基本数据类型\ndate:  2018-06-11 13:27:25\ntags: [erlang]\ncategories: 张永枫\ndescription:\n---\n<!-- TOC -->\n\n- [写在前面](#写在前面)\n- [介绍](#介绍)\n    - [.为什么要用到erlang？](#为什么要用到erlang)\n    - [.什么时候要用到erlang？](#什么时候要用到erlang)\n    - [.erlang可以用来干什么？](#erlang可以用来干什么)\n- [安装（网上有教程这里先不说明）](#安装网上有教程这里先不说明)\n- [基本语法](#基本语法)\n    - [注释](#注释)\n    - [入门语法示例:](#入门语法示例)\n- [.基本数据类型](#基本数据类型)\n    - [.1、Numbers数字运算法则](#1numbers数字运算法则)\n    - [.2、Boolean布尔数据类型（与或非）](#2boolean布尔数据类型与或非)\n    - [.3、比较](#3比较)\n- [写在后面](#写在后面)\n\n<!-- /TOC -->\n## 写在前面\n本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。\n\n## 介绍\n![自已梳理erlang学习脑图](https://upload-images.jianshu.io/upload_images/6841945-2243e6e21b9b06d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### .为什么要用到erlang？\n高并发（）\n高容错（）\n软实时（修改一个erl文件时，不需要全部文件重新编译，只需要编译修改的那个文件即可）\n\n### .什么时候要用到erlang？\n高并发请求的服务可以用到。\n\n### .erlang可以用来干什么？\n可以搭建成一个web的服务器。\n\n## 安装（网上有教程这里先不说明）\n\n## 基本语法\n### 注释\n（用％来注释）\n### 入门语法示例:\n```\n➜ ~ erl Erlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace] Eshell V9.3 (abort with ^G)\n 1> io:format(\"hello world!~n\").\n hello world! \nok \n2> 1 + 1.\n2 \n3> q(). \nok \n➜ ~\n```\n第一个是io:format(\"hello world!~n\").表示输出一串hello world的字符串，\n其中的~n表示的是换行处理，\n输出的ok，是函数的返回值。\n\n第二个是一个加法的运算;\n\n第三个是退出当前erlang的shell命令窗口;也可以在erlang shell（erlang交互命令行） 中执行halt().来退出命令窗口。\n\n```\n9> halt().\n➜  erlang \n```\n\n## .基本数据类型\n### .1、Numbers数字运算法则\n```\n1> 2 + 15. ％加法\n17 \n2> 49 * 100. ％乘法\n4900 \n3> 1892 - 1472. ％减法\n420 \n4> 5 / 2. %% 最常用的浮点数除法 \n2.5 \n5> 5 div 2. %% div 是整除 \n2 \n6> 5 rem 2. %% rem 是取余运算 \n1\n %% 数字前面可以用 ‘#’ 来标注其 ‘Base’\n %% 语法：Base#Value %% 默认的 Base 10 … \n％％从其他进制转为十进制\n10> 2#101010. %% 2 进制的 101010 \n42 \n11> 8#0677. %% 8 进制的 0677 \n447 \n12> 16#AE. %% 16 进制的 AE \n174\n```\n### .2、Boolean布尔数据类型（与或非）\n\natom 类型的 true 和 false 两个值，被用作布尔处理。\n```\n1> true and false. %% 逻辑 并 \nfalse \n2> false or true. %% 逻辑 或 \ntrue \n3> true xor false. %% 逻辑 异或 \ntrue \n4> not false. %% 逻辑 非 \ntrue \n5> not (true and true). \nfalse \n```\n还有两个与 and 和 or 类似的操作：andalso和 orelse。区别是 and 和 or 不论左边的运算结果是真还是假，都会执行右边的操作。而 andalso 和 orelse是短路的，意味着右边的运算不一定会执行。\n\n来看一下比较：\n### .3、比较\n```\n6> 5 =:= 5. %% =:= 是\"严格相等\"运算符，== \"是大概相等\" \ntrue \n7> 1 =:= 0. \nfalse \n8> 1 =/= 0. %% =/= 是\"严格不等\"运算符，/= \"是相差很多\" \ntrue \n9> 5 =:= 5.0. \nfalse \n10> 5 == 5.0. \ntrue \n11> 5 /= 5.0. \nfalse \n```\n一般如果懒得纠结太多，用 =:= 和 =/= 就可以了。\n\n```\n12> 1 < 2. \ntrue \n13> 1 < 1. \nfalse \n14> 1 >= 1. %% 大于等于 \ntrue \n15> 1 =< 1. %% 注意这个 \"小于等于\" 的写法，= 在前面。因为 => 还有其他的用处。。 \ntrue \n17> 0 == false. %% 数字和 atom 类型是不相等的 \nfalse \n18> 1 < false. \ntrue \n```\n\n虽然不同的类型之间可以比较，也有个对应的顺序，但一般情况用不到的:\nnumber < atom < reference < fun < port < pid < tuple < list < bit string\n\n\n## 写在后面\n引用网络博客内容：\nhttps://www.jianshu.com/p/b45eb9314d1e        （30 分钟学 Erlang (一)）\nhttps://www.w3cschool.cn/erlang/tohb1p5z.html      （w3cschool erlang教程）\n\n\n","slug":"erlang_base1","published":1,"updated":"2019-05-07T02:19:37.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowlq0007p7sa1knuk7t9","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#写在前面\">写在前面</a></li>\n<li><a href=\"#介绍\">介绍</a><ul>\n<li><a href=\"#为什么要用到erlang\">.为什么要用到erlang？</a></li>\n<li><a href=\"#什么时候要用到erlang\">.什么时候要用到erlang？</a></li>\n<li><a href=\"#erlang可以用来干什么\">.erlang可以用来干什么？</a></li>\n</ul>\n</li>\n<li><a href=\"#安装网上有教程这里先不说明\">安装（网上有教程这里先不说明）</a></li>\n<li><a href=\"#基本语法\">基本语法</a><ul>\n<li><a href=\"#注释\">注释</a></li>\n<li><a href=\"#入门语法示例\">入门语法示例:</a></li>\n</ul>\n</li>\n<li><a href=\"#基本数据类型\">.基本数据类型</a><ul>\n<li><a href=\"#1numbers数字运算法则\">.1、Numbers数字运算法则</a></li>\n<li><a href=\"#2boolean布尔数据类型与或非\">.2、Boolean布尔数据类型（与或非）</a></li>\n<li><a href=\"#3比较\">.3、比较</a></li>\n</ul>\n</li>\n<li><a href=\"#写在后面\">写在后面</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/6841945-2243e6e21b9b06d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自已梳理erlang学习脑图\"></p>\n<h3 id=\"为什么要用到erlang？\"><a href=\"#为什么要用到erlang？\" class=\"headerlink\" title=\".为什么要用到erlang？\"></a>.为什么要用到erlang？</h3><p>高并发（）<br>高容错（）<br>软实时（修改一个erl文件时，不需要全部文件重新编译，只需要编译修改的那个文件即可）</p>\n<h3 id=\"什么时候要用到erlang？\"><a href=\"#什么时候要用到erlang？\" class=\"headerlink\" title=\".什么时候要用到erlang？\"></a>.什么时候要用到erlang？</h3><p>高并发请求的服务可以用到。</p>\n<h3 id=\"erlang可以用来干什么？\"><a href=\"#erlang可以用来干什么？\" class=\"headerlink\" title=\".erlang可以用来干什么？\"></a>.erlang可以用来干什么？</h3><p>可以搭建成一个web的服务器。</p>\n<h2 id=\"安装（网上有教程这里先不说明）\"><a href=\"#安装（网上有教程这里先不说明）\" class=\"headerlink\" title=\"安装（网上有教程这里先不说明）\"></a>安装（网上有教程这里先不说明）</h2><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>（用％来注释）</p>\n<h3 id=\"入门语法示例\"><a href=\"#入门语法示例\" class=\"headerlink\" title=\"入门语法示例:\"></a>入门语法示例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ ~ erl Erlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace] Eshell V9.3 (abort with ^G)</span><br><span class=\"line\"> 1&gt; io:format(&quot;hello world!~n&quot;).</span><br><span class=\"line\"> hello world! </span><br><span class=\"line\">ok </span><br><span class=\"line\">2&gt; 1 + 1.</span><br><span class=\"line\">2 </span><br><span class=\"line\">3&gt; q(). </span><br><span class=\"line\">ok </span><br><span class=\"line\">➜ ~</span><br></pre></td></tr></table></figure>\n<p>第一个是io:format(“hello world!~n”).表示输出一串hello world的字符串，<br>其中的~n表示的是换行处理，<br>输出的ok，是函数的返回值。</p>\n<p>第二个是一个加法的运算;</p>\n<p>第三个是退出当前erlang的shell命令窗口;也可以在erlang shell（erlang交互命令行） 中执行halt().来退出命令窗口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9&gt; halt().</span><br><span class=\"line\">➜  erlang</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\".基本数据类型\"></a>.基本数据类型</h2><h3 id=\"1、Numbers数字运算法则\"><a href=\"#1、Numbers数字运算法则\" class=\"headerlink\" title=\".1、Numbers数字运算法则\"></a>.1、Numbers数字运算法则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt; 2 + 15. ％加法</span><br><span class=\"line\">17 </span><br><span class=\"line\">2&gt; 49 * 100. ％乘法</span><br><span class=\"line\">4900 </span><br><span class=\"line\">3&gt; 1892 - 1472. ％减法</span><br><span class=\"line\">420 </span><br><span class=\"line\">4&gt; 5 / 2. %% 最常用的浮点数除法 </span><br><span class=\"line\">2.5 </span><br><span class=\"line\">5&gt; 5 div 2. %% div 是整除 </span><br><span class=\"line\">2 </span><br><span class=\"line\">6&gt; 5 rem 2. %% rem 是取余运算 </span><br><span class=\"line\">1</span><br><span class=\"line\"> %% 数字前面可以用 ‘#’ 来标注其 ‘Base’</span><br><span class=\"line\"> %% 语法：Base#Value %% 默认的 Base 10 … </span><br><span class=\"line\">％％从其他进制转为十进制</span><br><span class=\"line\">10&gt; 2#101010. %% 2 进制的 101010 </span><br><span class=\"line\">42 </span><br><span class=\"line\">11&gt; 8#0677. %% 8 进制的 0677 </span><br><span class=\"line\">447 </span><br><span class=\"line\">12&gt; 16#AE. %% 16 进制的 AE </span><br><span class=\"line\">174</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、Boolean布尔数据类型（与或非）\"><a href=\"#2、Boolean布尔数据类型（与或非）\" class=\"headerlink\" title=\".2、Boolean布尔数据类型（与或非）\"></a>.2、Boolean布尔数据类型（与或非）</h3><p>atom 类型的 true 和 false 两个值，被用作布尔处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt; true and false. %% 逻辑 并 </span><br><span class=\"line\">false </span><br><span class=\"line\">2&gt; false or true. %% 逻辑 或 </span><br><span class=\"line\">true </span><br><span class=\"line\">3&gt; true xor false. %% 逻辑 异或 </span><br><span class=\"line\">true </span><br><span class=\"line\">4&gt; not false. %% 逻辑 非 </span><br><span class=\"line\">true </span><br><span class=\"line\">5&gt; not (true and true). </span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure></p>\n<p>还有两个与 and 和 or 类似的操作：andalso和 orelse。区别是 and 和 or 不论左边的运算结果是真还是假，都会执行右边的操作。而 andalso 和 orelse是短路的，意味着右边的运算不一定会执行。</p>\n<p>来看一下比较：</p>\n<h3 id=\"3、比较\"><a href=\"#3、比较\" class=\"headerlink\" title=\".3、比较\"></a>.3、比较</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6&gt; 5 =:= 5. %% =:= 是&quot;严格相等&quot;运算符，== &quot;是大概相等&quot; </span><br><span class=\"line\">true </span><br><span class=\"line\">7&gt; 1 =:= 0. </span><br><span class=\"line\">false </span><br><span class=\"line\">8&gt; 1 =/= 0. %% =/= 是&quot;严格不等&quot;运算符，/= &quot;是相差很多&quot; </span><br><span class=\"line\">true </span><br><span class=\"line\">9&gt; 5 =:= 5.0. </span><br><span class=\"line\">false </span><br><span class=\"line\">10&gt; 5 == 5.0. </span><br><span class=\"line\">true </span><br><span class=\"line\">11&gt; 5 /= 5.0. </span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>一般如果懒得纠结太多，用 =:= 和 =/= 就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12&gt; 1 &lt; 2. </span><br><span class=\"line\">true </span><br><span class=\"line\">13&gt; 1 &lt; 1. </span><br><span class=\"line\">false </span><br><span class=\"line\">14&gt; 1 &gt;= 1. %% 大于等于 </span><br><span class=\"line\">true </span><br><span class=\"line\">15&gt; 1 =&lt; 1. %% 注意这个 &quot;小于等于&quot; 的写法，= 在前面。因为 =&gt; 还有其他的用处。。 </span><br><span class=\"line\">true </span><br><span class=\"line\">17&gt; 0 == false. %% 数字和 atom 类型是不相等的 </span><br><span class=\"line\">false </span><br><span class=\"line\">18&gt; 1 &lt; false. </span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>虽然不同的类型之间可以比较，也有个对应的顺序，但一般情况用不到的:<br>number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; list &lt; bit string</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>引用网络博客内容：<br><a href=\"https://www.jianshu.com/p/b45eb9314d1e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b45eb9314d1e</a>        （30 分钟学 Erlang (一)）<br><a href=\"https://www.w3cschool.cn/erlang/tohb1p5z.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/erlang/tohb1p5z.html</a>      （w3cschool erlang教程）</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#写在前面\">写在前面</a></li>\n<li><a href=\"#介绍\">介绍</a><ul>\n<li><a href=\"#为什么要用到erlang\">.为什么要用到erlang？</a></li>\n<li><a href=\"#什么时候要用到erlang\">.什么时候要用到erlang？</a></li>\n<li><a href=\"#erlang可以用来干什么\">.erlang可以用来干什么？</a></li>\n</ul>\n</li>\n<li><a href=\"#安装网上有教程这里先不说明\">安装（网上有教程这里先不说明）</a></li>\n<li><a href=\"#基本语法\">基本语法</a><ul>\n<li><a href=\"#注释\">注释</a></li>\n<li><a href=\"#入门语法示例\">入门语法示例:</a></li>\n</ul>\n</li>\n<li><a href=\"#基本数据类型\">.基本数据类型</a><ul>\n<li><a href=\"#1numbers数字运算法则\">.1、Numbers数字运算法则</a></li>\n<li><a href=\"#2boolean布尔数据类型与或非\">.2、Boolean布尔数据类型（与或非）</a></li>\n<li><a href=\"#3比较\">.3、比较</a></li>\n</ul>\n</li>\n<li><a href=\"#写在后面\">写在后面</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/6841945-2243e6e21b9b06d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自已梳理erlang学习脑图\"></p>\n<h3 id=\"为什么要用到erlang？\"><a href=\"#为什么要用到erlang？\" class=\"headerlink\" title=\".为什么要用到erlang？\"></a>.为什么要用到erlang？</h3><p>高并发（）<br>高容错（）<br>软实时（修改一个erl文件时，不需要全部文件重新编译，只需要编译修改的那个文件即可）</p>\n<h3 id=\"什么时候要用到erlang？\"><a href=\"#什么时候要用到erlang？\" class=\"headerlink\" title=\".什么时候要用到erlang？\"></a>.什么时候要用到erlang？</h3><p>高并发请求的服务可以用到。</p>\n<h3 id=\"erlang可以用来干什么？\"><a href=\"#erlang可以用来干什么？\" class=\"headerlink\" title=\".erlang可以用来干什么？\"></a>.erlang可以用来干什么？</h3><p>可以搭建成一个web的服务器。</p>\n<h2 id=\"安装（网上有教程这里先不说明）\"><a href=\"#安装（网上有教程这里先不说明）\" class=\"headerlink\" title=\"安装（网上有教程这里先不说明）\"></a>安装（网上有教程这里先不说明）</h2><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>（用％来注释）</p>\n<h3 id=\"入门语法示例\"><a href=\"#入门语法示例\" class=\"headerlink\" title=\"入门语法示例:\"></a>入门语法示例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ ~ erl Erlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace] Eshell V9.3 (abort with ^G)</span><br><span class=\"line\"> 1&gt; io:format(&quot;hello world!~n&quot;).</span><br><span class=\"line\"> hello world! </span><br><span class=\"line\">ok </span><br><span class=\"line\">2&gt; 1 + 1.</span><br><span class=\"line\">2 </span><br><span class=\"line\">3&gt; q(). </span><br><span class=\"line\">ok </span><br><span class=\"line\">➜ ~</span><br></pre></td></tr></table></figure>\n<p>第一个是io:format(“hello world!~n”).表示输出一串hello world的字符串，<br>其中的~n表示的是换行处理，<br>输出的ok，是函数的返回值。</p>\n<p>第二个是一个加法的运算;</p>\n<p>第三个是退出当前erlang的shell命令窗口;也可以在erlang shell（erlang交互命令行） 中执行halt().来退出命令窗口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9&gt; halt().</span><br><span class=\"line\">➜  erlang</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\".基本数据类型\"></a>.基本数据类型</h2><h3 id=\"1、Numbers数字运算法则\"><a href=\"#1、Numbers数字运算法则\" class=\"headerlink\" title=\".1、Numbers数字运算法则\"></a>.1、Numbers数字运算法则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt; 2 + 15. ％加法</span><br><span class=\"line\">17 </span><br><span class=\"line\">2&gt; 49 * 100. ％乘法</span><br><span class=\"line\">4900 </span><br><span class=\"line\">3&gt; 1892 - 1472. ％减法</span><br><span class=\"line\">420 </span><br><span class=\"line\">4&gt; 5 / 2. %% 最常用的浮点数除法 </span><br><span class=\"line\">2.5 </span><br><span class=\"line\">5&gt; 5 div 2. %% div 是整除 </span><br><span class=\"line\">2 </span><br><span class=\"line\">6&gt; 5 rem 2. %% rem 是取余运算 </span><br><span class=\"line\">1</span><br><span class=\"line\"> %% 数字前面可以用 ‘#’ 来标注其 ‘Base’</span><br><span class=\"line\"> %% 语法：Base#Value %% 默认的 Base 10 … </span><br><span class=\"line\">％％从其他进制转为十进制</span><br><span class=\"line\">10&gt; 2#101010. %% 2 进制的 101010 </span><br><span class=\"line\">42 </span><br><span class=\"line\">11&gt; 8#0677. %% 8 进制的 0677 </span><br><span class=\"line\">447 </span><br><span class=\"line\">12&gt; 16#AE. %% 16 进制的 AE </span><br><span class=\"line\">174</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、Boolean布尔数据类型（与或非）\"><a href=\"#2、Boolean布尔数据类型（与或非）\" class=\"headerlink\" title=\".2、Boolean布尔数据类型（与或非）\"></a>.2、Boolean布尔数据类型（与或非）</h3><p>atom 类型的 true 和 false 两个值，被用作布尔处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt; true and false. %% 逻辑 并 </span><br><span class=\"line\">false </span><br><span class=\"line\">2&gt; false or true. %% 逻辑 或 </span><br><span class=\"line\">true </span><br><span class=\"line\">3&gt; true xor false. %% 逻辑 异或 </span><br><span class=\"line\">true </span><br><span class=\"line\">4&gt; not false. %% 逻辑 非 </span><br><span class=\"line\">true </span><br><span class=\"line\">5&gt; not (true and true). </span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure></p>\n<p>还有两个与 and 和 or 类似的操作：andalso和 orelse。区别是 and 和 or 不论左边的运算结果是真还是假，都会执行右边的操作。而 andalso 和 orelse是短路的，意味着右边的运算不一定会执行。</p>\n<p>来看一下比较：</p>\n<h3 id=\"3、比较\"><a href=\"#3、比较\" class=\"headerlink\" title=\".3、比较\"></a>.3、比较</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6&gt; 5 =:= 5. %% =:= 是&quot;严格相等&quot;运算符，== &quot;是大概相等&quot; </span><br><span class=\"line\">true </span><br><span class=\"line\">7&gt; 1 =:= 0. </span><br><span class=\"line\">false </span><br><span class=\"line\">8&gt; 1 =/= 0. %% =/= 是&quot;严格不等&quot;运算符，/= &quot;是相差很多&quot; </span><br><span class=\"line\">true </span><br><span class=\"line\">9&gt; 5 =:= 5.0. </span><br><span class=\"line\">false </span><br><span class=\"line\">10&gt; 5 == 5.0. </span><br><span class=\"line\">true </span><br><span class=\"line\">11&gt; 5 /= 5.0. </span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<p>一般如果懒得纠结太多，用 =:= 和 =/= 就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12&gt; 1 &lt; 2. </span><br><span class=\"line\">true </span><br><span class=\"line\">13&gt; 1 &lt; 1. </span><br><span class=\"line\">false </span><br><span class=\"line\">14&gt; 1 &gt;= 1. %% 大于等于 </span><br><span class=\"line\">true </span><br><span class=\"line\">15&gt; 1 =&lt; 1. %% 注意这个 &quot;小于等于&quot; 的写法，= 在前面。因为 =&gt; 还有其他的用处。。 </span><br><span class=\"line\">true </span><br><span class=\"line\">17&gt; 0 == false. %% 数字和 atom 类型是不相等的 </span><br><span class=\"line\">false </span><br><span class=\"line\">18&gt; 1 &lt; false. </span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>虽然不同的类型之间可以比较，也有个对应的顺序，但一般情况用不到的:<br>number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; list &lt; bit string</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>引用网络博客内容：<br><a href=\"https://www.jianshu.com/p/b45eb9314d1e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b45eb9314d1e</a>        （30 分钟学 Erlang (一)）<br><a href=\"https://www.w3cschool.cn/erlang/tohb1p5z.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/erlang/tohb1p5z.html</a>      （w3cschool erlang教程）</p>\n"},{"title":"erlang-基本语法_2、模块和函数、内置函数、在erlang shell中运行文件","date":"2018-06-12T06:27:25.000Z","description":null,"_content":"<!-- TOC -->\n\n- [写在前面](#写在前面)\n- [模块和函数](#模块和函数)\n- [内建函数 BIF](#内建函数-bif)\n- [erlang shell中运行文件中的方法](#erlang-shell中运行文件中的方法)\n- [写在后面](#写在后面)\n\n<!-- /TOC -->\n\n## 写在前面\n本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。\n\n![本人的erlang学习脑图](https://upload-images.jianshu.io/upload_images/6841945-a92401e828dbb1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 模块和函数\n1、Erlang 里代码是用 Module 组织的。一个 Module 包含了一组功能相近的函数。用一个函数的时候，要这么调用：Module:Function(arg1, arg2)。\n或者你先 import 某个 Module 里的函数，然后用省略Module名的方式调用：Function(arg1, arg2)。\n2、Module 可也提供代码管理的作用，加载一个 Module 到 Erlang VM就加载了那个 Module 里的所有代码，然后你想热更新代码的话，直接更新这个 Module 就行了。\n**示例1：** 实现将数值翻倍\n以一个目录下面新建一个文件名为tut.erl,输入以下代码\n\n```\n-module(tut).\n-export([double/1]).\n\ndouble(X)->\nX *2.\n```\n\n在命令窗口输入以下代码\n\n```\n➜  erlang pwd\n/Users/Macx/Public/erlang\n➜  erlang c(tut). %要在不是erlang shell下才能去执行c(tut).编译文件会报错\nzsh: no matches found: c(tut).\n➜  erlang erl  %要在erlang shell下才能去执行c(tut).编译文件\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> c(tut).\n{ok,tut}\n2> tut:double(3).\n%编译完成之后，可以用module:function 来调用方法\n6\n3> \n```\n**示例2：**计算一个数的阶乘，如：4的阶乘为 4 * 3 * 2 * 2 = 24\n新建一个tut1.erl文件，代码如下：\n\n```\n-module(tut1).\n-export([fac/1]).\n\n\nfac(1) ->\n1;\n%以分号结束的，这也就表示后面还有 fac 函数的更多内容\n\nfac(N) ->\nN * fac(N -1).\n%N 的阶乘为 N 乘以 N-1 的阶乘\n```\n在命令行中输入如下；\n\n```\n➜  erlang erl\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> c(tut1).\n{ok,tut1}\n2> \n2> \n2> tut1:fac(4).****\n24\n```\n\n**对tut1.erl进行扩展**\n（Erlang 函数也可以有多个参数，实现一个函数完成两个数相乘）\n修改tut1.erl如下：\n\n```\n-module(tut1).\n-export([fac/1,mult/2]).\n\n\nfac(1) ->\n1;\n\nfac(N) ->\nN * fac(N -1).\n\n\nmult(X,Y) ->\nX * Y.\n```\n在命令窗口输入如下：\n\n```\n➜  erlang erl\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> c(tut1).\n{ok,tut1}\n2> tut1:m\nmodule_info/0  module_info/1  mult/2         \n2> tut1:mult(2,3).\n6\n3> \n```\n\n## 内建函数 BIF\nerlang module 里的函数叫做 BIF.（内建函数）\n\n示例：erlang 自带的Module（BIP）\n\n```\n45> erlang:element(2,{a,b,c}).\nb\n46> element(2,{a,b,c}).\nb\n\n48> lists:seq(1,4).\n[1,2,3,4]\n49> seq(1,4).\n** exception error: undefined shell command seq/2\n50> %上面的例子里，你能直接用 erlang Module 里的 element/2 函数，是因为 erlang 里的常用函数会被 潜在的 import 过来。其他的 Module 比如 lists 不会.\n```\n\n内置函数示例：\n\n```\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> trunc(5.6).\n%就近取整\n5\n2> round(5.6).\n%四舍五入\n6\n3> length([1,2,3,4]).\n%列表长度\n4\n4> float(5).\n%浮点数\n5.0\n5> is_atom(hello).\n%是否为原子\ntrue\n6> is_atom(\"hello\").\nfalse\n7> is_tuple({pairs,{c,30}}).\n%是否为元组\ntrue\n8> is_tuple([pairs,{c,30}]).\nfalse\n9> \n10> atom_to_list(hello).\n%原子转为字符串\n\"hello\"\n11> list_to_atom(\"goodbay\").\n%字符串转为原子\ngoodbay\n12> integer_to_list(22).\n%整型转为列表\n\"22\"\n```\n\n\n## erlang shell中运行文件中的方法\n1、Erlang Shell 是一个快速尝试新想法的地方，但我们真正的代码是要写到文件里，然后参与编译的。\n\n在一个目录（我这边为/Users/Macx/Public/erlang这个目录）下面新建一个text.erl的文件\n在文件的第一行, 用 -module(text) 来声明你的 module name。注意跟 java 类似，module 名要跟文件名一样。\n然后你在你的 module 里写你的函数,text.erl代码如下：\n\n```\n-module(text).\n-export([add/2,add/3]).\n%% export 是导出语法，指定导出 add/2, add/3 函数。没导出的函数在 Module 外是无法访问的。\n\nadd(A,B) ->\nA + B.\n\nadd(A,B,C) ->\nA + B + C.\n```\n在 shell中的操作如下:\n\n```\n➜  erlang pwd \n%查看当前的目录路径；\n/Users/Macx/Public/erlang\n➜  erlang ll    \n%查看当前的目录路径下的文件；\n-rw-r--r--@ 1 Macx  staff     0B  6 12 10:39 text.erl\n➜  erlang mkdir -p ./ebin  \n%在当前路径下建一个ebin的文件目录\n➜  erlang erlc -o ebin text.erl \n%用erlc编译文件，并把文件放到ebin下面\n➜  erlang ll ebin  %查看ebin 下面是否有文件\ntotal 8\n-rw-r--r--  1 Macx  staff   580B  6 12 10:42 text.beam\n➜  erlang erl -pa ./ebin \n%erl -pa 参数的意思是 Path Add, 添加目录到 erlang 的 beam 文件查找目录列表里。\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> pwd\n1> .\npwd\n2> text(1,4).\n%%直接调用方法会报错找不到方法\n** exception error: undefined shell command text/2\n3> text:add(1,4).\n%添加模块名加方法名后可以正常调到方法\n5\n4> text:add(1,4,8).\n13\n5> \n\n```\n\n## 写在后面\n引用网络博客内容：\nhttps://www.jianshu.com/p/b45eb9314d1e        （30 分钟学 Erlang (一)）\nhttps://www.w3cschool.cn/erlang/tohb1p5z.html      （w3cschool erlang教程）\n\n个人博客地址：https://zhangyongfeng1.github.io/\n简书地址：https://www.jianshu.com/u/137f325832fb\n\n","source":"_posts/erlang_base2.md","raw":"\n---\ntitle: erlang-基本语法_2、模块和函数、内置函数、在erlang shell中运行文件\ndate:  2018-06-12 14:27:25\ntags: [erlang]\ncategories: 张永枫\ndescription:\n---\n<!-- TOC -->\n\n- [写在前面](#写在前面)\n- [模块和函数](#模块和函数)\n- [内建函数 BIF](#内建函数-bif)\n- [erlang shell中运行文件中的方法](#erlang-shell中运行文件中的方法)\n- [写在后面](#写在后面)\n\n<!-- /TOC -->\n\n## 写在前面\n本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。\n\n![本人的erlang学习脑图](https://upload-images.jianshu.io/upload_images/6841945-a92401e828dbb1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 模块和函数\n1、Erlang 里代码是用 Module 组织的。一个 Module 包含了一组功能相近的函数。用一个函数的时候，要这么调用：Module:Function(arg1, arg2)。\n或者你先 import 某个 Module 里的函数，然后用省略Module名的方式调用：Function(arg1, arg2)。\n2、Module 可也提供代码管理的作用，加载一个 Module 到 Erlang VM就加载了那个 Module 里的所有代码，然后你想热更新代码的话，直接更新这个 Module 就行了。\n**示例1：** 实现将数值翻倍\n以一个目录下面新建一个文件名为tut.erl,输入以下代码\n\n```\n-module(tut).\n-export([double/1]).\n\ndouble(X)->\nX *2.\n```\n\n在命令窗口输入以下代码\n\n```\n➜  erlang pwd\n/Users/Macx/Public/erlang\n➜  erlang c(tut). %要在不是erlang shell下才能去执行c(tut).编译文件会报错\nzsh: no matches found: c(tut).\n➜  erlang erl  %要在erlang shell下才能去执行c(tut).编译文件\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> c(tut).\n{ok,tut}\n2> tut:double(3).\n%编译完成之后，可以用module:function 来调用方法\n6\n3> \n```\n**示例2：**计算一个数的阶乘，如：4的阶乘为 4 * 3 * 2 * 2 = 24\n新建一个tut1.erl文件，代码如下：\n\n```\n-module(tut1).\n-export([fac/1]).\n\n\nfac(1) ->\n1;\n%以分号结束的，这也就表示后面还有 fac 函数的更多内容\n\nfac(N) ->\nN * fac(N -1).\n%N 的阶乘为 N 乘以 N-1 的阶乘\n```\n在命令行中输入如下；\n\n```\n➜  erlang erl\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> c(tut1).\n{ok,tut1}\n2> \n2> \n2> tut1:fac(4).****\n24\n```\n\n**对tut1.erl进行扩展**\n（Erlang 函数也可以有多个参数，实现一个函数完成两个数相乘）\n修改tut1.erl如下：\n\n```\n-module(tut1).\n-export([fac/1,mult/2]).\n\n\nfac(1) ->\n1;\n\nfac(N) ->\nN * fac(N -1).\n\n\nmult(X,Y) ->\nX * Y.\n```\n在命令窗口输入如下：\n\n```\n➜  erlang erl\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> c(tut1).\n{ok,tut1}\n2> tut1:m\nmodule_info/0  module_info/1  mult/2         \n2> tut1:mult(2,3).\n6\n3> \n```\n\n## 内建函数 BIF\nerlang module 里的函数叫做 BIF.（内建函数）\n\n示例：erlang 自带的Module（BIP）\n\n```\n45> erlang:element(2,{a,b,c}).\nb\n46> element(2,{a,b,c}).\nb\n\n48> lists:seq(1,4).\n[1,2,3,4]\n49> seq(1,4).\n** exception error: undefined shell command seq/2\n50> %上面的例子里，你能直接用 erlang Module 里的 element/2 函数，是因为 erlang 里的常用函数会被 潜在的 import 过来。其他的 Module 比如 lists 不会.\n```\n\n内置函数示例：\n\n```\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> trunc(5.6).\n%就近取整\n5\n2> round(5.6).\n%四舍五入\n6\n3> length([1,2,3,4]).\n%列表长度\n4\n4> float(5).\n%浮点数\n5.0\n5> is_atom(hello).\n%是否为原子\ntrue\n6> is_atom(\"hello\").\nfalse\n7> is_tuple({pairs,{c,30}}).\n%是否为元组\ntrue\n8> is_tuple([pairs,{c,30}]).\nfalse\n9> \n10> atom_to_list(hello).\n%原子转为字符串\n\"hello\"\n11> list_to_atom(\"goodbay\").\n%字符串转为原子\ngoodbay\n12> integer_to_list(22).\n%整型转为列表\n\"22\"\n```\n\n\n## erlang shell中运行文件中的方法\n1、Erlang Shell 是一个快速尝试新想法的地方，但我们真正的代码是要写到文件里，然后参与编译的。\n\n在一个目录（我这边为/Users/Macx/Public/erlang这个目录）下面新建一个text.erl的文件\n在文件的第一行, 用 -module(text) 来声明你的 module name。注意跟 java 类似，module 名要跟文件名一样。\n然后你在你的 module 里写你的函数,text.erl代码如下：\n\n```\n-module(text).\n-export([add/2,add/3]).\n%% export 是导出语法，指定导出 add/2, add/3 函数。没导出的函数在 Module 外是无法访问的。\n\nadd(A,B) ->\nA + B.\n\nadd(A,B,C) ->\nA + B + C.\n```\n在 shell中的操作如下:\n\n```\n➜  erlang pwd \n%查看当前的目录路径；\n/Users/Macx/Public/erlang\n➜  erlang ll    \n%查看当前的目录路径下的文件；\n-rw-r--r--@ 1 Macx  staff     0B  6 12 10:39 text.erl\n➜  erlang mkdir -p ./ebin  \n%在当前路径下建一个ebin的文件目录\n➜  erlang erlc -o ebin text.erl \n%用erlc编译文件，并把文件放到ebin下面\n➜  erlang ll ebin  %查看ebin 下面是否有文件\ntotal 8\n-rw-r--r--  1 Macx  staff   580B  6 12 10:42 text.beam\n➜  erlang erl -pa ./ebin \n%erl -pa 参数的意思是 Path Add, 添加目录到 erlang 的 beam 文件查找目录列表里。\nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.9.3.1  (abort with ^G)\n1> pwd\n1> .\npwd\n2> text(1,4).\n%%直接调用方法会报错找不到方法\n** exception error: undefined shell command text/2\n3> text:add(1,4).\n%添加模块名加方法名后可以正常调到方法\n5\n4> text:add(1,4,8).\n13\n5> \n\n```\n\n## 写在后面\n引用网络博客内容：\nhttps://www.jianshu.com/p/b45eb9314d1e        （30 分钟学 Erlang (一)）\nhttps://www.w3cschool.cn/erlang/tohb1p5z.html      （w3cschool erlang教程）\n\n个人博客地址：https://zhangyongfeng1.github.io/\n简书地址：https://www.jianshu.com/u/137f325832fb\n\n","slug":"erlang_base2","published":1,"updated":"2019-05-07T02:19:37.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowlr0008p7sawcqgw1eb","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#写在前面\">写在前面</a></li>\n<li><a href=\"#模块和函数\">模块和函数</a></li>\n<li><a href=\"#内建函数-bif\">内建函数 BIF</a></li>\n<li><a href=\"#erlang-shell中运行文件中的方法\">erlang shell中运行文件中的方法</a></li>\n<li><a href=\"#写在后面\">写在后面</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6841945-a92401e828dbb1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"本人的erlang学习脑图\"></p>\n<h2 id=\"模块和函数\"><a href=\"#模块和函数\" class=\"headerlink\" title=\"模块和函数\"></a>模块和函数</h2><p>1、Erlang 里代码是用 Module 组织的。一个 Module 包含了一组功能相近的函数。用一个函数的时候，要这么调用：Module:Function(arg1, arg2)。<br>或者你先 import 某个 Module 里的函数，然后用省略Module名的方式调用：Function(arg1, arg2)。<br>2、Module 可也提供代码管理的作用，加载一个 Module 到 Erlang VM就加载了那个 Module 里的所有代码，然后你想热更新代码的话，直接更新这个 Module 就行了。<br><strong>示例1：</strong> 实现将数值翻倍<br>以一个目录下面新建一个文件名为tut.erl,输入以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(tut).</span><br><span class=\"line\">-export([double/1]).</span><br><span class=\"line\"></span><br><span class=\"line\">double(X)-&gt;</span><br><span class=\"line\">X *2.</span><br></pre></td></tr></table></figure>\n<p>在命令窗口输入以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang pwd</span><br><span class=\"line\">/Users/Macx/Public/erlang</span><br><span class=\"line\">➜  erlang c(tut). %要在不是erlang shell下才能去执行c(tut).编译文件会报错</span><br><span class=\"line\">zsh: no matches found: c(tut).</span><br><span class=\"line\">➜  erlang erl  %要在erlang shell下才能去执行c(tut).编译文件</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; c(tut).</span><br><span class=\"line\">&#123;ok,tut&#125;</span><br><span class=\"line\">2&gt; tut:double(3).</span><br><span class=\"line\">%编译完成之后，可以用module:function 来调用方法</span><br><span class=\"line\">6</span><br><span class=\"line\">3&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>示例2：</strong>计算一个数的阶乘，如：4的阶乘为 4 <em> 3 </em> 2 * 2 = 24<br>新建一个tut1.erl文件，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(tut1).</span><br><span class=\"line\">-export([fac/1]).</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fac(1) -&gt;</span><br><span class=\"line\">1;</span><br><span class=\"line\">%以分号结束的，这也就表示后面还有 fac 函数的更多内容</span><br><span class=\"line\"></span><br><span class=\"line\">fac(N) -&gt;</span><br><span class=\"line\">N * fac(N -1).</span><br><span class=\"line\">%N 的阶乘为 N 乘以 N-1 的阶乘</span><br></pre></td></tr></table></figure>\n<p>在命令行中输入如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang erl</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; c(tut1).</span><br><span class=\"line\">&#123;ok,tut1&#125;</span><br><span class=\"line\">2&gt; </span><br><span class=\"line\">2&gt; </span><br><span class=\"line\">2&gt; tut1:fac(4).****</span><br><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n<p><strong>对tut1.erl进行扩展</strong><br>（Erlang 函数也可以有多个参数，实现一个函数完成两个数相乘）<br>修改tut1.erl如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(tut1).</span><br><span class=\"line\">-export([fac/1,mult/2]).</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fac(1) -&gt;</span><br><span class=\"line\">1;</span><br><span class=\"line\"></span><br><span class=\"line\">fac(N) -&gt;</span><br><span class=\"line\">N * fac(N -1).</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mult(X,Y) -&gt;</span><br><span class=\"line\">X * Y.</span><br></pre></td></tr></table></figure>\n<p>在命令窗口输入如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang erl</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; c(tut1).</span><br><span class=\"line\">&#123;ok,tut1&#125;</span><br><span class=\"line\">2&gt; tut1:m</span><br><span class=\"line\">module_info/0  module_info/1  mult/2         </span><br><span class=\"line\">2&gt; tut1:mult(2,3).</span><br><span class=\"line\">6</span><br><span class=\"line\">3&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内建函数-BIF\"><a href=\"#内建函数-BIF\" class=\"headerlink\" title=\"内建函数 BIF\"></a>内建函数 BIF</h2><p>erlang module 里的函数叫做 BIF.（内建函数）</p>\n<p>示例：erlang 自带的Module（BIP）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">45&gt; erlang:element(2,&#123;a,b,c&#125;).</span><br><span class=\"line\">b</span><br><span class=\"line\">46&gt; element(2,&#123;a,b,c&#125;).</span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\">48&gt; lists:seq(1,4).</span><br><span class=\"line\">[1,2,3,4]</span><br><span class=\"line\">49&gt; seq(1,4).</span><br><span class=\"line\">** exception error: undefined shell command seq/2</span><br><span class=\"line\">50&gt; %上面的例子里，你能直接用 erlang Module 里的 element/2 函数，是因为 erlang 里的常用函数会被 潜在的 import 过来。其他的 Module 比如 lists 不会.</span><br></pre></td></tr></table></figure>\n<p>内置函数示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; trunc(5.6).</span><br><span class=\"line\">%就近取整</span><br><span class=\"line\">5</span><br><span class=\"line\">2&gt; round(5.6).</span><br><span class=\"line\">%四舍五入</span><br><span class=\"line\">6</span><br><span class=\"line\">3&gt; length([1,2,3,4]).</span><br><span class=\"line\">%列表长度</span><br><span class=\"line\">4</span><br><span class=\"line\">4&gt; float(5).</span><br><span class=\"line\">%浮点数</span><br><span class=\"line\">5.0</span><br><span class=\"line\">5&gt; is_atom(hello).</span><br><span class=\"line\">%是否为原子</span><br><span class=\"line\">true</span><br><span class=\"line\">6&gt; is_atom(&quot;hello&quot;).</span><br><span class=\"line\">false</span><br><span class=\"line\">7&gt; is_tuple(&#123;pairs,&#123;c,30&#125;&#125;).</span><br><span class=\"line\">%是否为元组</span><br><span class=\"line\">true</span><br><span class=\"line\">8&gt; is_tuple([pairs,&#123;c,30&#125;]).</span><br><span class=\"line\">false</span><br><span class=\"line\">9&gt; </span><br><span class=\"line\">10&gt; atom_to_list(hello).</span><br><span class=\"line\">%原子转为字符串</span><br><span class=\"line\">&quot;hello&quot;</span><br><span class=\"line\">11&gt; list_to_atom(&quot;goodbay&quot;).</span><br><span class=\"line\">%字符串转为原子</span><br><span class=\"line\">goodbay</span><br><span class=\"line\">12&gt; integer_to_list(22).</span><br><span class=\"line\">%整型转为列表</span><br><span class=\"line\">&quot;22&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"erlang-shell中运行文件中的方法\"><a href=\"#erlang-shell中运行文件中的方法\" class=\"headerlink\" title=\"erlang shell中运行文件中的方法\"></a>erlang shell中运行文件中的方法</h2><p>1、Erlang Shell 是一个快速尝试新想法的地方，但我们真正的代码是要写到文件里，然后参与编译的。</p>\n<p>在一个目录（我这边为/Users/Macx/Public/erlang这个目录）下面新建一个text.erl的文件<br>在文件的第一行, 用 -module(text) 来声明你的 module name。注意跟 java 类似，module 名要跟文件名一样。<br>然后你在你的 module 里写你的函数,text.erl代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(text).</span><br><span class=\"line\">-export([add/2,add/3]).</span><br><span class=\"line\">%% export 是导出语法，指定导出 add/2, add/3 函数。没导出的函数在 Module 外是无法访问的。</span><br><span class=\"line\"></span><br><span class=\"line\">add(A,B) -&gt;</span><br><span class=\"line\">A + B.</span><br><span class=\"line\"></span><br><span class=\"line\">add(A,B,C) -&gt;</span><br><span class=\"line\">A + B + C.</span><br></pre></td></tr></table></figure>\n<p>在 shell中的操作如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang pwd </span><br><span class=\"line\">%查看当前的目录路径；</span><br><span class=\"line\">/Users/Macx/Public/erlang</span><br><span class=\"line\">➜  erlang ll    </span><br><span class=\"line\">%查看当前的目录路径下的文件；</span><br><span class=\"line\">-rw-r--r--@ 1 Macx  staff     0B  6 12 10:39 text.erl</span><br><span class=\"line\">➜  erlang mkdir -p ./ebin  </span><br><span class=\"line\">%在当前路径下建一个ebin的文件目录</span><br><span class=\"line\">➜  erlang erlc -o ebin text.erl </span><br><span class=\"line\">%用erlc编译文件，并把文件放到ebin下面</span><br><span class=\"line\">➜  erlang ll ebin  %查看ebin 下面是否有文件</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 Macx  staff   580B  6 12 10:42 text.beam</span><br><span class=\"line\">➜  erlang erl -pa ./ebin </span><br><span class=\"line\">%erl -pa 参数的意思是 Path Add, 添加目录到 erlang 的 beam 文件查找目录列表里。</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; pwd</span><br><span class=\"line\">1&gt; .</span><br><span class=\"line\">pwd</span><br><span class=\"line\">2&gt; text(1,4).</span><br><span class=\"line\">%%直接调用方法会报错找不到方法</span><br><span class=\"line\">** exception error: undefined shell command text/2</span><br><span class=\"line\">3&gt; text:add(1,4).</span><br><span class=\"line\">%添加模块名加方法名后可以正常调到方法</span><br><span class=\"line\">5</span><br><span class=\"line\">4&gt; text:add(1,4,8).</span><br><span class=\"line\">13</span><br><span class=\"line\">5&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>引用网络博客内容：<br><a href=\"https://www.jianshu.com/p/b45eb9314d1e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b45eb9314d1e</a>        （30 分钟学 Erlang (一)）<br><a href=\"https://www.w3cschool.cn/erlang/tohb1p5z.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/erlang/tohb1p5z.html</a>      （w3cschool erlang教程）</p>\n<p>个人博客地址：<a href=\"https://zhangyongfeng1.github.io/\">https://zhangyongfeng1.github.io/</a><br>简书地址：<a href=\"https://www.jianshu.com/u/137f325832fb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/137f325832fb</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#写在前面\">写在前面</a></li>\n<li><a href=\"#模块和函数\">模块和函数</a></li>\n<li><a href=\"#内建函数-bif\">内建函数 BIF</a></li>\n<li><a href=\"#erlang-shell中运行文件中的方法\">erlang shell中运行文件中的方法</a></li>\n<li><a href=\"#写在后面\">写在后面</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本文主要是以一个erlang的学习记录，有错误的地方欢迎指正。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6841945-a92401e828dbb1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"本人的erlang学习脑图\"></p>\n<h2 id=\"模块和函数\"><a href=\"#模块和函数\" class=\"headerlink\" title=\"模块和函数\"></a>模块和函数</h2><p>1、Erlang 里代码是用 Module 组织的。一个 Module 包含了一组功能相近的函数。用一个函数的时候，要这么调用：Module:Function(arg1, arg2)。<br>或者你先 import 某个 Module 里的函数，然后用省略Module名的方式调用：Function(arg1, arg2)。<br>2、Module 可也提供代码管理的作用，加载一个 Module 到 Erlang VM就加载了那个 Module 里的所有代码，然后你想热更新代码的话，直接更新这个 Module 就行了。<br><strong>示例1：</strong> 实现将数值翻倍<br>以一个目录下面新建一个文件名为tut.erl,输入以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(tut).</span><br><span class=\"line\">-export([double/1]).</span><br><span class=\"line\"></span><br><span class=\"line\">double(X)-&gt;</span><br><span class=\"line\">X *2.</span><br></pre></td></tr></table></figure>\n<p>在命令窗口输入以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang pwd</span><br><span class=\"line\">/Users/Macx/Public/erlang</span><br><span class=\"line\">➜  erlang c(tut). %要在不是erlang shell下才能去执行c(tut).编译文件会报错</span><br><span class=\"line\">zsh: no matches found: c(tut).</span><br><span class=\"line\">➜  erlang erl  %要在erlang shell下才能去执行c(tut).编译文件</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; c(tut).</span><br><span class=\"line\">&#123;ok,tut&#125;</span><br><span class=\"line\">2&gt; tut:double(3).</span><br><span class=\"line\">%编译完成之后，可以用module:function 来调用方法</span><br><span class=\"line\">6</span><br><span class=\"line\">3&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>示例2：</strong>计算一个数的阶乘，如：4的阶乘为 4 <em> 3 </em> 2 * 2 = 24<br>新建一个tut1.erl文件，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(tut1).</span><br><span class=\"line\">-export([fac/1]).</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fac(1) -&gt;</span><br><span class=\"line\">1;</span><br><span class=\"line\">%以分号结束的，这也就表示后面还有 fac 函数的更多内容</span><br><span class=\"line\"></span><br><span class=\"line\">fac(N) -&gt;</span><br><span class=\"line\">N * fac(N -1).</span><br><span class=\"line\">%N 的阶乘为 N 乘以 N-1 的阶乘</span><br></pre></td></tr></table></figure>\n<p>在命令行中输入如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang erl</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; c(tut1).</span><br><span class=\"line\">&#123;ok,tut1&#125;</span><br><span class=\"line\">2&gt; </span><br><span class=\"line\">2&gt; </span><br><span class=\"line\">2&gt; tut1:fac(4).****</span><br><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n<p><strong>对tut1.erl进行扩展</strong><br>（Erlang 函数也可以有多个参数，实现一个函数完成两个数相乘）<br>修改tut1.erl如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(tut1).</span><br><span class=\"line\">-export([fac/1,mult/2]).</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fac(1) -&gt;</span><br><span class=\"line\">1;</span><br><span class=\"line\"></span><br><span class=\"line\">fac(N) -&gt;</span><br><span class=\"line\">N * fac(N -1).</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mult(X,Y) -&gt;</span><br><span class=\"line\">X * Y.</span><br></pre></td></tr></table></figure>\n<p>在命令窗口输入如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang erl</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; c(tut1).</span><br><span class=\"line\">&#123;ok,tut1&#125;</span><br><span class=\"line\">2&gt; tut1:m</span><br><span class=\"line\">module_info/0  module_info/1  mult/2         </span><br><span class=\"line\">2&gt; tut1:mult(2,3).</span><br><span class=\"line\">6</span><br><span class=\"line\">3&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内建函数-BIF\"><a href=\"#内建函数-BIF\" class=\"headerlink\" title=\"内建函数 BIF\"></a>内建函数 BIF</h2><p>erlang module 里的函数叫做 BIF.（内建函数）</p>\n<p>示例：erlang 自带的Module（BIP）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">45&gt; erlang:element(2,&#123;a,b,c&#125;).</span><br><span class=\"line\">b</span><br><span class=\"line\">46&gt; element(2,&#123;a,b,c&#125;).</span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\">48&gt; lists:seq(1,4).</span><br><span class=\"line\">[1,2,3,4]</span><br><span class=\"line\">49&gt; seq(1,4).</span><br><span class=\"line\">** exception error: undefined shell command seq/2</span><br><span class=\"line\">50&gt; %上面的例子里，你能直接用 erlang Module 里的 element/2 函数，是因为 erlang 里的常用函数会被 潜在的 import 过来。其他的 Module 比如 lists 不会.</span><br></pre></td></tr></table></figure>\n<p>内置函数示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; trunc(5.6).</span><br><span class=\"line\">%就近取整</span><br><span class=\"line\">5</span><br><span class=\"line\">2&gt; round(5.6).</span><br><span class=\"line\">%四舍五入</span><br><span class=\"line\">6</span><br><span class=\"line\">3&gt; length([1,2,3,4]).</span><br><span class=\"line\">%列表长度</span><br><span class=\"line\">4</span><br><span class=\"line\">4&gt; float(5).</span><br><span class=\"line\">%浮点数</span><br><span class=\"line\">5.0</span><br><span class=\"line\">5&gt; is_atom(hello).</span><br><span class=\"line\">%是否为原子</span><br><span class=\"line\">true</span><br><span class=\"line\">6&gt; is_atom(&quot;hello&quot;).</span><br><span class=\"line\">false</span><br><span class=\"line\">7&gt; is_tuple(&#123;pairs,&#123;c,30&#125;&#125;).</span><br><span class=\"line\">%是否为元组</span><br><span class=\"line\">true</span><br><span class=\"line\">8&gt; is_tuple([pairs,&#123;c,30&#125;]).</span><br><span class=\"line\">false</span><br><span class=\"line\">9&gt; </span><br><span class=\"line\">10&gt; atom_to_list(hello).</span><br><span class=\"line\">%原子转为字符串</span><br><span class=\"line\">&quot;hello&quot;</span><br><span class=\"line\">11&gt; list_to_atom(&quot;goodbay&quot;).</span><br><span class=\"line\">%字符串转为原子</span><br><span class=\"line\">goodbay</span><br><span class=\"line\">12&gt; integer_to_list(22).</span><br><span class=\"line\">%整型转为列表</span><br><span class=\"line\">&quot;22&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"erlang-shell中运行文件中的方法\"><a href=\"#erlang-shell中运行文件中的方法\" class=\"headerlink\" title=\"erlang shell中运行文件中的方法\"></a>erlang shell中运行文件中的方法</h2><p>1、Erlang Shell 是一个快速尝试新想法的地方，但我们真正的代码是要写到文件里，然后参与编译的。</p>\n<p>在一个目录（我这边为/Users/Macx/Public/erlang这个目录）下面新建一个text.erl的文件<br>在文件的第一行, 用 -module(text) 来声明你的 module name。注意跟 java 类似，module 名要跟文件名一样。<br>然后你在你的 module 里写你的函数,text.erl代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(text).</span><br><span class=\"line\">-export([add/2,add/3]).</span><br><span class=\"line\">%% export 是导出语法，指定导出 add/2, add/3 函数。没导出的函数在 Module 外是无法访问的。</span><br><span class=\"line\"></span><br><span class=\"line\">add(A,B) -&gt;</span><br><span class=\"line\">A + B.</span><br><span class=\"line\"></span><br><span class=\"line\">add(A,B,C) -&gt;</span><br><span class=\"line\">A + B + C.</span><br></pre></td></tr></table></figure>\n<p>在 shell中的操作如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  erlang pwd </span><br><span class=\"line\">%查看当前的目录路径；</span><br><span class=\"line\">/Users/Macx/Public/erlang</span><br><span class=\"line\">➜  erlang ll    </span><br><span class=\"line\">%查看当前的目录路径下的文件；</span><br><span class=\"line\">-rw-r--r--@ 1 Macx  staff     0B  6 12 10:39 text.erl</span><br><span class=\"line\">➜  erlang mkdir -p ./ebin  </span><br><span class=\"line\">%在当前路径下建一个ebin的文件目录</span><br><span class=\"line\">➜  erlang erlc -o ebin text.erl </span><br><span class=\"line\">%用erlc编译文件，并把文件放到ebin下面</span><br><span class=\"line\">➜  erlang ll ebin  %查看ebin 下面是否有文件</span><br><span class=\"line\">total 8</span><br><span class=\"line\">-rw-r--r--  1 Macx  staff   580B  6 12 10:42 text.beam</span><br><span class=\"line\">➜  erlang erl -pa ./ebin </span><br><span class=\"line\">%erl -pa 参数的意思是 Path Add, 添加目录到 erlang 的 beam 文件查找目录列表里。</span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; pwd</span><br><span class=\"line\">1&gt; .</span><br><span class=\"line\">pwd</span><br><span class=\"line\">2&gt; text(1,4).</span><br><span class=\"line\">%%直接调用方法会报错找不到方法</span><br><span class=\"line\">** exception error: undefined shell command text/2</span><br><span class=\"line\">3&gt; text:add(1,4).</span><br><span class=\"line\">%添加模块名加方法名后可以正常调到方法</span><br><span class=\"line\">5</span><br><span class=\"line\">4&gt; text:add(1,4,8).</span><br><span class=\"line\">13</span><br><span class=\"line\">5&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>引用网络博客内容：<br><a href=\"https://www.jianshu.com/p/b45eb9314d1e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b45eb9314d1e</a>        （30 分钟学 Erlang (一)）<br><a href=\"https://www.w3cschool.cn/erlang/tohb1p5z.html\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/erlang/tohb1p5z.html</a>      （w3cschool erlang教程）</p>\n<p>个人博客地址：<a href=\"https://zhangyongfeng1.github.io/\">https://zhangyongfeng1.github.io/</a><br>简书地址：<a href=\"https://www.jianshu.com/u/137f325832fb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/137f325832fb</a></p>\n"},{"title":"javaScript_基础1","date":"2018-06-26T06:27:25.000Z","description":"javaScript基础示例","_content":"\n<!-- TOC -->\n\n- [1. javaScript简介](#1-javascript简介)\n    - [1.1. javaScript简单示列：textdemo.html](#11-javascript简单示列textdemohtml)\n    - [1.2. 以引入文件形式调用javaScript文件示例：](#12-以引入文件形式调用javascript文件示例)\n    - [1.3. 后台调试日志打卬和页面输出示例：](#13-后台调试日志打卬和页面输出示例)\n    - [1.4. 定义变量，获取变量类型，判断变量否有赋值](#14-定义变量获取变量类型判断变量否有赋值)\n    - [1.5. 拆分一个变量，转换为对象打印出来](#15-拆分一个变量转换为对象打印出来)\n    - [1.6. 字符串比较方式：==](#16-字符串比较方式)\n    - [1.7. 打印出99乘法表](#17-打印出99乘法表)\n    - [1.8. 数组JavaScript](#18-数组javascript)\n\n<!-- /TOC -->\n# 1. javaScript简介\n\n## 1.1. javaScript简单示列：textdemo.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<script type=\"text/javascript\">\n\t\talert(\"text\");\n\t</script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n## 1.2. 以引入文件形式调用javaScript文件示例：\n在textdemo.html目录下再新建一个文件夹命名为js,再新建一个文件命名为demo.js\ndemo.js 内容如下：\n\n```\nalert(\"text\");\n```\n\ntextdemo.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<script type=\"text/javascript\" src=\"./js/demo.js\">\n\t</script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n## 1.3. 后台调试日志打卬和页面输出示例：\ntextdemo.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" >\n\t\tdocument.write(\"<h1>hello world</h1>\");\n\t\t//通过javascript向页面输出HTML代码\n\t\t//输出document.write为不可控\n  \t\tconsole.log(\"这是后台输出！\");\n  \t\t//后台调轼通用\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n## 1.4. 定义变量，获取变量类型，判断变量否有赋值\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tvar num = 10;// 定义变量类型 number\n\t\tvar aa ;// 定义没值的变量类型 undefined\n\t\tvar bolue = false;\n\t\tvar string1 = \"string\"; \n\t\t\n\t\tconsole.log(typeof num);\n\t\tconsole.log(typeof aa);\n\t\tconsole.log(typeof bolue);\n\t\tconsole.log(typeof string1);\n\n\t\tdocument.write(\"<h1>\" + (typeof num) + \"</h1>\");\n\t\tdocument.write(\"<h1>\" + (typeof aa) + \"</h1>\");\n\t\t\n\t\t//判断变量是否undefined\n\t\tif (aa == undefined){\n\t\t\talert(\"num 的变量类型没有内容！undefined\");\n\t\t}\n\n\t\t//判断变量是否false 变量没有值同为underfined 和 布尔类型的false\n\t\tif (!aa){\n\t\t\talert(\"num 的变量类型没有内容！false\");\n\t\t}else{\n\t\t\talert(\"num 的变量类型有内容！true\");\n\t\t}\n\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n## 1.5. 拆分一个变量，转换为对象打印出来\n \n ```\n <!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tvar num = \"hello world ni hao\";//定义变量\n\t\tvar result = num.split(\" \");//根据空格拆分变量，新生成的为一个对象；\n\t   //var num = \"192.168.1.1\";//定义变量\n\t\t//var result = num.split(\".\");\n\t   document.write(\"<h1>result变量的类型：\" + (typeof result) + \"</h1>\");\n\t\t//打卬对result 的类型\n\t\tconsole.log(result);\n\t\t//在后台打卬result的内容\n\n\t\tfor (var x = 0 ; x < result.length ; x ++ ){\n\t\t\tdocument.write(\"<h1>\" + result[x] + \"</h1>\");\n\t\t}\n\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n ```\n\n## 1.6. 字符串比较方式：==\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tvar stra = 'hello';\n\t\tvar strb = \"hello\";\n\n\t\talert(stra == strb);\n\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n## 1.7. 打印出99乘法表\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tdocument.write(\"<table border='1'>\");\n\t\tfor(var x =1;x <=9 ;x++){\n\t\t\tdocument.write(\"<tr>\");\n\t\t\tfor (var y =1 ;y <= x ;y++){\n\t\t\t\tdocument.write(\"<td>\" + x + \"*\" + y + \"=\" +(x*y) +\"</td>\");\n\t\t\t}\n\t\t\tfor (var y =1 ;y <=9-x;y++){\n\t\t\t\tdocument.write(\"<td>&nbsp;</td>\")\n\t\t\t}\t\n\t\t\tdocument.write(\"</tr>\");\n\t\t}\n\t\tdocument.write(\"</table>\");\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n## 1.8. 数组JavaScript\n数组JavaScript为数组提供一个length属性来得到数组的长度\n定义语法：\n     \n```\nvar arr1=[2,5,6]; //定义时直接给数组元素赋值\nvar arr2=[]; //定义一个空数组\nvar arr3=new Array(); //定义一个空数组并通过索引来赋值\narr3[0]=1;\narr3[3]=\"abc\";\n```\n\n数组特点：\n1.数组长度可变，总长度='数组的最大索引值'+1；\n2.同一数组中的元素类型可互不相同；\n3.当访问未赋值的数组元素时，该元素值为undefined，不会数组越界。\n数据创建示列：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\t//动态数组\n\t\tvar result = new Array();\n\t\tresult[0] = \"hello\";\n\t\tresult[1] = 100;\n\t\tresult[2] = true;\n\n\t\tconsole.log(result);\n\n\t\tfor (var x = 0 ; x < result.length; x++){\n\t\t\tdocument.write(\"<h1>\" + result[x] +\"-->\" + (typeof result[x]) +\"</h1> \");\n\t\t}\n\n\t\t//初始代数据为string类型并打印\n\t\tvar result1 = new Array('hello',\"world\",\"!\");\n\n\t\tconsole.log(result1);\n\n\t\tfor (var x = 0 ; x < result1.length; x++){\n\t\t\tdocument.write(\"<h1>\" + result1[x] +\"-->\" + (typeof result1[x]) +\"</h1> \");\n\t\t}\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n注：在定义javascript变量时不使用var进行定义时，为全局变量（几乎是不用的）\n\n","source":"_posts/javascirpt_base1.md","raw":"---\ntitle: javaScript_基础1\ndate:  2018-06-26 14:27:25\ntags: [javascript]\ncategories: 张永枫\ndescription: javaScript基础示例\n---\n\n<!-- TOC -->\n\n- [1. javaScript简介](#1-javascript简介)\n    - [1.1. javaScript简单示列：textdemo.html](#11-javascript简单示列textdemohtml)\n    - [1.2. 以引入文件形式调用javaScript文件示例：](#12-以引入文件形式调用javascript文件示例)\n    - [1.3. 后台调试日志打卬和页面输出示例：](#13-后台调试日志打卬和页面输出示例)\n    - [1.4. 定义变量，获取变量类型，判断变量否有赋值](#14-定义变量获取变量类型判断变量否有赋值)\n    - [1.5. 拆分一个变量，转换为对象打印出来](#15-拆分一个变量转换为对象打印出来)\n    - [1.6. 字符串比较方式：==](#16-字符串比较方式)\n    - [1.7. 打印出99乘法表](#17-打印出99乘法表)\n    - [1.8. 数组JavaScript](#18-数组javascript)\n\n<!-- /TOC -->\n# 1. javaScript简介\n\n## 1.1. javaScript简单示列：textdemo.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<script type=\"text/javascript\">\n\t\talert(\"text\");\n\t</script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n## 1.2. 以引入文件形式调用javaScript文件示例：\n在textdemo.html目录下再新建一个文件夹命名为js,再新建一个文件命名为demo.js\ndemo.js 内容如下：\n\n```\nalert(\"text\");\n```\n\ntextdemo.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<script type=\"text/javascript\" src=\"./js/demo.js\">\n\t</script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n## 1.3. 后台调试日志打卬和页面输出示例：\ntextdemo.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" >\n\t\tdocument.write(\"<h1>hello world</h1>\");\n\t\t//通过javascript向页面输出HTML代码\n\t\t//输出document.write为不可控\n  \t\tconsole.log(\"这是后台输出！\");\n  \t\t//后台调轼通用\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n## 1.4. 定义变量，获取变量类型，判断变量否有赋值\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tvar num = 10;// 定义变量类型 number\n\t\tvar aa ;// 定义没值的变量类型 undefined\n\t\tvar bolue = false;\n\t\tvar string1 = \"string\"; \n\t\t\n\t\tconsole.log(typeof num);\n\t\tconsole.log(typeof aa);\n\t\tconsole.log(typeof bolue);\n\t\tconsole.log(typeof string1);\n\n\t\tdocument.write(\"<h1>\" + (typeof num) + \"</h1>\");\n\t\tdocument.write(\"<h1>\" + (typeof aa) + \"</h1>\");\n\t\t\n\t\t//判断变量是否undefined\n\t\tif (aa == undefined){\n\t\t\talert(\"num 的变量类型没有内容！undefined\");\n\t\t}\n\n\t\t//判断变量是否false 变量没有值同为underfined 和 布尔类型的false\n\t\tif (!aa){\n\t\t\talert(\"num 的变量类型没有内容！false\");\n\t\t}else{\n\t\t\talert(\"num 的变量类型有内容！true\");\n\t\t}\n\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n## 1.5. 拆分一个变量，转换为对象打印出来\n \n ```\n <!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tvar num = \"hello world ni hao\";//定义变量\n\t\tvar result = num.split(\" \");//根据空格拆分变量，新生成的为一个对象；\n\t   //var num = \"192.168.1.1\";//定义变量\n\t\t//var result = num.split(\".\");\n\t   document.write(\"<h1>result变量的类型：\" + (typeof result) + \"</h1>\");\n\t\t//打卬对result 的类型\n\t\tconsole.log(result);\n\t\t//在后台打卬result的内容\n\n\t\tfor (var x = 0 ; x < result.length ; x ++ ){\n\t\t\tdocument.write(\"<h1>\" + result[x] + \"</h1>\");\n\t\t}\n\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n ```\n\n## 1.6. 字符串比较方式：==\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tvar stra = 'hello';\n\t\tvar strb = \"hello\";\n\n\t\talert(stra == strb);\n\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n## 1.7. 打印出99乘法表\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\tdocument.write(\"<table border='1'>\");\n\t\tfor(var x =1;x <=9 ;x++){\n\t\t\tdocument.write(\"<tr>\");\n\t\t\tfor (var y =1 ;y <= x ;y++){\n\t\t\t\tdocument.write(\"<td>\" + x + \"*\" + y + \"=\" +(x*y) +\"</td>\");\n\t\t\t}\n\t\t\tfor (var y =1 ;y <=9-x;y++){\n\t\t\t\tdocument.write(\"<td>&nbsp;</td>\")\n\t\t\t}\t\n\t\t\tdocument.write(\"</tr>\");\n\t\t}\n\t\tdocument.write(\"</table>\");\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n## 1.8. 数组JavaScript\n数组JavaScript为数组提供一个length属性来得到数组的长度\n定义语法：\n     \n```\nvar arr1=[2,5,6]; //定义时直接给数组元素赋值\nvar arr2=[]; //定义一个空数组\nvar arr3=new Array(); //定义一个空数组并通过索引来赋值\narr3[0]=1;\narr3[3]=\"abc\";\n```\n\n数组特点：\n1.数组长度可变，总长度='数组的最大索引值'+1；\n2.同一数组中的元素类型可互不相同；\n3.当访问未赋值的数组元素时，该元素值为undefined，不会数组越界。\n数据创建示列：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>javascript text</title>\n\t<meta charset=\"utf-8\">\n\t<!-- 设置编码为UTF-8 -->\n\t<script type=\"text/javascript\" > \n\t\t//动态数组\n\t\tvar result = new Array();\n\t\tresult[0] = \"hello\";\n\t\tresult[1] = 100;\n\t\tresult[2] = true;\n\n\t\tconsole.log(result);\n\n\t\tfor (var x = 0 ; x < result.length; x++){\n\t\t\tdocument.write(\"<h1>\" + result[x] +\"-->\" + (typeof result[x]) +\"</h1> \");\n\t\t}\n\n\t\t//初始代数据为string类型并打印\n\t\tvar result1 = new Array('hello',\"world\",\"!\");\n\n\t\tconsole.log(result1);\n\n\t\tfor (var x = 0 ; x < result1.length; x++){\n\t\t\tdocument.write(\"<h1>\" + result1[x] +\"-->\" + (typeof result1[x]) +\"</h1> \");\n\t\t}\n\t</script>\n</head>\n<body>\n\t<div>你好，世界！</div>\n</body>\n</html>\n```\n\n注：在定义javascript变量时不使用var进行定义时，为全局变量（几乎是不用的）\n\n","slug":"javascirpt_base1","published":1,"updated":"2019-05-07T02:19:37.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowlv000bp7saolnqkmz7","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1-javascript简介\">1. javaScript简介</a><ul>\n<li><a href=\"#11-javascript简单示列textdemohtml\">1.1. javaScript简单示列：textdemo.html</a></li>\n<li><a href=\"#12-以引入文件形式调用javascript文件示例\">1.2. 以引入文件形式调用javaScript文件示例：</a></li>\n<li><a href=\"#13-后台调试日志打卬和页面输出示例\">1.3. 后台调试日志打卬和页面输出示例：</a></li>\n<li><a href=\"#14-定义变量获取变量类型判断变量否有赋值\">1.4. 定义变量，获取变量类型，判断变量否有赋值</a></li>\n<li><a href=\"#15-拆分一个变量转换为对象打印出来\">1.5. 拆分一个变量，转换为对象打印出来</a></li>\n<li><a href=\"#16-字符串比较方式\">1.6. 字符串比较方式：==</a></li>\n<li><a href=\"#17-打印出99乘法表\">1.7. 打印出99乘法表</a></li>\n<li><a href=\"#18-数组javascript\">1.8. 数组JavaScript</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"1-javaScript简介\"><a href=\"#1-javaScript简介\" class=\"headerlink\" title=\"1. javaScript简介\"></a>1. javaScript简介</h1><h2 id=\"1-1-javaScript简单示列：textdemo-html\"><a href=\"#1-1-javaScript简单示列：textdemo-html\" class=\"headerlink\" title=\"1.1. javaScript简单示列：textdemo.html\"></a>1.1. javaScript简单示列：textdemo.html</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\talert(&quot;text&quot;);</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-以引入文件形式调用javaScript文件示例：\"><a href=\"#1-2-以引入文件形式调用javaScript文件示例：\" class=\"headerlink\" title=\"1.2. 以引入文件形式调用javaScript文件示例：\"></a>1.2. 以引入文件形式调用javaScript文件示例：</h2><p>在textdemo.html目录下再新建一个文件夹命名为js,再新建一个文件命名为demo.js<br>demo.js 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&quot;text&quot;);</span><br></pre></td></tr></table></figure>\n<p>textdemo.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;./js/demo.js&quot;&gt;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-后台调试日志打卬和页面输出示例：\"><a href=\"#1-3-后台调试日志打卬和页面输出示例：\" class=\"headerlink\" title=\"1.3. 后台调试日志打卬和页面输出示例：\"></a>1.3. 后台调试日志打卬和页面输出示例：</h2><p>textdemo.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t//通过javascript向页面输出HTML代码</span><br><span class=\"line\">\t\t//输出document.write为不可控</span><br><span class=\"line\">  \t\tconsole.log(&quot;这是后台输出！&quot;);</span><br><span class=\"line\">  \t\t//后台调轼通用</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-定义变量，获取变量类型，判断变量否有赋值\"><a href=\"#1-4-定义变量，获取变量类型，判断变量否有赋值\" class=\"headerlink\" title=\"1.4. 定义变量，获取变量类型，判断变量否有赋值\"></a>1.4. 定义变量，获取变量类型，判断变量否有赋值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tvar num = 10;// 定义变量类型 number</span><br><span class=\"line\">\t\tvar aa ;// 定义没值的变量类型 undefined</span><br><span class=\"line\">\t\tvar bolue = false;</span><br><span class=\"line\">\t\tvar string1 = &quot;string&quot;; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconsole.log(typeof num);</span><br><span class=\"line\">\t\tconsole.log(typeof aa);</span><br><span class=\"line\">\t\tconsole.log(typeof bolue);</span><br><span class=\"line\">\t\tconsole.log(typeof string1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;h1&gt;&quot; + (typeof num) + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;h1&gt;&quot; + (typeof aa) + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//判断变量是否undefined</span><br><span class=\"line\">\t\tif (aa == undefined)&#123;</span><br><span class=\"line\">\t\t\talert(&quot;num 的变量类型没有内容！undefined&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//判断变量是否false 变量没有值同为underfined 和 布尔类型的false</span><br><span class=\"line\">\t\tif (!aa)&#123;</span><br><span class=\"line\">\t\t\talert(&quot;num 的变量类型没有内容！false&quot;);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\talert(&quot;num 的变量类型有内容！true&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-5-拆分一个变量，转换为对象打印出来\"><a href=\"#1-5-拆分一个变量，转换为对象打印出来\" class=\"headerlink\" title=\"1.5. 拆分一个变量，转换为对象打印出来\"></a>1.5. 拆分一个变量，转换为对象打印出来</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tvar num = &quot;hello world ni hao&quot;;//定义变量</span><br><span class=\"line\">\t\tvar result = num.split(&quot; &quot;);//根据空格拆分变量，新生成的为一个对象；</span><br><span class=\"line\">\t   //var num = &quot;192.168.1.1&quot;;//定义变量</span><br><span class=\"line\">\t\t//var result = num.split(&quot;.&quot;);</span><br><span class=\"line\">\t   document.write(&quot;&lt;h1&gt;result变量的类型：&quot; + (typeof result) + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t//打卬对result 的类型</span><br><span class=\"line\">\t\tconsole.log(result);</span><br><span class=\"line\">\t\t//在后台打卬result的内容</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (var x = 0 ; x &lt; result.length ; x ++ )&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;h1&gt;&quot; + result[x] + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-6-字符串比较方式：\"><a href=\"#1-6-字符串比较方式：\" class=\"headerlink\" title=\"1.6. 字符串比较方式：==\"></a>1.6. 字符串比较方式：==</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tvar stra = &apos;hello&apos;;</span><br><span class=\"line\">\t\tvar strb = &quot;hello&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\talert(stra == strb);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-7-打印出99乘法表\"><a href=\"#1-7-打印出99乘法表\" class=\"headerlink\" title=\"1.7. 打印出99乘法表\"></a>1.7. 打印出99乘法表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;table border=&apos;1&apos;&gt;&quot;);</span><br><span class=\"line\">\t\tfor(var x =1;x &lt;=9 ;x++)&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;tr&gt;&quot;);</span><br><span class=\"line\">\t\t\tfor (var y =1 ;y &lt;= x ;y++)&#123;</span><br><span class=\"line\">\t\t\t\tdocument.write(&quot;&lt;td&gt;&quot; + x + &quot;*&quot; + y + &quot;=&quot; +(x*y) +&quot;&lt;/td&gt;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfor (var y =1 ;y &lt;=9-x;y++)&#123;</span><br><span class=\"line\">\t\t\t\tdocument.write(&quot;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&quot;)</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;/tr&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;/table&gt;&quot;);</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-8-数组JavaScript\"><a href=\"#1-8-数组JavaScript\" class=\"headerlink\" title=\"1.8. 数组JavaScript\"></a>1.8. 数组JavaScript</h2><p>数组JavaScript为数组提供一个length属性来得到数组的长度<br>定义语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1=[2,5,6]; //定义时直接给数组元素赋值</span><br><span class=\"line\">var arr2=[]; //定义一个空数组</span><br><span class=\"line\">var arr3=new Array(); //定义一个空数组并通过索引来赋值</span><br><span class=\"line\">arr3[0]=1;</span><br><span class=\"line\">arr3[3]=&quot;abc&quot;;</span><br></pre></td></tr></table></figure>\n<p>数组特点：<br>1.数组长度可变，总长度=’数组的最大索引值’+1；<br>2.同一数组中的元素类型可互不相同；<br>3.当访问未赋值的数组元素时，该元素值为undefined，不会数组越界。<br>数据创建示列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\t//动态数组</span><br><span class=\"line\">\t\tvar result = new Array();</span><br><span class=\"line\">\t\tresult[0] = &quot;hello&quot;;</span><br><span class=\"line\">\t\tresult[1] = 100;</span><br><span class=\"line\">\t\tresult[2] = true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tconsole.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (var x = 0 ; x &lt; result.length; x++)&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;h1&gt;&quot; + result[x] +&quot;--&gt;&quot; + (typeof result[x]) +&quot;&lt;/h1&gt; &quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//初始代数据为string类型并打印</span><br><span class=\"line\">\t\tvar result1 = new Array(&apos;hello&apos;,&quot;world&quot;,&quot;!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tconsole.log(result1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (var x = 0 ; x &lt; result1.length; x++)&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;h1&gt;&quot; + result1[x] +&quot;--&gt;&quot; + (typeof result1[x]) +&quot;&lt;/h1&gt; &quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>注：在定义javascript变量时不使用var进行定义时，为全局变量（几乎是不用的）</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#1-javascript简介\">1. javaScript简介</a><ul>\n<li><a href=\"#11-javascript简单示列textdemohtml\">1.1. javaScript简单示列：textdemo.html</a></li>\n<li><a href=\"#12-以引入文件形式调用javascript文件示例\">1.2. 以引入文件形式调用javaScript文件示例：</a></li>\n<li><a href=\"#13-后台调试日志打卬和页面输出示例\">1.3. 后台调试日志打卬和页面输出示例：</a></li>\n<li><a href=\"#14-定义变量获取变量类型判断变量否有赋值\">1.4. 定义变量，获取变量类型，判断变量否有赋值</a></li>\n<li><a href=\"#15-拆分一个变量转换为对象打印出来\">1.5. 拆分一个变量，转换为对象打印出来</a></li>\n<li><a href=\"#16-字符串比较方式\">1.6. 字符串比较方式：==</a></li>\n<li><a href=\"#17-打印出99乘法表\">1.7. 打印出99乘法表</a></li>\n<li><a href=\"#18-数组javascript\">1.8. 数组JavaScript</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h1 id=\"1-javaScript简介\"><a href=\"#1-javaScript简介\" class=\"headerlink\" title=\"1. javaScript简介\"></a>1. javaScript简介</h1><h2 id=\"1-1-javaScript简单示列：textdemo-html\"><a href=\"#1-1-javaScript简单示列：textdemo-html\" class=\"headerlink\" title=\"1.1. javaScript简单示列：textdemo.html\"></a>1.1. javaScript简单示列：textdemo.html</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\talert(&quot;text&quot;);</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-以引入文件形式调用javaScript文件示例：\"><a href=\"#1-2-以引入文件形式调用javaScript文件示例：\" class=\"headerlink\" title=\"1.2. 以引入文件形式调用javaScript文件示例：\"></a>1.2. 以引入文件形式调用javaScript文件示例：</h2><p>在textdemo.html目录下再新建一个文件夹命名为js,再新建一个文件命名为demo.js<br>demo.js 内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&quot;text&quot;);</span><br></pre></td></tr></table></figure>\n<p>textdemo.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;./js/demo.js&quot;&gt;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-后台调试日志打卬和页面输出示例：\"><a href=\"#1-3-后台调试日志打卬和页面输出示例：\" class=\"headerlink\" title=\"1.3. 后台调试日志打卬和页面输出示例：\"></a>1.3. 后台调试日志打卬和页面输出示例：</h2><p>textdemo.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t//通过javascript向页面输出HTML代码</span><br><span class=\"line\">\t\t//输出document.write为不可控</span><br><span class=\"line\">  \t\tconsole.log(&quot;这是后台输出！&quot;);</span><br><span class=\"line\">  \t\t//后台调轼通用</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4-定义变量，获取变量类型，判断变量否有赋值\"><a href=\"#1-4-定义变量，获取变量类型，判断变量否有赋值\" class=\"headerlink\" title=\"1.4. 定义变量，获取变量类型，判断变量否有赋值\"></a>1.4. 定义变量，获取变量类型，判断变量否有赋值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tvar num = 10;// 定义变量类型 number</span><br><span class=\"line\">\t\tvar aa ;// 定义没值的变量类型 undefined</span><br><span class=\"line\">\t\tvar bolue = false;</span><br><span class=\"line\">\t\tvar string1 = &quot;string&quot;; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconsole.log(typeof num);</span><br><span class=\"line\">\t\tconsole.log(typeof aa);</span><br><span class=\"line\">\t\tconsole.log(typeof bolue);</span><br><span class=\"line\">\t\tconsole.log(typeof string1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;h1&gt;&quot; + (typeof num) + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;h1&gt;&quot; + (typeof aa) + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//判断变量是否undefined</span><br><span class=\"line\">\t\tif (aa == undefined)&#123;</span><br><span class=\"line\">\t\t\talert(&quot;num 的变量类型没有内容！undefined&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//判断变量是否false 变量没有值同为underfined 和 布尔类型的false</span><br><span class=\"line\">\t\tif (!aa)&#123;</span><br><span class=\"line\">\t\t\talert(&quot;num 的变量类型没有内容！false&quot;);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\talert(&quot;num 的变量类型有内容！true&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-5-拆分一个变量，转换为对象打印出来\"><a href=\"#1-5-拆分一个变量，转换为对象打印出来\" class=\"headerlink\" title=\"1.5. 拆分一个变量，转换为对象打印出来\"></a>1.5. 拆分一个变量，转换为对象打印出来</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tvar num = &quot;hello world ni hao&quot;;//定义变量</span><br><span class=\"line\">\t\tvar result = num.split(&quot; &quot;);//根据空格拆分变量，新生成的为一个对象；</span><br><span class=\"line\">\t   //var num = &quot;192.168.1.1&quot;;//定义变量</span><br><span class=\"line\">\t\t//var result = num.split(&quot;.&quot;);</span><br><span class=\"line\">\t   document.write(&quot;&lt;h1&gt;result变量的类型：&quot; + (typeof result) + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t//打卬对result 的类型</span><br><span class=\"line\">\t\tconsole.log(result);</span><br><span class=\"line\">\t\t//在后台打卬result的内容</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (var x = 0 ; x &lt; result.length ; x ++ )&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;h1&gt;&quot; + result[x] + &quot;&lt;/h1&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-6-字符串比较方式：\"><a href=\"#1-6-字符串比较方式：\" class=\"headerlink\" title=\"1.6. 字符串比较方式：==\"></a>1.6. 字符串比较方式：==</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tvar stra = &apos;hello&apos;;</span><br><span class=\"line\">\t\tvar strb = &quot;hello&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\talert(stra == strb);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-7-打印出99乘法表\"><a href=\"#1-7-打印出99乘法表\" class=\"headerlink\" title=\"1.7. 打印出99乘法表\"></a>1.7. 打印出99乘法表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;table border=&apos;1&apos;&gt;&quot;);</span><br><span class=\"line\">\t\tfor(var x =1;x &lt;=9 ;x++)&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;tr&gt;&quot;);</span><br><span class=\"line\">\t\t\tfor (var y =1 ;y &lt;= x ;y++)&#123;</span><br><span class=\"line\">\t\t\t\tdocument.write(&quot;&lt;td&gt;&quot; + x + &quot;*&quot; + y + &quot;=&quot; +(x*y) +&quot;&lt;/td&gt;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfor (var y =1 ;y &lt;=9-x;y++)&#123;</span><br><span class=\"line\">\t\t\t\tdocument.write(&quot;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&quot;)</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;/tr&gt;&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdocument.write(&quot;&lt;/table&gt;&quot;);</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-8-数组JavaScript\"><a href=\"#1-8-数组JavaScript\" class=\"headerlink\" title=\"1.8. 数组JavaScript\"></a>1.8. 数组JavaScript</h2><p>数组JavaScript为数组提供一个length属性来得到数组的长度<br>定义语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1=[2,5,6]; //定义时直接给数组元素赋值</span><br><span class=\"line\">var arr2=[]; //定义一个空数组</span><br><span class=\"line\">var arr3=new Array(); //定义一个空数组并通过索引来赋值</span><br><span class=\"line\">arr3[0]=1;</span><br><span class=\"line\">arr3[3]=&quot;abc&quot;;</span><br></pre></td></tr></table></figure>\n<p>数组特点：<br>1.数组长度可变，总长度=’数组的最大索引值’+1；<br>2.同一数组中的元素类型可互不相同；<br>3.当访问未赋值的数组元素时，该元素值为undefined，不会数组越界。<br>数据创建示列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;javascript text&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- 设置编码为UTF-8 --&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; &gt; </span><br><span class=\"line\">\t\t//动态数组</span><br><span class=\"line\">\t\tvar result = new Array();</span><br><span class=\"line\">\t\tresult[0] = &quot;hello&quot;;</span><br><span class=\"line\">\t\tresult[1] = 100;</span><br><span class=\"line\">\t\tresult[2] = true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tconsole.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (var x = 0 ; x &lt; result.length; x++)&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;h1&gt;&quot; + result[x] +&quot;--&gt;&quot; + (typeof result[x]) +&quot;&lt;/h1&gt; &quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//初始代数据为string类型并打印</span><br><span class=\"line\">\t\tvar result1 = new Array(&apos;hello&apos;,&quot;world&quot;,&quot;!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tconsole.log(result1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (var x = 0 ; x &lt; result1.length; x++)&#123;</span><br><span class=\"line\">\t\t\tdocument.write(&quot;&lt;h1&gt;&quot; + result1[x] +&quot;--&gt;&quot; + (typeof result1[x]) +&quot;&lt;/h1&gt; &quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div&gt;你好，世界！&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>注：在定义javascript变量时不使用var进行定义时，为全局变量（几乎是不用的）</p>\n"},{"title":"erlang-实战-对文件内容进行处理","date":"2018-06-26T06:27:25.000Z","description":"对文件进行处理,将 xml报文格式的报文转为lua 去取值","_content":"\n示例为：对文件进行处理\n将 xml报文格式的报文转为lua 去取值\n如由 \n\n```\n<khxm><name>姓名</name><value>123</value></khxm>\n```\n 转为 \n \n```\nthis.hqzhxx_ccsz_name = body['hqzhxx'][\"ccsz\"]['name']  or \"\";--持仓市值\n```\ntxt1.txt文件内容如下：\n\n```\n<cpgg><name>产品规格</name><value>123克</value></cpgg>\n<gmsl><name>购买数量</name><value>234个</value></gmsl>\n<gmfe><name>购买份额</name><value>345克</value></gmfe>\n```\n转换后要的效果如下：\n\n```\nthis.cpgg_name = body['cpgg']['name'] or '';--产品规格\nthis.cpgg_value = body['cpgg']['value'] or '';--产品规格\nthis.gmsl_name = body['gmsl']['name'] or '';--购买数量\nthis.gmsl_value = body['gmsl']['value'] or '';--购买数量\nthis.gmfe_name = body['gmfe']['name'] or '';--购买份额\nthis.gmfe_value = body['gmfe']['value'] or '';--购买份额\n```\n\nerl处理文件(file_change.erl)代码如下：\n\n```\n-module(file_change).\n-export([process/2]).\n\n%对文件进行处理\n%将 xml报文格式的报文转为lua 去取值\n%如由 <khxm><name>姓名</name><value>123</value></khxm> 转为 \n%this.hqzhxx_ccsz_name = body['hqzhxx'][\"ccsz\"]['name']  or \"\";--持仓市值\n\nprocess(FileIn, FileOut)->\n\t{Status,Value} = file:open(FileIn,read),\n\tif Status =:= ok ->\n\t\t\tio:format(\"==== open successed ====!~n\"),\n\t\t\tTokens = readFile(Value),%%读取文件并处理\n\t\t\tio:format(\"file_value------~p ~n\",[Tokens]),\n\t\t\tfile:write_file(\"./\"++FileOut,[Tokens]),%%写文件\n\t\t\tio:format(\"==== end ===!~n\");\n\t   \tStatus =/= ok ->\n\t\t\tio:format(\"open file error!\")\n\tend.\n\t\nreadFile(Value) ->\n\treadFile(Value,[]).\n\nreadFile(Value,ReturnList) ->\n\tOneLine = io:get_line(Value,\"\"),%一行一行读取文件\n\tif \n\t\tOneLine =:= eof -> %文件末尾标记 文件结束,关闭文件\n\t\t\tio:format(\"acrss the file end! ~n\"),\n\t\t\tfile:close(Value),\n\t\t\tReturnList;\n\t\tOneLine =/= eof ->\n\t\t\tTokens = string:tokens(OneLine,\"< > /> \\n\"),% 使用多个分隔符把字符串分割\n\n\t\t\tLen = string:len(Tokens),%获取一个字符长度\n\t\t\tif  Len =:= 0 ->\n\t\t\t\t\tio:format(\" end to read ~n\"),\n\t\t\t\t\tfile:close(Value),\n\t\t\t\t\tReturnList;\n\t\t\t\tLen =/= 0 ->\n\t\t\t\t\t%对一行的数据进行处理\n\t\t\t\t\tio:format(\" the line Value ~p~n\",[OneLine]),\n\t\t\t\t\t%<khxm><name>姓名</name><value>123</value></khxm>\n\t\t\t\t\t%this.hqzhxx_ccsz_name = body['hqzhxx'][\"ccsz\"]['name']  or \"\";--持仓市值\n\t\t\t\t\t%%取出列表对应个数的值\n\t\t\t\t\tTokens_1 = lists:nth(1,Tokens),%\n\t\t\t\t\tTokens_2 = lists:nth(2,Tokens),%name\n\t\t\t\t\tTokens_3 = lists:nth(3,Tokens),%注解\n\t\t\t\t\tTokens_5 = lists:nth(5,Tokens),%value\n\n\t\t\t\t\t%对字符串进行拼接\n\t\t\t\t\tBB = \"this.\" ++ Tokens_1 ++ \"_\" ++ Tokens_2,\n\t\t\t\t\tBB2 = \"this.\" ++ Tokens_1 ++ \"_\" ++ Tokens_5,\n\t\t\t\t\tCC  = \"body['\" ++ Tokens_1 ++\"']['\" ++Tokens_2++ \"']\",\n\t\t\t\t\tCC2  = \"body['\" ++ Tokens_1 ++\"']['\" ++Tokens_5++ \"']\",\n\t\t\t\t\tDD = \" or '';--\" ++Tokens_3,\n\t\t\t\t\tEE = BB ++ \" = \" ++ CC ++ DD ++ \"\\n\",\n\t\t\t\t\tEE2 = BB2 ++ \" = \" ++ CC2 ++ DD ++ \"\\n\",\n\n\t\t\t\t\tGG =string:concat(EE,EE2),%将两个字符串列表拼接\n\n\t\t\t\t\t% io:format(\" the line Value BB ~p~n\",[BB]),\n\t\t\t\t\t% io:format(\" the line Value BB2 ~p~n\",[BB2]),\n\t\t\t\t\t% io:format(\" the line Value CC ~p~n\",[CC]),\n\t\t\t\t\t% io:format(\" the line Value CC2 ~p~n\",[CC2]),\n\t\t\t\t\t% io:format(\" the line Value DD ~p~n\",[DD]),\n\t\t\t\t\t% io:format(\" the line Value EE ~p~n\",[EE]),\n\t\t\t\t\t% io:format(\" the line Value EE2 ~p~n\",[EE2]),\n\t\t\t\t\tNewDic = string:concat(ReturnList,GG),\n\t\t\t\t\treadFile(Value,NewDic)\n\t\t\tend\n\tend.\n\n```\n\n在erlang shell 输入如下：\n\n```\n7> c(file_change).                              \n{ok,file_change}\n8> file_change:process(\"./txt1.txt\",\"txt3.txt\").\n==== open successed ====!\n the line Value [60,99,112,103,103,62,60,110,97,109,101,62,228,186,167,229,\n                 147,129,232,167,132,230,160,188,60,47,110,97,109,101,62,60,\n                 118,97,108,117,101,62,49,50,51,229,133,139,60,47,118,97,108,\n                 117,101,62,60,47,99,112,103,103,62,10]\n the line Value [60,103,109,115,108,62,60,110,97,109,101,62,232,180,173,228,\n                 185,176,230,149,176,233,135,143,60,47,110,97,109,101,62,60,\n                 118,97,108,117,101,62,50,51,52,228,184,170,60,47,118,97,108,\n                 117,101,62,60,47,103,109,115,108,62,10]\n the line Value [60,103,109,102,101,62,60,110,97,109,101,62,232,180,173,228,\n                 185,176,228,187,189,233,162,157,60,47,110,97,109,101,62,60,\n                 118,97,108,117,101,62,51,52,53,229,133,139,60,47,118,97,108,\n                 117,101,62,60,47,103,109,102,101,62]\nacrss the file end! \nfile_value------[116,104,105,115,46,99,112,103,103,95,110,97,109,101,32,61,32,\n                 98,111,100,121,91,39,99,112,103,103,39,93,91,39,110,97,109,\n                 101,39,93,32,111,114,32,39,39,59,45,45,228,186,167,229,147,\n                 129,232,167,132,230,160,188,10,116,104,105,115,46,99,112,103,\n                 103,95,118,97,108,117,101,32,61,32,98,111,100,121,91,39,99,\n                 112,103,103,39,93,91,39,118,97,108,117,101,39,93,32,111,114,\n                 32,39,39,59,45,45,228,186,167,229,147,129,232,167,132,230,\n                 160,188,10,116,104,105,115,46,103,109,115,108,95,110,97,109,\n                 101,32,61,32,98,111,100,121,91,39,103,109,115,108,39,93,91,\n                 39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,45,232,180,\n                 173,228,185,176,230,149,176,233,135,143,10,116,104,105,115,\n                 46,103,109,115,108,95,118,97,108,117,101,32,61,32,98,111,100,\n                 121,91,39,103,109,115,108,39,93,91,39,118,97,108,117,101,39,\n                 93,32,111,114,32,39,39,59,45,45,232,180,173,228,185,176,230,\n                 149,176,233,135,143,10,116,104,105,115,46,103,109,102,101,95,\n                 110,97,109,101,32,61,32,98,111,100,121,91,39,103,109,102,101,\n                 39,93,91,39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,\n                 45,232,180,173,228,185,176,228,187,189,233,162,157,10,116,\n                 104,105,115,46,103,109,102,101,95,118,97,108,117,101,32,61,\n                 32,98,111,100,121,91,39,103,109,102,101,39,93,91,39,118,97,\n                 108,117,101,39,93,32,111,114,32,39,39,59,45,45,232,180,173,\n                 228,185,176,228,187,189,233,162,157,10] \n==== end ===!\nok\n9> \n```\n\n注：本示例txt1.txt 和txt3.txt 都在file_change.erl同级目录\n\n\n","source":"_posts/erlang_do1.md","raw":"---\ntitle: erlang-实战-对文件内容进行处理\ndate:  2018-06-26 14:27:25\ntags: [erlang]\ncategories: 张永枫\ndescription: 对文件进行处理,将 xml报文格式的报文转为lua 去取值\n---\n\n示例为：对文件进行处理\n将 xml报文格式的报文转为lua 去取值\n如由 \n\n```\n<khxm><name>姓名</name><value>123</value></khxm>\n```\n 转为 \n \n```\nthis.hqzhxx_ccsz_name = body['hqzhxx'][\"ccsz\"]['name']  or \"\";--持仓市值\n```\ntxt1.txt文件内容如下：\n\n```\n<cpgg><name>产品规格</name><value>123克</value></cpgg>\n<gmsl><name>购买数量</name><value>234个</value></gmsl>\n<gmfe><name>购买份额</name><value>345克</value></gmfe>\n```\n转换后要的效果如下：\n\n```\nthis.cpgg_name = body['cpgg']['name'] or '';--产品规格\nthis.cpgg_value = body['cpgg']['value'] or '';--产品规格\nthis.gmsl_name = body['gmsl']['name'] or '';--购买数量\nthis.gmsl_value = body['gmsl']['value'] or '';--购买数量\nthis.gmfe_name = body['gmfe']['name'] or '';--购买份额\nthis.gmfe_value = body['gmfe']['value'] or '';--购买份额\n```\n\nerl处理文件(file_change.erl)代码如下：\n\n```\n-module(file_change).\n-export([process/2]).\n\n%对文件进行处理\n%将 xml报文格式的报文转为lua 去取值\n%如由 <khxm><name>姓名</name><value>123</value></khxm> 转为 \n%this.hqzhxx_ccsz_name = body['hqzhxx'][\"ccsz\"]['name']  or \"\";--持仓市值\n\nprocess(FileIn, FileOut)->\n\t{Status,Value} = file:open(FileIn,read),\n\tif Status =:= ok ->\n\t\t\tio:format(\"==== open successed ====!~n\"),\n\t\t\tTokens = readFile(Value),%%读取文件并处理\n\t\t\tio:format(\"file_value------~p ~n\",[Tokens]),\n\t\t\tfile:write_file(\"./\"++FileOut,[Tokens]),%%写文件\n\t\t\tio:format(\"==== end ===!~n\");\n\t   \tStatus =/= ok ->\n\t\t\tio:format(\"open file error!\")\n\tend.\n\t\nreadFile(Value) ->\n\treadFile(Value,[]).\n\nreadFile(Value,ReturnList) ->\n\tOneLine = io:get_line(Value,\"\"),%一行一行读取文件\n\tif \n\t\tOneLine =:= eof -> %文件末尾标记 文件结束,关闭文件\n\t\t\tio:format(\"acrss the file end! ~n\"),\n\t\t\tfile:close(Value),\n\t\t\tReturnList;\n\t\tOneLine =/= eof ->\n\t\t\tTokens = string:tokens(OneLine,\"< > /> \\n\"),% 使用多个分隔符把字符串分割\n\n\t\t\tLen = string:len(Tokens),%获取一个字符长度\n\t\t\tif  Len =:= 0 ->\n\t\t\t\t\tio:format(\" end to read ~n\"),\n\t\t\t\t\tfile:close(Value),\n\t\t\t\t\tReturnList;\n\t\t\t\tLen =/= 0 ->\n\t\t\t\t\t%对一行的数据进行处理\n\t\t\t\t\tio:format(\" the line Value ~p~n\",[OneLine]),\n\t\t\t\t\t%<khxm><name>姓名</name><value>123</value></khxm>\n\t\t\t\t\t%this.hqzhxx_ccsz_name = body['hqzhxx'][\"ccsz\"]['name']  or \"\";--持仓市值\n\t\t\t\t\t%%取出列表对应个数的值\n\t\t\t\t\tTokens_1 = lists:nth(1,Tokens),%\n\t\t\t\t\tTokens_2 = lists:nth(2,Tokens),%name\n\t\t\t\t\tTokens_3 = lists:nth(3,Tokens),%注解\n\t\t\t\t\tTokens_5 = lists:nth(5,Tokens),%value\n\n\t\t\t\t\t%对字符串进行拼接\n\t\t\t\t\tBB = \"this.\" ++ Tokens_1 ++ \"_\" ++ Tokens_2,\n\t\t\t\t\tBB2 = \"this.\" ++ Tokens_1 ++ \"_\" ++ Tokens_5,\n\t\t\t\t\tCC  = \"body['\" ++ Tokens_1 ++\"']['\" ++Tokens_2++ \"']\",\n\t\t\t\t\tCC2  = \"body['\" ++ Tokens_1 ++\"']['\" ++Tokens_5++ \"']\",\n\t\t\t\t\tDD = \" or '';--\" ++Tokens_3,\n\t\t\t\t\tEE = BB ++ \" = \" ++ CC ++ DD ++ \"\\n\",\n\t\t\t\t\tEE2 = BB2 ++ \" = \" ++ CC2 ++ DD ++ \"\\n\",\n\n\t\t\t\t\tGG =string:concat(EE,EE2),%将两个字符串列表拼接\n\n\t\t\t\t\t% io:format(\" the line Value BB ~p~n\",[BB]),\n\t\t\t\t\t% io:format(\" the line Value BB2 ~p~n\",[BB2]),\n\t\t\t\t\t% io:format(\" the line Value CC ~p~n\",[CC]),\n\t\t\t\t\t% io:format(\" the line Value CC2 ~p~n\",[CC2]),\n\t\t\t\t\t% io:format(\" the line Value DD ~p~n\",[DD]),\n\t\t\t\t\t% io:format(\" the line Value EE ~p~n\",[EE]),\n\t\t\t\t\t% io:format(\" the line Value EE2 ~p~n\",[EE2]),\n\t\t\t\t\tNewDic = string:concat(ReturnList,GG),\n\t\t\t\t\treadFile(Value,NewDic)\n\t\t\tend\n\tend.\n\n```\n\n在erlang shell 输入如下：\n\n```\n7> c(file_change).                              \n{ok,file_change}\n8> file_change:process(\"./txt1.txt\",\"txt3.txt\").\n==== open successed ====!\n the line Value [60,99,112,103,103,62,60,110,97,109,101,62,228,186,167,229,\n                 147,129,232,167,132,230,160,188,60,47,110,97,109,101,62,60,\n                 118,97,108,117,101,62,49,50,51,229,133,139,60,47,118,97,108,\n                 117,101,62,60,47,99,112,103,103,62,10]\n the line Value [60,103,109,115,108,62,60,110,97,109,101,62,232,180,173,228,\n                 185,176,230,149,176,233,135,143,60,47,110,97,109,101,62,60,\n                 118,97,108,117,101,62,50,51,52,228,184,170,60,47,118,97,108,\n                 117,101,62,60,47,103,109,115,108,62,10]\n the line Value [60,103,109,102,101,62,60,110,97,109,101,62,232,180,173,228,\n                 185,176,228,187,189,233,162,157,60,47,110,97,109,101,62,60,\n                 118,97,108,117,101,62,51,52,53,229,133,139,60,47,118,97,108,\n                 117,101,62,60,47,103,109,102,101,62]\nacrss the file end! \nfile_value------[116,104,105,115,46,99,112,103,103,95,110,97,109,101,32,61,32,\n                 98,111,100,121,91,39,99,112,103,103,39,93,91,39,110,97,109,\n                 101,39,93,32,111,114,32,39,39,59,45,45,228,186,167,229,147,\n                 129,232,167,132,230,160,188,10,116,104,105,115,46,99,112,103,\n                 103,95,118,97,108,117,101,32,61,32,98,111,100,121,91,39,99,\n                 112,103,103,39,93,91,39,118,97,108,117,101,39,93,32,111,114,\n                 32,39,39,59,45,45,228,186,167,229,147,129,232,167,132,230,\n                 160,188,10,116,104,105,115,46,103,109,115,108,95,110,97,109,\n                 101,32,61,32,98,111,100,121,91,39,103,109,115,108,39,93,91,\n                 39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,45,232,180,\n                 173,228,185,176,230,149,176,233,135,143,10,116,104,105,115,\n                 46,103,109,115,108,95,118,97,108,117,101,32,61,32,98,111,100,\n                 121,91,39,103,109,115,108,39,93,91,39,118,97,108,117,101,39,\n                 93,32,111,114,32,39,39,59,45,45,232,180,173,228,185,176,230,\n                 149,176,233,135,143,10,116,104,105,115,46,103,109,102,101,95,\n                 110,97,109,101,32,61,32,98,111,100,121,91,39,103,109,102,101,\n                 39,93,91,39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,\n                 45,232,180,173,228,185,176,228,187,189,233,162,157,10,116,\n                 104,105,115,46,103,109,102,101,95,118,97,108,117,101,32,61,\n                 32,98,111,100,121,91,39,103,109,102,101,39,93,91,39,118,97,\n                 108,117,101,39,93,32,111,114,32,39,39,59,45,45,232,180,173,\n                 228,185,176,228,187,189,233,162,157,10] \n==== end ===!\nok\n9> \n```\n\n注：本示例txt1.txt 和txt3.txt 都在file_change.erl同级目录\n\n\n","slug":"erlang_do1","published":1,"updated":"2019-05-07T02:19:37.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowlx000cp7sa8xcegnfg","content":"<p>示例为：对文件进行处理<br>将 xml报文格式的报文转为lua 去取值<br>如由 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;khxm&gt;&lt;name&gt;姓名&lt;/name&gt;&lt;value&gt;123&lt;/value&gt;&lt;/khxm&gt;</span><br></pre></td></tr></table></figure>\n<p> 转为 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.hqzhxx_ccsz_name = body[&apos;hqzhxx&apos;][&quot;ccsz&quot;][&apos;name&apos;]  or &quot;&quot;;--持仓市值</span><br></pre></td></tr></table></figure>\n<p>txt1.txt文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cpgg&gt;&lt;name&gt;产品规格&lt;/name&gt;&lt;value&gt;123克&lt;/value&gt;&lt;/cpgg&gt;</span><br><span class=\"line\">&lt;gmsl&gt;&lt;name&gt;购买数量&lt;/name&gt;&lt;value&gt;234个&lt;/value&gt;&lt;/gmsl&gt;</span><br><span class=\"line\">&lt;gmfe&gt;&lt;name&gt;购买份额&lt;/name&gt;&lt;value&gt;345克&lt;/value&gt;&lt;/gmfe&gt;</span><br></pre></td></tr></table></figure>\n<p>转换后要的效果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.cpgg_name = body[&apos;cpgg&apos;][&apos;name&apos;] or &apos;&apos;;--产品规格</span><br><span class=\"line\">this.cpgg_value = body[&apos;cpgg&apos;][&apos;value&apos;] or &apos;&apos;;--产品规格</span><br><span class=\"line\">this.gmsl_name = body[&apos;gmsl&apos;][&apos;name&apos;] or &apos;&apos;;--购买数量</span><br><span class=\"line\">this.gmsl_value = body[&apos;gmsl&apos;][&apos;value&apos;] or &apos;&apos;;--购买数量</span><br><span class=\"line\">this.gmfe_name = body[&apos;gmfe&apos;][&apos;name&apos;] or &apos;&apos;;--购买份额</span><br><span class=\"line\">this.gmfe_value = body[&apos;gmfe&apos;][&apos;value&apos;] or &apos;&apos;;--购买份额</span><br></pre></td></tr></table></figure>\n<p>erl处理文件(file_change.erl)代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(file_change).</span><br><span class=\"line\">-export([process/2]).</span><br><span class=\"line\"></span><br><span class=\"line\">%对文件进行处理</span><br><span class=\"line\">%将 xml报文格式的报文转为lua 去取值</span><br><span class=\"line\">%如由 &lt;khxm&gt;&lt;name&gt;姓名&lt;/name&gt;&lt;value&gt;123&lt;/value&gt;&lt;/khxm&gt; 转为 </span><br><span class=\"line\">%this.hqzhxx_ccsz_name = body[&apos;hqzhxx&apos;][&quot;ccsz&quot;][&apos;name&apos;]  or &quot;&quot;;--持仓市值</span><br><span class=\"line\"></span><br><span class=\"line\">process(FileIn, FileOut)-&gt;</span><br><span class=\"line\">\t&#123;Status,Value&#125; = file:open(FileIn,read),</span><br><span class=\"line\">\tif Status =:= ok -&gt;</span><br><span class=\"line\">\t\t\tio:format(&quot;==== open successed ====!~n&quot;),</span><br><span class=\"line\">\t\t\tTokens = readFile(Value),%%读取文件并处理</span><br><span class=\"line\">\t\t\tio:format(&quot;file_value------~p ~n&quot;,[Tokens]),</span><br><span class=\"line\">\t\t\tfile:write_file(&quot;./&quot;++FileOut,[Tokens]),%%写文件</span><br><span class=\"line\">\t\t\tio:format(&quot;==== end ===!~n&quot;);</span><br><span class=\"line\">\t   \tStatus =/= ok -&gt;</span><br><span class=\"line\">\t\t\tio:format(&quot;open file error!&quot;)</span><br><span class=\"line\">\tend.</span><br><span class=\"line\">\t</span><br><span class=\"line\">readFile(Value) -&gt;</span><br><span class=\"line\">\treadFile(Value,[]).</span><br><span class=\"line\"></span><br><span class=\"line\">readFile(Value,ReturnList) -&gt;</span><br><span class=\"line\">\tOneLine = io:get_line(Value,&quot;&quot;),%一行一行读取文件</span><br><span class=\"line\">\tif </span><br><span class=\"line\">\t\tOneLine =:= eof -&gt; %文件末尾标记 文件结束,关闭文件</span><br><span class=\"line\">\t\t\tio:format(&quot;acrss the file end! ~n&quot;),</span><br><span class=\"line\">\t\t\tfile:close(Value),</span><br><span class=\"line\">\t\t\tReturnList;</span><br><span class=\"line\">\t\tOneLine =/= eof -&gt;</span><br><span class=\"line\">\t\t\tTokens = string:tokens(OneLine,&quot;&lt; &gt; /&gt; \\n&quot;),% 使用多个分隔符把字符串分割</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tLen = string:len(Tokens),%获取一个字符长度</span><br><span class=\"line\">\t\t\tif  Len =:= 0 -&gt;</span><br><span class=\"line\">\t\t\t\t\tio:format(&quot; end to read ~n&quot;),</span><br><span class=\"line\">\t\t\t\t\tfile:close(Value),</span><br><span class=\"line\">\t\t\t\t\tReturnList;</span><br><span class=\"line\">\t\t\t\tLen =/= 0 -&gt;</span><br><span class=\"line\">\t\t\t\t\t%对一行的数据进行处理</span><br><span class=\"line\">\t\t\t\t\tio:format(&quot; the line Value ~p~n&quot;,[OneLine]),</span><br><span class=\"line\">\t\t\t\t\t%&lt;khxm&gt;&lt;name&gt;姓名&lt;/name&gt;&lt;value&gt;123&lt;/value&gt;&lt;/khxm&gt;</span><br><span class=\"line\">\t\t\t\t\t%this.hqzhxx_ccsz_name = body[&apos;hqzhxx&apos;][&quot;ccsz&quot;][&apos;name&apos;]  or &quot;&quot;;--持仓市值</span><br><span class=\"line\">\t\t\t\t\t%%取出列表对应个数的值</span><br><span class=\"line\">\t\t\t\t\tTokens_1 = lists:nth(1,Tokens),%</span><br><span class=\"line\">\t\t\t\t\tTokens_2 = lists:nth(2,Tokens),%name</span><br><span class=\"line\">\t\t\t\t\tTokens_3 = lists:nth(3,Tokens),%注解</span><br><span class=\"line\">\t\t\t\t\tTokens_5 = lists:nth(5,Tokens),%value</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t%对字符串进行拼接</span><br><span class=\"line\">\t\t\t\t\tBB = &quot;this.&quot; ++ Tokens_1 ++ &quot;_&quot; ++ Tokens_2,</span><br><span class=\"line\">\t\t\t\t\tBB2 = &quot;this.&quot; ++ Tokens_1 ++ &quot;_&quot; ++ Tokens_5,</span><br><span class=\"line\">\t\t\t\t\tCC  = &quot;body[&apos;&quot; ++ Tokens_1 ++&quot;&apos;][&apos;&quot; ++Tokens_2++ &quot;&apos;]&quot;,</span><br><span class=\"line\">\t\t\t\t\tCC2  = &quot;body[&apos;&quot; ++ Tokens_1 ++&quot;&apos;][&apos;&quot; ++Tokens_5++ &quot;&apos;]&quot;,</span><br><span class=\"line\">\t\t\t\t\tDD = &quot; or &apos;&apos;;--&quot; ++Tokens_3,</span><br><span class=\"line\">\t\t\t\t\tEE = BB ++ &quot; = &quot; ++ CC ++ DD ++ &quot;\\n&quot;,</span><br><span class=\"line\">\t\t\t\t\tEE2 = BB2 ++ &quot; = &quot; ++ CC2 ++ DD ++ &quot;\\n&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tGG =string:concat(EE,EE2),%将两个字符串列表拼接</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value BB ~p~n&quot;,[BB]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value BB2 ~p~n&quot;,[BB2]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value CC ~p~n&quot;,[CC]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value CC2 ~p~n&quot;,[CC2]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value DD ~p~n&quot;,[DD]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value EE ~p~n&quot;,[EE]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value EE2 ~p~n&quot;,[EE2]),</span><br><span class=\"line\">\t\t\t\t\tNewDic = string:concat(ReturnList,GG),</span><br><span class=\"line\">\t\t\t\t\treadFile(Value,NewDic)</span><br><span class=\"line\">\t\t\tend</span><br><span class=\"line\">\tend.</span><br></pre></td></tr></table></figure>\n<p>在erlang shell 输入如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7&gt; c(file_change).                              </span><br><span class=\"line\">&#123;ok,file_change&#125;</span><br><span class=\"line\">8&gt; file_change:process(&quot;./txt1.txt&quot;,&quot;txt3.txt&quot;).</span><br><span class=\"line\">==== open successed ====!</span><br><span class=\"line\"> the line Value [60,99,112,103,103,62,60,110,97,109,101,62,228,186,167,229,</span><br><span class=\"line\">                 147,129,232,167,132,230,160,188,60,47,110,97,109,101,62,60,</span><br><span class=\"line\">                 118,97,108,117,101,62,49,50,51,229,133,139,60,47,118,97,108,</span><br><span class=\"line\">                 117,101,62,60,47,99,112,103,103,62,10]</span><br><span class=\"line\"> the line Value [60,103,109,115,108,62,60,110,97,109,101,62,232,180,173,228,</span><br><span class=\"line\">                 185,176,230,149,176,233,135,143,60,47,110,97,109,101,62,60,</span><br><span class=\"line\">                 118,97,108,117,101,62,50,51,52,228,184,170,60,47,118,97,108,</span><br><span class=\"line\">                 117,101,62,60,47,103,109,115,108,62,10]</span><br><span class=\"line\"> the line Value [60,103,109,102,101,62,60,110,97,109,101,62,232,180,173,228,</span><br><span class=\"line\">                 185,176,228,187,189,233,162,157,60,47,110,97,109,101,62,60,</span><br><span class=\"line\">                 118,97,108,117,101,62,51,52,53,229,133,139,60,47,118,97,108,</span><br><span class=\"line\">                 117,101,62,60,47,103,109,102,101,62]</span><br><span class=\"line\">acrss the file end! </span><br><span class=\"line\">file_value------[116,104,105,115,46,99,112,103,103,95,110,97,109,101,32,61,32,</span><br><span class=\"line\">                 98,111,100,121,91,39,99,112,103,103,39,93,91,39,110,97,109,</span><br><span class=\"line\">                 101,39,93,32,111,114,32,39,39,59,45,45,228,186,167,229,147,</span><br><span class=\"line\">                 129,232,167,132,230,160,188,10,116,104,105,115,46,99,112,103,</span><br><span class=\"line\">                 103,95,118,97,108,117,101,32,61,32,98,111,100,121,91,39,99,</span><br><span class=\"line\">                 112,103,103,39,93,91,39,118,97,108,117,101,39,93,32,111,114,</span><br><span class=\"line\">                 32,39,39,59,45,45,228,186,167,229,147,129,232,167,132,230,</span><br><span class=\"line\">                 160,188,10,116,104,105,115,46,103,109,115,108,95,110,97,109,</span><br><span class=\"line\">                 101,32,61,32,98,111,100,121,91,39,103,109,115,108,39,93,91,</span><br><span class=\"line\">                 39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,45,232,180,</span><br><span class=\"line\">                 173,228,185,176,230,149,176,233,135,143,10,116,104,105,115,</span><br><span class=\"line\">                 46,103,109,115,108,95,118,97,108,117,101,32,61,32,98,111,100,</span><br><span class=\"line\">                 121,91,39,103,109,115,108,39,93,91,39,118,97,108,117,101,39,</span><br><span class=\"line\">                 93,32,111,114,32,39,39,59,45,45,232,180,173,228,185,176,230,</span><br><span class=\"line\">                 149,176,233,135,143,10,116,104,105,115,46,103,109,102,101,95,</span><br><span class=\"line\">                 110,97,109,101,32,61,32,98,111,100,121,91,39,103,109,102,101,</span><br><span class=\"line\">                 39,93,91,39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,</span><br><span class=\"line\">                 45,232,180,173,228,185,176,228,187,189,233,162,157,10,116,</span><br><span class=\"line\">                 104,105,115,46,103,109,102,101,95,118,97,108,117,101,32,61,</span><br><span class=\"line\">                 32,98,111,100,121,91,39,103,109,102,101,39,93,91,39,118,97,</span><br><span class=\"line\">                 108,117,101,39,93,32,111,114,32,39,39,59,45,45,232,180,173,</span><br><span class=\"line\">                 228,185,176,228,187,189,233,162,157,10] </span><br><span class=\"line\">==== end ===!</span><br><span class=\"line\">ok</span><br><span class=\"line\">9&gt;</span><br></pre></td></tr></table></figure>\n<p>注：本示例txt1.txt 和txt3.txt 都在file_change.erl同级目录</p>\n","site":{"data":{}},"excerpt":"","more":"<p>示例为：对文件进行处理<br>将 xml报文格式的报文转为lua 去取值<br>如由 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;khxm&gt;&lt;name&gt;姓名&lt;/name&gt;&lt;value&gt;123&lt;/value&gt;&lt;/khxm&gt;</span><br></pre></td></tr></table></figure>\n<p> 转为 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.hqzhxx_ccsz_name = body[&apos;hqzhxx&apos;][&quot;ccsz&quot;][&apos;name&apos;]  or &quot;&quot;;--持仓市值</span><br></pre></td></tr></table></figure>\n<p>txt1.txt文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cpgg&gt;&lt;name&gt;产品规格&lt;/name&gt;&lt;value&gt;123克&lt;/value&gt;&lt;/cpgg&gt;</span><br><span class=\"line\">&lt;gmsl&gt;&lt;name&gt;购买数量&lt;/name&gt;&lt;value&gt;234个&lt;/value&gt;&lt;/gmsl&gt;</span><br><span class=\"line\">&lt;gmfe&gt;&lt;name&gt;购买份额&lt;/name&gt;&lt;value&gt;345克&lt;/value&gt;&lt;/gmfe&gt;</span><br></pre></td></tr></table></figure>\n<p>转换后要的效果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.cpgg_name = body[&apos;cpgg&apos;][&apos;name&apos;] or &apos;&apos;;--产品规格</span><br><span class=\"line\">this.cpgg_value = body[&apos;cpgg&apos;][&apos;value&apos;] or &apos;&apos;;--产品规格</span><br><span class=\"line\">this.gmsl_name = body[&apos;gmsl&apos;][&apos;name&apos;] or &apos;&apos;;--购买数量</span><br><span class=\"line\">this.gmsl_value = body[&apos;gmsl&apos;][&apos;value&apos;] or &apos;&apos;;--购买数量</span><br><span class=\"line\">this.gmfe_name = body[&apos;gmfe&apos;][&apos;name&apos;] or &apos;&apos;;--购买份额</span><br><span class=\"line\">this.gmfe_value = body[&apos;gmfe&apos;][&apos;value&apos;] or &apos;&apos;;--购买份额</span><br></pre></td></tr></table></figure>\n<p>erl处理文件(file_change.erl)代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(file_change).</span><br><span class=\"line\">-export([process/2]).</span><br><span class=\"line\"></span><br><span class=\"line\">%对文件进行处理</span><br><span class=\"line\">%将 xml报文格式的报文转为lua 去取值</span><br><span class=\"line\">%如由 &lt;khxm&gt;&lt;name&gt;姓名&lt;/name&gt;&lt;value&gt;123&lt;/value&gt;&lt;/khxm&gt; 转为 </span><br><span class=\"line\">%this.hqzhxx_ccsz_name = body[&apos;hqzhxx&apos;][&quot;ccsz&quot;][&apos;name&apos;]  or &quot;&quot;;--持仓市值</span><br><span class=\"line\"></span><br><span class=\"line\">process(FileIn, FileOut)-&gt;</span><br><span class=\"line\">\t&#123;Status,Value&#125; = file:open(FileIn,read),</span><br><span class=\"line\">\tif Status =:= ok -&gt;</span><br><span class=\"line\">\t\t\tio:format(&quot;==== open successed ====!~n&quot;),</span><br><span class=\"line\">\t\t\tTokens = readFile(Value),%%读取文件并处理</span><br><span class=\"line\">\t\t\tio:format(&quot;file_value------~p ~n&quot;,[Tokens]),</span><br><span class=\"line\">\t\t\tfile:write_file(&quot;./&quot;++FileOut,[Tokens]),%%写文件</span><br><span class=\"line\">\t\t\tio:format(&quot;==== end ===!~n&quot;);</span><br><span class=\"line\">\t   \tStatus =/= ok -&gt;</span><br><span class=\"line\">\t\t\tio:format(&quot;open file error!&quot;)</span><br><span class=\"line\">\tend.</span><br><span class=\"line\">\t</span><br><span class=\"line\">readFile(Value) -&gt;</span><br><span class=\"line\">\treadFile(Value,[]).</span><br><span class=\"line\"></span><br><span class=\"line\">readFile(Value,ReturnList) -&gt;</span><br><span class=\"line\">\tOneLine = io:get_line(Value,&quot;&quot;),%一行一行读取文件</span><br><span class=\"line\">\tif </span><br><span class=\"line\">\t\tOneLine =:= eof -&gt; %文件末尾标记 文件结束,关闭文件</span><br><span class=\"line\">\t\t\tio:format(&quot;acrss the file end! ~n&quot;),</span><br><span class=\"line\">\t\t\tfile:close(Value),</span><br><span class=\"line\">\t\t\tReturnList;</span><br><span class=\"line\">\t\tOneLine =/= eof -&gt;</span><br><span class=\"line\">\t\t\tTokens = string:tokens(OneLine,&quot;&lt; &gt; /&gt; \\n&quot;),% 使用多个分隔符把字符串分割</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tLen = string:len(Tokens),%获取一个字符长度</span><br><span class=\"line\">\t\t\tif  Len =:= 0 -&gt;</span><br><span class=\"line\">\t\t\t\t\tio:format(&quot; end to read ~n&quot;),</span><br><span class=\"line\">\t\t\t\t\tfile:close(Value),</span><br><span class=\"line\">\t\t\t\t\tReturnList;</span><br><span class=\"line\">\t\t\t\tLen =/= 0 -&gt;</span><br><span class=\"line\">\t\t\t\t\t%对一行的数据进行处理</span><br><span class=\"line\">\t\t\t\t\tio:format(&quot; the line Value ~p~n&quot;,[OneLine]),</span><br><span class=\"line\">\t\t\t\t\t%&lt;khxm&gt;&lt;name&gt;姓名&lt;/name&gt;&lt;value&gt;123&lt;/value&gt;&lt;/khxm&gt;</span><br><span class=\"line\">\t\t\t\t\t%this.hqzhxx_ccsz_name = body[&apos;hqzhxx&apos;][&quot;ccsz&quot;][&apos;name&apos;]  or &quot;&quot;;--持仓市值</span><br><span class=\"line\">\t\t\t\t\t%%取出列表对应个数的值</span><br><span class=\"line\">\t\t\t\t\tTokens_1 = lists:nth(1,Tokens),%</span><br><span class=\"line\">\t\t\t\t\tTokens_2 = lists:nth(2,Tokens),%name</span><br><span class=\"line\">\t\t\t\t\tTokens_3 = lists:nth(3,Tokens),%注解</span><br><span class=\"line\">\t\t\t\t\tTokens_5 = lists:nth(5,Tokens),%value</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t%对字符串进行拼接</span><br><span class=\"line\">\t\t\t\t\tBB = &quot;this.&quot; ++ Tokens_1 ++ &quot;_&quot; ++ Tokens_2,</span><br><span class=\"line\">\t\t\t\t\tBB2 = &quot;this.&quot; ++ Tokens_1 ++ &quot;_&quot; ++ Tokens_5,</span><br><span class=\"line\">\t\t\t\t\tCC  = &quot;body[&apos;&quot; ++ Tokens_1 ++&quot;&apos;][&apos;&quot; ++Tokens_2++ &quot;&apos;]&quot;,</span><br><span class=\"line\">\t\t\t\t\tCC2  = &quot;body[&apos;&quot; ++ Tokens_1 ++&quot;&apos;][&apos;&quot; ++Tokens_5++ &quot;&apos;]&quot;,</span><br><span class=\"line\">\t\t\t\t\tDD = &quot; or &apos;&apos;;--&quot; ++Tokens_3,</span><br><span class=\"line\">\t\t\t\t\tEE = BB ++ &quot; = &quot; ++ CC ++ DD ++ &quot;\\n&quot;,</span><br><span class=\"line\">\t\t\t\t\tEE2 = BB2 ++ &quot; = &quot; ++ CC2 ++ DD ++ &quot;\\n&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tGG =string:concat(EE,EE2),%将两个字符串列表拼接</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value BB ~p~n&quot;,[BB]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value BB2 ~p~n&quot;,[BB2]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value CC ~p~n&quot;,[CC]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value CC2 ~p~n&quot;,[CC2]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value DD ~p~n&quot;,[DD]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value EE ~p~n&quot;,[EE]),</span><br><span class=\"line\">\t\t\t\t\t% io:format(&quot; the line Value EE2 ~p~n&quot;,[EE2]),</span><br><span class=\"line\">\t\t\t\t\tNewDic = string:concat(ReturnList,GG),</span><br><span class=\"line\">\t\t\t\t\treadFile(Value,NewDic)</span><br><span class=\"line\">\t\t\tend</span><br><span class=\"line\">\tend.</span><br></pre></td></tr></table></figure>\n<p>在erlang shell 输入如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7&gt; c(file_change).                              </span><br><span class=\"line\">&#123;ok,file_change&#125;</span><br><span class=\"line\">8&gt; file_change:process(&quot;./txt1.txt&quot;,&quot;txt3.txt&quot;).</span><br><span class=\"line\">==== open successed ====!</span><br><span class=\"line\"> the line Value [60,99,112,103,103,62,60,110,97,109,101,62,228,186,167,229,</span><br><span class=\"line\">                 147,129,232,167,132,230,160,188,60,47,110,97,109,101,62,60,</span><br><span class=\"line\">                 118,97,108,117,101,62,49,50,51,229,133,139,60,47,118,97,108,</span><br><span class=\"line\">                 117,101,62,60,47,99,112,103,103,62,10]</span><br><span class=\"line\"> the line Value [60,103,109,115,108,62,60,110,97,109,101,62,232,180,173,228,</span><br><span class=\"line\">                 185,176,230,149,176,233,135,143,60,47,110,97,109,101,62,60,</span><br><span class=\"line\">                 118,97,108,117,101,62,50,51,52,228,184,170,60,47,118,97,108,</span><br><span class=\"line\">                 117,101,62,60,47,103,109,115,108,62,10]</span><br><span class=\"line\"> the line Value [60,103,109,102,101,62,60,110,97,109,101,62,232,180,173,228,</span><br><span class=\"line\">                 185,176,228,187,189,233,162,157,60,47,110,97,109,101,62,60,</span><br><span class=\"line\">                 118,97,108,117,101,62,51,52,53,229,133,139,60,47,118,97,108,</span><br><span class=\"line\">                 117,101,62,60,47,103,109,102,101,62]</span><br><span class=\"line\">acrss the file end! </span><br><span class=\"line\">file_value------[116,104,105,115,46,99,112,103,103,95,110,97,109,101,32,61,32,</span><br><span class=\"line\">                 98,111,100,121,91,39,99,112,103,103,39,93,91,39,110,97,109,</span><br><span class=\"line\">                 101,39,93,32,111,114,32,39,39,59,45,45,228,186,167,229,147,</span><br><span class=\"line\">                 129,232,167,132,230,160,188,10,116,104,105,115,46,99,112,103,</span><br><span class=\"line\">                 103,95,118,97,108,117,101,32,61,32,98,111,100,121,91,39,99,</span><br><span class=\"line\">                 112,103,103,39,93,91,39,118,97,108,117,101,39,93,32,111,114,</span><br><span class=\"line\">                 32,39,39,59,45,45,228,186,167,229,147,129,232,167,132,230,</span><br><span class=\"line\">                 160,188,10,116,104,105,115,46,103,109,115,108,95,110,97,109,</span><br><span class=\"line\">                 101,32,61,32,98,111,100,121,91,39,103,109,115,108,39,93,91,</span><br><span class=\"line\">                 39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,45,232,180,</span><br><span class=\"line\">                 173,228,185,176,230,149,176,233,135,143,10,116,104,105,115,</span><br><span class=\"line\">                 46,103,109,115,108,95,118,97,108,117,101,32,61,32,98,111,100,</span><br><span class=\"line\">                 121,91,39,103,109,115,108,39,93,91,39,118,97,108,117,101,39,</span><br><span class=\"line\">                 93,32,111,114,32,39,39,59,45,45,232,180,173,228,185,176,230,</span><br><span class=\"line\">                 149,176,233,135,143,10,116,104,105,115,46,103,109,102,101,95,</span><br><span class=\"line\">                 110,97,109,101,32,61,32,98,111,100,121,91,39,103,109,102,101,</span><br><span class=\"line\">                 39,93,91,39,110,97,109,101,39,93,32,111,114,32,39,39,59,45,</span><br><span class=\"line\">                 45,232,180,173,228,185,176,228,187,189,233,162,157,10,116,</span><br><span class=\"line\">                 104,105,115,46,103,109,102,101,95,118,97,108,117,101,32,61,</span><br><span class=\"line\">                 32,98,111,100,121,91,39,103,109,102,101,39,93,91,39,118,97,</span><br><span class=\"line\">                 108,117,101,39,93,32,111,114,32,39,39,59,45,45,232,180,173,</span><br><span class=\"line\">                 228,185,176,228,187,189,233,162,157,10] </span><br><span class=\"line\">==== end ===!</span><br><span class=\"line\">ok</span><br><span class=\"line\">9&gt;</span><br></pre></td></tr></table></figure>\n<p>注：本示例txt1.txt 和txt3.txt 都在file_change.erl同级目录</p>\n"},{"title":"javaScript_ES 6 简介","date":"2019-05-09T04:00:00.000Z","description":"javaScript_ES 6 简介","_content":"\n    ES 6 是JavaScript语言的新一代标准，加入了很多新的功能和语法。React 的项目一般都是用ES 6 语法来写的，这也是是Facebook官方推荐的方式。\n\n#### 1. let、const\n    \nlet 和 const 是ES6 中新增的两个关键字，用来声明变量，let 和 const都是块级作用域。let声明的变量只在let命令所在的代码块内有效。const声明一个只读的常量，一量声明，常量的值就不能改变。例如：\n    \n```\n// let 示例\n{\n    var a = 1;\n    let b = 2;\n}\nconsole.log(a);//1\nconsole.log(b);//ReferenceError: b is not defined.\n\n//const 示例\nconst c = 3;\nc = 4;//TypeError:Assignment to constant variable.\n```\n#### 2. 箭头函数\nES 6允许使用“箭头”（=>）定义函数。这种方式创建的函数不需要function 关键字，并且还可以省略return 关键字。同时，箭头函数内的this 指向函数定义所在的上下文对象，而不是函数执行时的上下文对象，例如：\n\n```\nvar f = a => a + 1;\n//等价于\nvar f = function(a){\n    return a + 1;\n}\n\nfunction foo(){\n    this.bar = 1;\n    this.f = (a) => a + this.bar;\n}\n\n//等价于\nfunction foo(){\n    this.bar = 1;\n    this.f = (function(a){\n        return a + this.bar\n    }).bind(this);\n}\n```\n如果箭头函数的参数多于1个或者不需要参数，就需要使用一个圆括号代表参数部分。例如：\n\n```\nvar f = () =>1;\nvaf f= (a, b) => a + b;\n```\n如果函数体内包含的语句多于一条，就需要使用大括号将函数括起来，使用return语名返回。例如：\n```\nvar f = (x,y) =>{\n    x++;\n    y--;\n    return x + y;\n}\n```\n#### 3. 模板字符串\n模板字符串是增强版的字符串，用反引号(`)标识字符串。除了可以当作普通字符串使用外，它还可以用来定义多行字符串，以及在字符串中嵌入变量，功能很强大。例如：\n```\n//普通字符串\n`React is wonderful !`\n\n//多行字符串\n`JS is wonderful 1\nReact is wonderful!`\n\n//字符串中嵌入变量\nvar name = \"React\";\n`Hello, ${name} !`;\n```\n#### 4. 解构赋值\nES 6 允许按照一定模式从数组和对象中提取，对变量进行赋值，这被称为解构。例如：\n```\n//数组解构\nlet [a,b,c] = [1,2,3];\na //1\nb //2\nc //3\n\n//对象解构\nlet name = 'Lily';\nlet age = 4;\nlet person = {name, age};\nconsole.log(person);//Object {name: \"Lily\", age: 4}\n\n//对象解构的另一种形式\nlet person = {name: \"Lily\",age: 4};\nlet {name,age} = person;\nconsole.log(name);//\"Lily\"\nconsole.log(age);//4\n\n函数的参数也可以使用解构赋值。例如:\n\n//数组参数解构\nfunction sum ([x, y]){\n    return x + y;\n}\nsum([1, 2]);//3\n\n//对象参数解构\nfunction sum ({x, y}){\n    return x + y;\n}\nsum({x:1,y:2});//3\n\n//解构同样适用于嵌套结构的数组或对象。例如：\n//嵌套结构的数组解构\n\nlet [a, [b], c] = [1, [2], 3];\na; //1\nb; //2\nc; //3\n\n//嵌套结构的对象解构\nlet {person:{name, age}, foo} = {person:{name:'Lily',age: 4},foo:\"foo\"}\nconsole.log(name);\nconsole.log(4);\nconsole.log(foo);\n```\n#### 5. rest参数\nES 6 引入rest（形式为...变量名）用于获取函数的多余参数，以代替argments 对象的使用。rest参数是一个数组，数组中的元素是多余的参数。注意，rest 参数之后不能再有其他参数 例如：\n```\nfunction languages(lang, ...types){\n    console.log(types);\n}\nlanguages(\"js\",\"java\",\"python\");//['java','python']\n```\n#### 6. 扩展运算符\n扩展运算符是三个点(...),它将一个数组转为用逗号分隔的参数序列，类似于rest参数的逆运算。例如：\n```\nfunction sum(a, b, c){\n    return a + b + c;\n}\nlet numbers = [1, 2, 3];\nsum(...numbers);//6\n\n扩展运算符还常用于合并数组以及与解构赋值结合使用，例如：\n//合并数组\nlet arr1 = ['a'];\nlet arr2 = ['b', 'c'];\nlet arr3 = ['d', 'e'];\n\n[...arr1, ...arr2, ...arr3];\n\n//与解构赋值结合\nlet [a, ...rest] = ['a', 'b', 'c'];\nrest //['b', 'c']\n扩展运算符还可以用于取出参数对象的所有可遍历属性，复制到当前对象之中。例如：\nlet bar = {a: 1, b: 2};\nlet foo = {...bar};\nfoo //Object {a: 1, b: 2};\nfoo === bar //false\n```\n#### 7. class\nES 6 引入了class(类)这个概念，新的class写法让对象原型的写法更加清晰，也更像传统的面向对象编程语言的写法。例如:\n```\n//定义一个类\nclass Person {\n    constructor(name, age){\n        this.name = name;\n        this.age = age;\n    }\n    \n    getName(){\n        return this.name;\n    }\n    \n    getAge(){\n        return this.age;\n    }\n}\n//根据类创建对象\nlet person = new('Lily', 4);\n//class 之间可以通过extends关键字实现继承，例如：\nclass Man extends Person {\n    constructor(name, age){\n        super(name, age);\n    }\n    \n    getGender(){\n        return 'male';\n    }\n}\nlet man = new Man('Jack', 20);\n\n```\n#### 8. import、export\nES 6 实现了自已的模块化标准，ES 6 模块功能主要由两个关键字构成：export 和import。export 用于规定模块对外暴露的接口，import用于引入其他模块提供的接口。例如：\n```\n// a.js 导出默认接口和普通接口\nconst foo = () => \"foo\";\nconst bar = () => \"bar\";\n\nexport default foo //导出默认接口\nexport {bar} //导出普通接口\n\n//b.js（与a.js 在同一目录下），导入a.js中的接口\n//注意默认接口和普通接口导入写法的区别\nimport foo, {bar} from './a';\nfoo(); //\"foo\"\nbar(); //\"bar\"\n```\n---\n参\b考文献：《React 进阶之路》 \n\nTHE END\n\n---","source":"_posts/javascript_es6_1.md","raw":"---\ntitle: javaScript_ES 6 简介\ndate:  2019-05-09 12:00:00\ntags: [javascript,ES6]\ncategories: 张永枫\ndescription: javaScript_ES 6 简介\n---\n\n    ES 6 是JavaScript语言的新一代标准，加入了很多新的功能和语法。React 的项目一般都是用ES 6 语法来写的，这也是是Facebook官方推荐的方式。\n\n#### 1. let、const\n    \nlet 和 const 是ES6 中新增的两个关键字，用来声明变量，let 和 const都是块级作用域。let声明的变量只在let命令所在的代码块内有效。const声明一个只读的常量，一量声明，常量的值就不能改变。例如：\n    \n```\n// let 示例\n{\n    var a = 1;\n    let b = 2;\n}\nconsole.log(a);//1\nconsole.log(b);//ReferenceError: b is not defined.\n\n//const 示例\nconst c = 3;\nc = 4;//TypeError:Assignment to constant variable.\n```\n#### 2. 箭头函数\nES 6允许使用“箭头”（=>）定义函数。这种方式创建的函数不需要function 关键字，并且还可以省略return 关键字。同时，箭头函数内的this 指向函数定义所在的上下文对象，而不是函数执行时的上下文对象，例如：\n\n```\nvar f = a => a + 1;\n//等价于\nvar f = function(a){\n    return a + 1;\n}\n\nfunction foo(){\n    this.bar = 1;\n    this.f = (a) => a + this.bar;\n}\n\n//等价于\nfunction foo(){\n    this.bar = 1;\n    this.f = (function(a){\n        return a + this.bar\n    }).bind(this);\n}\n```\n如果箭头函数的参数多于1个或者不需要参数，就需要使用一个圆括号代表参数部分。例如：\n\n```\nvar f = () =>1;\nvaf f= (a, b) => a + b;\n```\n如果函数体内包含的语句多于一条，就需要使用大括号将函数括起来，使用return语名返回。例如：\n```\nvar f = (x,y) =>{\n    x++;\n    y--;\n    return x + y;\n}\n```\n#### 3. 模板字符串\n模板字符串是增强版的字符串，用反引号(`)标识字符串。除了可以当作普通字符串使用外，它还可以用来定义多行字符串，以及在字符串中嵌入变量，功能很强大。例如：\n```\n//普通字符串\n`React is wonderful !`\n\n//多行字符串\n`JS is wonderful 1\nReact is wonderful!`\n\n//字符串中嵌入变量\nvar name = \"React\";\n`Hello, ${name} !`;\n```\n#### 4. 解构赋值\nES 6 允许按照一定模式从数组和对象中提取，对变量进行赋值，这被称为解构。例如：\n```\n//数组解构\nlet [a,b,c] = [1,2,3];\na //1\nb //2\nc //3\n\n//对象解构\nlet name = 'Lily';\nlet age = 4;\nlet person = {name, age};\nconsole.log(person);//Object {name: \"Lily\", age: 4}\n\n//对象解构的另一种形式\nlet person = {name: \"Lily\",age: 4};\nlet {name,age} = person;\nconsole.log(name);//\"Lily\"\nconsole.log(age);//4\n\n函数的参数也可以使用解构赋值。例如:\n\n//数组参数解构\nfunction sum ([x, y]){\n    return x + y;\n}\nsum([1, 2]);//3\n\n//对象参数解构\nfunction sum ({x, y}){\n    return x + y;\n}\nsum({x:1,y:2});//3\n\n//解构同样适用于嵌套结构的数组或对象。例如：\n//嵌套结构的数组解构\n\nlet [a, [b], c] = [1, [2], 3];\na; //1\nb; //2\nc; //3\n\n//嵌套结构的对象解构\nlet {person:{name, age}, foo} = {person:{name:'Lily',age: 4},foo:\"foo\"}\nconsole.log(name);\nconsole.log(4);\nconsole.log(foo);\n```\n#### 5. rest参数\nES 6 引入rest（形式为...变量名）用于获取函数的多余参数，以代替argments 对象的使用。rest参数是一个数组，数组中的元素是多余的参数。注意，rest 参数之后不能再有其他参数 例如：\n```\nfunction languages(lang, ...types){\n    console.log(types);\n}\nlanguages(\"js\",\"java\",\"python\");//['java','python']\n```\n#### 6. 扩展运算符\n扩展运算符是三个点(...),它将一个数组转为用逗号分隔的参数序列，类似于rest参数的逆运算。例如：\n```\nfunction sum(a, b, c){\n    return a + b + c;\n}\nlet numbers = [1, 2, 3];\nsum(...numbers);//6\n\n扩展运算符还常用于合并数组以及与解构赋值结合使用，例如：\n//合并数组\nlet arr1 = ['a'];\nlet arr2 = ['b', 'c'];\nlet arr3 = ['d', 'e'];\n\n[...arr1, ...arr2, ...arr3];\n\n//与解构赋值结合\nlet [a, ...rest] = ['a', 'b', 'c'];\nrest //['b', 'c']\n扩展运算符还可以用于取出参数对象的所有可遍历属性，复制到当前对象之中。例如：\nlet bar = {a: 1, b: 2};\nlet foo = {...bar};\nfoo //Object {a: 1, b: 2};\nfoo === bar //false\n```\n#### 7. class\nES 6 引入了class(类)这个概念，新的class写法让对象原型的写法更加清晰，也更像传统的面向对象编程语言的写法。例如:\n```\n//定义一个类\nclass Person {\n    constructor(name, age){\n        this.name = name;\n        this.age = age;\n    }\n    \n    getName(){\n        return this.name;\n    }\n    \n    getAge(){\n        return this.age;\n    }\n}\n//根据类创建对象\nlet person = new('Lily', 4);\n//class 之间可以通过extends关键字实现继承，例如：\nclass Man extends Person {\n    constructor(name, age){\n        super(name, age);\n    }\n    \n    getGender(){\n        return 'male';\n    }\n}\nlet man = new Man('Jack', 20);\n\n```\n#### 8. import、export\nES 6 实现了自已的模块化标准，ES 6 模块功能主要由两个关键字构成：export 和import。export 用于规定模块对外暴露的接口，import用于引入其他模块提供的接口。例如：\n```\n// a.js 导出默认接口和普通接口\nconst foo = () => \"foo\";\nconst bar = () => \"bar\";\n\nexport default foo //导出默认接口\nexport {bar} //导出普通接口\n\n//b.js（与a.js 在同一目录下），导入a.js中的接口\n//注意默认接口和普通接口导入写法的区别\nimport foo, {bar} from './a';\nfoo(); //\"foo\"\nbar(); //\"bar\"\n```\n---\n参\b考文献：《React 进阶之路》 \n\nTHE END\n\n---","slug":"javascript_es6_1","published":1,"updated":"2019-05-09T07:48:28.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowm1000gp7sawsv98x5h","content":"<pre><code>ES 6 是JavaScript语言的新一代标准，加入了很多新的功能和语法。React 的项目一般都是用ES 6 语法来写的，这也是是Facebook官方推荐的方式。\n</code></pre><h4 id=\"1-let、const\"><a href=\"#1-let、const\" class=\"headerlink\" title=\"1. let、const\"></a>1. let、const</h4><p>let 和 const 是ES6 中新增的两个关键字，用来声明变量，let 和 const都是块级作用域。let声明的变量只在let命令所在的代码块内有效。const声明一个只读的常量，一量声明，常量的值就不能改变。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// let 示例</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var a = 1;</span><br><span class=\"line\">    let b = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a);//1</span><br><span class=\"line\">console.log(b);//ReferenceError: b is not defined.</span><br><span class=\"line\"></span><br><span class=\"line\">//const 示例</span><br><span class=\"line\">const c = 3;</span><br><span class=\"line\">c = 4;//TypeError:Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2. 箭头函数\"></a>2. 箭头函数</h4><p>ES 6允许使用“箭头”（=&gt;）定义函数。这种方式创建的函数不需要function 关键字，并且还可以省略return 关键字。同时，箭头函数内的this 指向函数定义所在的上下文对象，而不是函数执行时的上下文对象，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = a =&gt; a + 1;</span><br><span class=\"line\">//等价于</span><br><span class=\"line\">var f = function(a)&#123;</span><br><span class=\"line\">    return a + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    this.bar = 1;</span><br><span class=\"line\">    this.f = (a) =&gt; a + this.bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//等价于</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    this.bar = 1;</span><br><span class=\"line\">    this.f = (function(a)&#123;</span><br><span class=\"line\">        return a + this.bar</span><br><span class=\"line\">    &#125;).bind(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果箭头函数的参数多于1个或者不需要参数，就需要使用一个圆括号代表参数部分。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = () =&gt;1;</span><br><span class=\"line\">vaf f= (a, b) =&gt; a + b;</span><br></pre></td></tr></table></figure>\n<p>如果函数体内包含的语句多于一条，就需要使用大括号将函数括起来，使用return语名返回。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = (x,y) =&gt;&#123;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    y--;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-模板字符串\"><a href=\"#3-模板字符串\" class=\"headerlink\" title=\"3. 模板字符串\"></a>3. 模板字符串</h4><p>模板字符串是增强版的字符串，用反引号(`)标识字符串。除了可以当作普通字符串使用外，它还可以用来定义多行字符串，以及在字符串中嵌入变量，功能很强大。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//普通字符串</span><br><span class=\"line\">`React is wonderful !`</span><br><span class=\"line\"></span><br><span class=\"line\">//多行字符串</span><br><span class=\"line\">`JS is wonderful 1</span><br><span class=\"line\">React is wonderful!`</span><br><span class=\"line\"></span><br><span class=\"line\">//字符串中嵌入变量</span><br><span class=\"line\">var name = &quot;React&quot;;</span><br><span class=\"line\">`Hello, $&#123;name&#125; !`;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-解构赋值\"><a href=\"#4-解构赋值\" class=\"headerlink\" title=\"4. 解构赋值\"></a>4. 解构赋值</h4><p>ES 6 允许按照一定模式从数组和对象中提取，对变量进行赋值，这被称为解构。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组解构</span><br><span class=\"line\">let [a,b,c] = [1,2,3];</span><br><span class=\"line\">a //1</span><br><span class=\"line\">b //2</span><br><span class=\"line\">c //3</span><br><span class=\"line\"></span><br><span class=\"line\">//对象解构</span><br><span class=\"line\">let name = &apos;Lily&apos;;</span><br><span class=\"line\">let age = 4;</span><br><span class=\"line\">let person = &#123;name, age&#125;;</span><br><span class=\"line\">console.log(person);//Object &#123;name: &quot;Lily&quot;, age: 4&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//对象解构的另一种形式</span><br><span class=\"line\">let person = &#123;name: &quot;Lily&quot;,age: 4&#125;;</span><br><span class=\"line\">let &#123;name,age&#125; = person;</span><br><span class=\"line\">console.log(name);//&quot;Lily&quot;</span><br><span class=\"line\">console.log(age);//4</span><br><span class=\"line\"></span><br><span class=\"line\">函数的参数也可以使用解构赋值。例如:</span><br><span class=\"line\"></span><br><span class=\"line\">//数组参数解构</span><br><span class=\"line\">function sum ([x, y])&#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum([1, 2]);//3</span><br><span class=\"line\"></span><br><span class=\"line\">//对象参数解构</span><br><span class=\"line\">function sum (&#123;x, y&#125;)&#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(&#123;x:1,y:2&#125;);//3</span><br><span class=\"line\"></span><br><span class=\"line\">//解构同样适用于嵌套结构的数组或对象。例如：</span><br><span class=\"line\">//嵌套结构的数组解构</span><br><span class=\"line\"></span><br><span class=\"line\">let [a, [b], c] = [1, [2], 3];</span><br><span class=\"line\">a; //1</span><br><span class=\"line\">b; //2</span><br><span class=\"line\">c; //3</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套结构的对象解构</span><br><span class=\"line\">let &#123;person:&#123;name, age&#125;, foo&#125; = &#123;person:&#123;name:&apos;Lily&apos;,age: 4&#125;,foo:&quot;foo&quot;&#125;</span><br><span class=\"line\">console.log(name);</span><br><span class=\"line\">console.log(4);</span><br><span class=\"line\">console.log(foo);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-rest参数\"><a href=\"#5-rest参数\" class=\"headerlink\" title=\"5. rest参数\"></a>5. rest参数</h4><p>ES 6 引入rest（形式为…变量名）用于获取函数的多余参数，以代替argments 对象的使用。rest参数是一个数组，数组中的元素是多余的参数。注意，rest 参数之后不能再有其他参数 例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function languages(lang, ...types)&#123;</span><br><span class=\"line\">    console.log(types);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">languages(&quot;js&quot;,&quot;java&quot;,&quot;python&quot;);//[&apos;java&apos;,&apos;python&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-扩展运算符\"><a href=\"#6-扩展运算符\" class=\"headerlink\" title=\"6. 扩展运算符\"></a>6. 扩展运算符</h4><p>扩展运算符是三个点(…),它将一个数组转为用逗号分隔的参数序列，类似于rest参数的逆运算。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(a, b, c)&#123;</span><br><span class=\"line\">    return a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let numbers = [1, 2, 3];</span><br><span class=\"line\">sum(...numbers);//6</span><br><span class=\"line\"></span><br><span class=\"line\">扩展运算符还常用于合并数组以及与解构赋值结合使用，例如：</span><br><span class=\"line\">//合并数组</span><br><span class=\"line\">let arr1 = [&apos;a&apos;];</span><br><span class=\"line\">let arr2 = [&apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">let arr3 = [&apos;d&apos;, &apos;e&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3];</span><br><span class=\"line\"></span><br><span class=\"line\">//与解构赋值结合</span><br><span class=\"line\">let [a, ...rest] = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">rest //[&apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\">扩展运算符还可以用于取出参数对象的所有可遍历属性，复制到当前对象之中。例如：</span><br><span class=\"line\">let bar = &#123;a: 1, b: 2&#125;;</span><br><span class=\"line\">let foo = &#123;...bar&#125;;</span><br><span class=\"line\">foo //Object &#123;a: 1, b: 2&#125;;</span><br><span class=\"line\">foo === bar //false</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"7-class\"><a href=\"#7-class\" class=\"headerlink\" title=\"7. class\"></a>7. class</h4><p>ES 6 引入了class(类)这个概念，新的class写法让对象原型的写法更加清晰，也更像传统的面向对象编程语言的写法。例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个类</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    constructor(name, age)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getName()&#123;</span><br><span class=\"line\">        return this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getAge()&#123;</span><br><span class=\"line\">        return this.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//根据类创建对象</span><br><span class=\"line\">let person = new(&apos;Lily&apos;, 4);</span><br><span class=\"line\">//class 之间可以通过extends关键字实现继承，例如：</span><br><span class=\"line\">class Man extends Person &#123;</span><br><span class=\"line\">    constructor(name, age)&#123;</span><br><span class=\"line\">        super(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getGender()&#123;</span><br><span class=\"line\">        return &apos;male&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let man = new Man(&apos;Jack&apos;, 20);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-import、export\"><a href=\"#8-import、export\" class=\"headerlink\" title=\"8. import、export\"></a>8. import、export</h4><p>ES 6 实现了自已的模块化标准，ES 6 模块功能主要由两个关键字构成：export 和import。export 用于规定模块对外暴露的接口，import用于引入其他模块提供的接口。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js 导出默认接口和普通接口</span><br><span class=\"line\">const foo = () =&gt; &quot;foo&quot;;</span><br><span class=\"line\">const bar = () =&gt; &quot;bar&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default foo //导出默认接口</span><br><span class=\"line\">export &#123;bar&#125; //导出普通接口</span><br><span class=\"line\"></span><br><span class=\"line\">//b.js（与a.js 在同一目录下），导入a.js中的接口</span><br><span class=\"line\">//注意默认接口和普通接口导入写法的区别</span><br><span class=\"line\">import foo, &#123;bar&#125; from &apos;./a&apos;;</span><br><span class=\"line\">foo(); //&quot;foo&quot;</span><br><span class=\"line\">bar(); //&quot;bar&quot;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参\b考文献：《React 进阶之路》 </p>\n<p>THE END</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>ES 6 是JavaScript语言的新一代标准，加入了很多新的功能和语法。React 的项目一般都是用ES 6 语法来写的，这也是是Facebook官方推荐的方式。\n</code></pre><h4 id=\"1-let、const\"><a href=\"#1-let、const\" class=\"headerlink\" title=\"1. let、const\"></a>1. let、const</h4><p>let 和 const 是ES6 中新增的两个关键字，用来声明变量，let 和 const都是块级作用域。let声明的变量只在let命令所在的代码块内有效。const声明一个只读的常量，一量声明，常量的值就不能改变。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// let 示例</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var a = 1;</span><br><span class=\"line\">    let b = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a);//1</span><br><span class=\"line\">console.log(b);//ReferenceError: b is not defined.</span><br><span class=\"line\"></span><br><span class=\"line\">//const 示例</span><br><span class=\"line\">const c = 3;</span><br><span class=\"line\">c = 4;//TypeError:Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-箭头函数\"><a href=\"#2-箭头函数\" class=\"headerlink\" title=\"2. 箭头函数\"></a>2. 箭头函数</h4><p>ES 6允许使用“箭头”（=&gt;）定义函数。这种方式创建的函数不需要function 关键字，并且还可以省略return 关键字。同时，箭头函数内的this 指向函数定义所在的上下文对象，而不是函数执行时的上下文对象，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = a =&gt; a + 1;</span><br><span class=\"line\">//等价于</span><br><span class=\"line\">var f = function(a)&#123;</span><br><span class=\"line\">    return a + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    this.bar = 1;</span><br><span class=\"line\">    this.f = (a) =&gt; a + this.bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//等价于</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    this.bar = 1;</span><br><span class=\"line\">    this.f = (function(a)&#123;</span><br><span class=\"line\">        return a + this.bar</span><br><span class=\"line\">    &#125;).bind(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果箭头函数的参数多于1个或者不需要参数，就需要使用一个圆括号代表参数部分。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = () =&gt;1;</span><br><span class=\"line\">vaf f= (a, b) =&gt; a + b;</span><br></pre></td></tr></table></figure>\n<p>如果函数体内包含的语句多于一条，就需要使用大括号将函数括起来，使用return语名返回。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = (x,y) =&gt;&#123;</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">    y--;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-模板字符串\"><a href=\"#3-模板字符串\" class=\"headerlink\" title=\"3. 模板字符串\"></a>3. 模板字符串</h4><p>模板字符串是增强版的字符串，用反引号(`)标识字符串。除了可以当作普通字符串使用外，它还可以用来定义多行字符串，以及在字符串中嵌入变量，功能很强大。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//普通字符串</span><br><span class=\"line\">`React is wonderful !`</span><br><span class=\"line\"></span><br><span class=\"line\">//多行字符串</span><br><span class=\"line\">`JS is wonderful 1</span><br><span class=\"line\">React is wonderful!`</span><br><span class=\"line\"></span><br><span class=\"line\">//字符串中嵌入变量</span><br><span class=\"line\">var name = &quot;React&quot;;</span><br><span class=\"line\">`Hello, $&#123;name&#125; !`;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-解构赋值\"><a href=\"#4-解构赋值\" class=\"headerlink\" title=\"4. 解构赋值\"></a>4. 解构赋值</h4><p>ES 6 允许按照一定模式从数组和对象中提取，对变量进行赋值，这被称为解构。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组解构</span><br><span class=\"line\">let [a,b,c] = [1,2,3];</span><br><span class=\"line\">a //1</span><br><span class=\"line\">b //2</span><br><span class=\"line\">c //3</span><br><span class=\"line\"></span><br><span class=\"line\">//对象解构</span><br><span class=\"line\">let name = &apos;Lily&apos;;</span><br><span class=\"line\">let age = 4;</span><br><span class=\"line\">let person = &#123;name, age&#125;;</span><br><span class=\"line\">console.log(person);//Object &#123;name: &quot;Lily&quot;, age: 4&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//对象解构的另一种形式</span><br><span class=\"line\">let person = &#123;name: &quot;Lily&quot;,age: 4&#125;;</span><br><span class=\"line\">let &#123;name,age&#125; = person;</span><br><span class=\"line\">console.log(name);//&quot;Lily&quot;</span><br><span class=\"line\">console.log(age);//4</span><br><span class=\"line\"></span><br><span class=\"line\">函数的参数也可以使用解构赋值。例如:</span><br><span class=\"line\"></span><br><span class=\"line\">//数组参数解构</span><br><span class=\"line\">function sum ([x, y])&#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum([1, 2]);//3</span><br><span class=\"line\"></span><br><span class=\"line\">//对象参数解构</span><br><span class=\"line\">function sum (&#123;x, y&#125;)&#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(&#123;x:1,y:2&#125;);//3</span><br><span class=\"line\"></span><br><span class=\"line\">//解构同样适用于嵌套结构的数组或对象。例如：</span><br><span class=\"line\">//嵌套结构的数组解构</span><br><span class=\"line\"></span><br><span class=\"line\">let [a, [b], c] = [1, [2], 3];</span><br><span class=\"line\">a; //1</span><br><span class=\"line\">b; //2</span><br><span class=\"line\">c; //3</span><br><span class=\"line\"></span><br><span class=\"line\">//嵌套结构的对象解构</span><br><span class=\"line\">let &#123;person:&#123;name, age&#125;, foo&#125; = &#123;person:&#123;name:&apos;Lily&apos;,age: 4&#125;,foo:&quot;foo&quot;&#125;</span><br><span class=\"line\">console.log(name);</span><br><span class=\"line\">console.log(4);</span><br><span class=\"line\">console.log(foo);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-rest参数\"><a href=\"#5-rest参数\" class=\"headerlink\" title=\"5. rest参数\"></a>5. rest参数</h4><p>ES 6 引入rest（形式为…变量名）用于获取函数的多余参数，以代替argments 对象的使用。rest参数是一个数组，数组中的元素是多余的参数。注意，rest 参数之后不能再有其他参数 例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function languages(lang, ...types)&#123;</span><br><span class=\"line\">    console.log(types);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">languages(&quot;js&quot;,&quot;java&quot;,&quot;python&quot;);//[&apos;java&apos;,&apos;python&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-扩展运算符\"><a href=\"#6-扩展运算符\" class=\"headerlink\" title=\"6. 扩展运算符\"></a>6. 扩展运算符</h4><p>扩展运算符是三个点(…),它将一个数组转为用逗号分隔的参数序列，类似于rest参数的逆运算。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(a, b, c)&#123;</span><br><span class=\"line\">    return a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let numbers = [1, 2, 3];</span><br><span class=\"line\">sum(...numbers);//6</span><br><span class=\"line\"></span><br><span class=\"line\">扩展运算符还常用于合并数组以及与解构赋值结合使用，例如：</span><br><span class=\"line\">//合并数组</span><br><span class=\"line\">let arr1 = [&apos;a&apos;];</span><br><span class=\"line\">let arr2 = [&apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">let arr3 = [&apos;d&apos;, &apos;e&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3];</span><br><span class=\"line\"></span><br><span class=\"line\">//与解构赋值结合</span><br><span class=\"line\">let [a, ...rest] = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">rest //[&apos;b&apos;, &apos;c&apos;]</span><br><span class=\"line\">扩展运算符还可以用于取出参数对象的所有可遍历属性，复制到当前对象之中。例如：</span><br><span class=\"line\">let bar = &#123;a: 1, b: 2&#125;;</span><br><span class=\"line\">let foo = &#123;...bar&#125;;</span><br><span class=\"line\">foo //Object &#123;a: 1, b: 2&#125;;</span><br><span class=\"line\">foo === bar //false</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"7-class\"><a href=\"#7-class\" class=\"headerlink\" title=\"7. class\"></a>7. class</h4><p>ES 6 引入了class(类)这个概念，新的class写法让对象原型的写法更加清晰，也更像传统的面向对象编程语言的写法。例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个类</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    constructor(name, age)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getName()&#123;</span><br><span class=\"line\">        return this.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getAge()&#123;</span><br><span class=\"line\">        return this.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//根据类创建对象</span><br><span class=\"line\">let person = new(&apos;Lily&apos;, 4);</span><br><span class=\"line\">//class 之间可以通过extends关键字实现继承，例如：</span><br><span class=\"line\">class Man extends Person &#123;</span><br><span class=\"line\">    constructor(name, age)&#123;</span><br><span class=\"line\">        super(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getGender()&#123;</span><br><span class=\"line\">        return &apos;male&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let man = new Man(&apos;Jack&apos;, 20);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-import、export\"><a href=\"#8-import、export\" class=\"headerlink\" title=\"8. import、export\"></a>8. import、export</h4><p>ES 6 实现了自已的模块化标准，ES 6 模块功能主要由两个关键字构成：export 和import。export 用于规定模块对外暴露的接口，import用于引入其他模块提供的接口。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// a.js 导出默认接口和普通接口</span><br><span class=\"line\">const foo = () =&gt; &quot;foo&quot;;</span><br><span class=\"line\">const bar = () =&gt; &quot;bar&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default foo //导出默认接口</span><br><span class=\"line\">export &#123;bar&#125; //导出普通接口</span><br><span class=\"line\"></span><br><span class=\"line\">//b.js（与a.js 在同一目录下），导入a.js中的接口</span><br><span class=\"line\">//注意默认接口和普通接口导入写法的区别</span><br><span class=\"line\">import foo, &#123;bar&#125; from &apos;./a&apos;;</span><br><span class=\"line\">foo(); //&quot;foo&quot;</span><br><span class=\"line\">bar(); //&quot;bar&quot;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>参\b考文献：《React 进阶之路》 </p>\n<p>THE END</p>\n<hr>\n"},{"title":"变更记录","date":"2018-03-26T04:12:12.000Z","description":"记录更新记录","_content":"<!-- ![Folder](/images/zyf_img/title1.png) -->\n\n## 2019-5-9\n* 新增 javaScript_ES 6 简介\n\n## 2019-5-7\n* 新增git FLS 入门\n\n## 2019-5-6\n* 新增git入门\n* 转发博客 基于hexo搭建GitHub静态博客\n\n## 2018-6-26 \n* 新增RSS订阅功能， 订阅源为 https://zhangyongfeng1.github.io/atom.xml\n* 新增博客 erlang-实战-对文件内容进行处理\n\n## 2018-6-12\n* 修改erlang-基本语法（1） 为 erlang-基本语法_1、io:format输出、基本数据类型\n* 新增博客 erlang-基本语法_2、模块和函数、内置函数、在erlang shell中运行文件\n\n## 2018-6-11\n* 新增博客 erlang-基本语法（1）\n\n## 2018-5-24\n* 新增博客 Android_6.数据存储_1.文件存储\n\n## 2018-4-26\n* 新增博客“搭建基于yaws的erlang_web服务_1_环境搭建”\n\n### 2018-4-10 \n* 删除无用的博客内容\n* 统一修改Android系列博客的标题\n* 新发布《Android_Activity_4-活动的生命周期探究》\n\n### 2018-4-3\n* 修改Android_Activity1 markdown布局\n* 新增Android_Activity3 内容：新增 显式intent，隐式intent,android活动数据交互\n\n### 2018-4-1 \n* 首页主题图片更新\n* 新加入更新记录\n\n### 2018-3-26 \n* 新搭建博客","source":"_posts/更新时间树.md","raw":"---\ntitle: 变更记录\ndate: 2018-03-26 12:12:12\ntags: [更新,记录,plan]\ncategories: recode\ndescription: 记录更新记录\n---\n<!-- ![Folder](/images/zyf_img/title1.png) -->\n\n## 2019-5-9\n* 新增 javaScript_ES 6 简介\n\n## 2019-5-7\n* 新增git FLS 入门\n\n## 2019-5-6\n* 新增git入门\n* 转发博客 基于hexo搭建GitHub静态博客\n\n## 2018-6-26 \n* 新增RSS订阅功能， 订阅源为 https://zhangyongfeng1.github.io/atom.xml\n* 新增博客 erlang-实战-对文件内容进行处理\n\n## 2018-6-12\n* 修改erlang-基本语法（1） 为 erlang-基本语法_1、io:format输出、基本数据类型\n* 新增博客 erlang-基本语法_2、模块和函数、内置函数、在erlang shell中运行文件\n\n## 2018-6-11\n* 新增博客 erlang-基本语法（1）\n\n## 2018-5-24\n* 新增博客 Android_6.数据存储_1.文件存储\n\n## 2018-4-26\n* 新增博客“搭建基于yaws的erlang_web服务_1_环境搭建”\n\n### 2018-4-10 \n* 删除无用的博客内容\n* 统一修改Android系列博客的标题\n* 新发布《Android_Activity_4-活动的生命周期探究》\n\n### 2018-4-3\n* 修改Android_Activity1 markdown布局\n* 新增Android_Activity3 内容：新增 显式intent，隐式intent,android活动数据交互\n\n### 2018-4-1 \n* 首页主题图片更新\n* 新加入更新记录\n\n### 2018-3-26 \n* 新搭建博客","slug":"更新时间树","published":1,"updated":"2019-05-09T07:49:52.383Z","_id":"cjvgcowm4000jp7saemmj0o10","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- ![Folder](/images/zyf_img/title1.png) -->\n<h2 id=\"2019-5-9\"><a href=\"#2019-5-9\" class=\"headerlink\" title=\"2019-5-9\"></a>2019-5-9</h2><ul>\n<li>新增 javaScript_ES 6 简介</li>\n</ul>\n<h2 id=\"2019-5-7\"><a href=\"#2019-5-7\" class=\"headerlink\" title=\"2019-5-7\"></a>2019-5-7</h2><ul>\n<li>新增git FLS 入门</li>\n</ul>\n<h2 id=\"2019-5-6\"><a href=\"#2019-5-6\" class=\"headerlink\" title=\"2019-5-6\"></a>2019-5-6</h2><ul>\n<li>新增git入门</li>\n<li>转发博客 基于hexo搭建GitHub静态博客</li>\n</ul>\n<h2 id=\"2018-6-26\"><a href=\"#2018-6-26\" class=\"headerlink\" title=\"2018-6-26\"></a>2018-6-26</h2><ul>\n<li>新增RSS订阅功能， 订阅源为 <a href=\"https://zhangyongfeng1.github.io/atom.xml\">https://zhangyongfeng1.github.io/atom.xml</a></li>\n<li>新增博客 erlang-实战-对文件内容进行处理</li>\n</ul>\n<h2 id=\"2018-6-12\"><a href=\"#2018-6-12\" class=\"headerlink\" title=\"2018-6-12\"></a>2018-6-12</h2><ul>\n<li>修改erlang-基本语法（1） 为 erlang-基本语法_1、io:format输出、基本数据类型</li>\n<li>新增博客 erlang-基本语法_2、模块和函数、内置函数、在erlang shell中运行文件</li>\n</ul>\n<h2 id=\"2018-6-11\"><a href=\"#2018-6-11\" class=\"headerlink\" title=\"2018-6-11\"></a>2018-6-11</h2><ul>\n<li>新增博客 erlang-基本语法（1）</li>\n</ul>\n<h2 id=\"2018-5-24\"><a href=\"#2018-5-24\" class=\"headerlink\" title=\"2018-5-24\"></a>2018-5-24</h2><ul>\n<li>新增博客 Android_6.数据存储_1.文件存储</li>\n</ul>\n<h2 id=\"2018-4-26\"><a href=\"#2018-4-26\" class=\"headerlink\" title=\"2018-4-26\"></a>2018-4-26</h2><ul>\n<li>新增博客“搭建基于yaws的erlang_web服务_1_环境搭建”</li>\n</ul>\n<h3 id=\"2018-4-10\"><a href=\"#2018-4-10\" class=\"headerlink\" title=\"2018-4-10\"></a>2018-4-10</h3><ul>\n<li>删除无用的博客内容</li>\n<li>统一修改Android系列博客的标题</li>\n<li>新发布《Android_Activity_4-活动的生命周期探究》</li>\n</ul>\n<h3 id=\"2018-4-3\"><a href=\"#2018-4-3\" class=\"headerlink\" title=\"2018-4-3\"></a>2018-4-3</h3><ul>\n<li>修改Android_Activity1 markdown布局</li>\n<li>新增Android_Activity3 内容：新增 显式intent，隐式intent,android活动数据交互</li>\n</ul>\n<h3 id=\"2018-4-1\"><a href=\"#2018-4-1\" class=\"headerlink\" title=\"2018-4-1\"></a>2018-4-1</h3><ul>\n<li>首页主题图片更新</li>\n<li>新加入更新记录</li>\n</ul>\n<h3 id=\"2018-3-26\"><a href=\"#2018-3-26\" class=\"headerlink\" title=\"2018-3-26\"></a>2018-3-26</h3><ul>\n<li>新搭建博客</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!-- ![Folder](/images/zyf_img/title1.png) -->\n<h2 id=\"2019-5-9\"><a href=\"#2019-5-9\" class=\"headerlink\" title=\"2019-5-9\"></a>2019-5-9</h2><ul>\n<li>新增 javaScript_ES 6 简介</li>\n</ul>\n<h2 id=\"2019-5-7\"><a href=\"#2019-5-7\" class=\"headerlink\" title=\"2019-5-7\"></a>2019-5-7</h2><ul>\n<li>新增git FLS 入门</li>\n</ul>\n<h2 id=\"2019-5-6\"><a href=\"#2019-5-6\" class=\"headerlink\" title=\"2019-5-6\"></a>2019-5-6</h2><ul>\n<li>新增git入门</li>\n<li>转发博客 基于hexo搭建GitHub静态博客</li>\n</ul>\n<h2 id=\"2018-6-26\"><a href=\"#2018-6-26\" class=\"headerlink\" title=\"2018-6-26\"></a>2018-6-26</h2><ul>\n<li>新增RSS订阅功能， 订阅源为 <a href=\"https://zhangyongfeng1.github.io/atom.xml\">https://zhangyongfeng1.github.io/atom.xml</a></li>\n<li>新增博客 erlang-实战-对文件内容进行处理</li>\n</ul>\n<h2 id=\"2018-6-12\"><a href=\"#2018-6-12\" class=\"headerlink\" title=\"2018-6-12\"></a>2018-6-12</h2><ul>\n<li>修改erlang-基本语法（1） 为 erlang-基本语法_1、io:format输出、基本数据类型</li>\n<li>新增博客 erlang-基本语法_2、模块和函数、内置函数、在erlang shell中运行文件</li>\n</ul>\n<h2 id=\"2018-6-11\"><a href=\"#2018-6-11\" class=\"headerlink\" title=\"2018-6-11\"></a>2018-6-11</h2><ul>\n<li>新增博客 erlang-基本语法（1）</li>\n</ul>\n<h2 id=\"2018-5-24\"><a href=\"#2018-5-24\" class=\"headerlink\" title=\"2018-5-24\"></a>2018-5-24</h2><ul>\n<li>新增博客 Android_6.数据存储_1.文件存储</li>\n</ul>\n<h2 id=\"2018-4-26\"><a href=\"#2018-4-26\" class=\"headerlink\" title=\"2018-4-26\"></a>2018-4-26</h2><ul>\n<li>新增博客“搭建基于yaws的erlang_web服务_1_环境搭建”</li>\n</ul>\n<h3 id=\"2018-4-10\"><a href=\"#2018-4-10\" class=\"headerlink\" title=\"2018-4-10\"></a>2018-4-10</h3><ul>\n<li>删除无用的博客内容</li>\n<li>统一修改Android系列博客的标题</li>\n<li>新发布《Android_Activity_4-活动的生命周期探究》</li>\n</ul>\n<h3 id=\"2018-4-3\"><a href=\"#2018-4-3\" class=\"headerlink\" title=\"2018-4-3\"></a>2018-4-3</h3><ul>\n<li>修改Android_Activity1 markdown布局</li>\n<li>新增Android_Activity3 内容：新增 显式intent，隐式intent,android活动数据交互</li>\n</ul>\n<h3 id=\"2018-4-1\"><a href=\"#2018-4-1\" class=\"headerlink\" title=\"2018-4-1\"></a>2018-4-1</h3><ul>\n<li>首页主题图片更新</li>\n<li>新加入更新记录</li>\n</ul>\n<h3 id=\"2018-3-26\"><a href=\"#2018-3-26\" class=\"headerlink\" title=\"2018-3-26\"></a>2018-3-26</h3><ul>\n<li>新搭建博客</li>\n</ul>\n"},{"title":"git lfs入门","date":"2019-05-07T04:00:00.000Z","description":"gif lfs入门","_content":"\n## 适用于大文件版本管理的开源 Git 插件\n\n[添加完成了，可以提交大文件进行测试下](###添加完成了，可以提交大文件进行测试下)\n\n在远程 Git 服务器上存储大文件（例如音频样本、视频、数据集、图形文件等）时，Git 大文件存储（LFS）会将文件内容替换成文本指针储存在 Git 中。\n\n## mac安装\n\nHomebrew : \n```\n brew install git-lfs\n```\n\nMacPorts\n\n```\n port install git-lfs\n```\n\n## lfs 的使用\n\n### 下载并且安装Git命令插件，只需要进行一次Git LFS 的安装操作。\n\n```\ngit lfs install\n```\n\n### 选择你希望的Git LFS 管理的文件扩展类型（或者直接编辑.gitattributes文件）\n\n```\ngit lfs track \"*.zip\"\n```\n\n确保.gitattributes 是被追踪的。\n\n```\n git add .gitattributes\n```\n\n### 添加完成了，可以提交大文件进行测试下\n\n```\ngit add file.zip\ngit commit -m 'add big file'\ngit push origin master\n```\n\n---\n\nThe End \n\n---","source":"_posts/git_lfs1.md","raw":"---\ntitle: git lfs入门\ndate:  2019-05-07 12:00:00\ntags: [git lfs]\ncategories: 张永枫\ndescription: gif lfs入门\n---\n\n## 适用于大文件版本管理的开源 Git 插件\n\n[添加完成了，可以提交大文件进行测试下](###添加完成了，可以提交大文件进行测试下)\n\n在远程 Git 服务器上存储大文件（例如音频样本、视频、数据集、图形文件等）时，Git 大文件存储（LFS）会将文件内容替换成文本指针储存在 Git 中。\n\n## mac安装\n\nHomebrew : \n```\n brew install git-lfs\n```\n\nMacPorts\n\n```\n port install git-lfs\n```\n\n## lfs 的使用\n\n### 下载并且安装Git命令插件，只需要进行一次Git LFS 的安装操作。\n\n```\ngit lfs install\n```\n\n### 选择你希望的Git LFS 管理的文件扩展类型（或者直接编辑.gitattributes文件）\n\n```\ngit lfs track \"*.zip\"\n```\n\n确保.gitattributes 是被追踪的。\n\n```\n git add .gitattributes\n```\n\n### 添加完成了，可以提交大文件进行测试下\n\n```\ngit add file.zip\ngit commit -m 'add big file'\ngit push origin master\n```\n\n---\n\nThe End \n\n---","slug":"git_lfs1","published":1,"updated":"2019-05-07T03:34:59.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowm7000np7sags9mqkaz","content":"<h2 id=\"适用于大文件版本管理的开源-Git-插件\"><a href=\"#适用于大文件版本管理的开源-Git-插件\" class=\"headerlink\" title=\"适用于大文件版本管理的开源 Git 插件\"></a>适用于大文件版本管理的开源 Git 插件</h2><p><a href=\"###添加完成了，可以提交大文件进行测试下\">添加完成了，可以提交大文件进行测试下</a></p>\n<p>在远程 Git 服务器上存储大文件（例如音频样本、视频、数据集、图形文件等）时，Git 大文件存储（LFS）会将文件内容替换成文本指针储存在 Git 中。</p>\n<h2 id=\"mac安装\"><a href=\"#mac安装\" class=\"headerlink\" title=\"mac安装\"></a>mac安装</h2><p>Homebrew :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git-lfs</span><br></pre></td></tr></table></figure></p>\n<p>MacPorts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port install git-lfs</span><br></pre></td></tr></table></figure>\n<h2 id=\"lfs-的使用\"><a href=\"#lfs-的使用\" class=\"headerlink\" title=\"lfs 的使用\"></a>lfs 的使用</h2><h3 id=\"下载并且安装Git命令插件，只需要进行一次Git-LFS-的安装操作。\"><a href=\"#下载并且安装Git命令插件，只需要进行一次Git-LFS-的安装操作。\" class=\"headerlink\" title=\"下载并且安装Git命令插件，只需要进行一次Git LFS 的安装操作。\"></a>下载并且安装Git命令插件，只需要进行一次Git LFS 的安装操作。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择你希望的Git-LFS-管理的文件扩展类型（或者直接编辑-gitattributes文件）\"><a href=\"#选择你希望的Git-LFS-管理的文件扩展类型（或者直接编辑-gitattributes文件）\" class=\"headerlink\" title=\"选择你希望的Git LFS 管理的文件扩展类型（或者直接编辑.gitattributes文件）\"></a>选择你希望的Git LFS 管理的文件扩展类型（或者直接编辑.gitattributes文件）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;*.zip&quot;</span><br></pre></td></tr></table></figure>\n<p>确保.gitattributes 是被追踪的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .gitattributes</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加完成了，可以提交大文件进行测试下\"><a href=\"#添加完成了，可以提交大文件进行测试下\" class=\"headerlink\" title=\"添加完成了，可以提交大文件进行测试下\"></a>添加完成了，可以提交大文件进行测试下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.zip</span><br><span class=\"line\">git commit -m &apos;add big file&apos;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<hr>\n<p>The End </p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"适用于大文件版本管理的开源-Git-插件\"><a href=\"#适用于大文件版本管理的开源-Git-插件\" class=\"headerlink\" title=\"适用于大文件版本管理的开源 Git 插件\"></a>适用于大文件版本管理的开源 Git 插件</h2><p><a href=\"###添加完成了，可以提交大文件进行测试下\">添加完成了，可以提交大文件进行测试下</a></p>\n<p>在远程 Git 服务器上存储大文件（例如音频样本、视频、数据集、图形文件等）时，Git 大文件存储（LFS）会将文件内容替换成文本指针储存在 Git 中。</p>\n<h2 id=\"mac安装\"><a href=\"#mac安装\" class=\"headerlink\" title=\"mac安装\"></a>mac安装</h2><p>Homebrew :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git-lfs</span><br></pre></td></tr></table></figure></p>\n<p>MacPorts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port install git-lfs</span><br></pre></td></tr></table></figure>\n<h2 id=\"lfs-的使用\"><a href=\"#lfs-的使用\" class=\"headerlink\" title=\"lfs 的使用\"></a>lfs 的使用</h2><h3 id=\"下载并且安装Git命令插件，只需要进行一次Git-LFS-的安装操作。\"><a href=\"#下载并且安装Git命令插件，只需要进行一次Git-LFS-的安装操作。\" class=\"headerlink\" title=\"下载并且安装Git命令插件，只需要进行一次Git LFS 的安装操作。\"></a>下载并且安装Git命令插件，只需要进行一次Git LFS 的安装操作。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择你希望的Git-LFS-管理的文件扩展类型（或者直接编辑-gitattributes文件）\"><a href=\"#选择你希望的Git-LFS-管理的文件扩展类型（或者直接编辑-gitattributes文件）\" class=\"headerlink\" title=\"选择你希望的Git LFS 管理的文件扩展类型（或者直接编辑.gitattributes文件）\"></a>选择你希望的Git LFS 管理的文件扩展类型（或者直接编辑.gitattributes文件）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;*.zip&quot;</span><br></pre></td></tr></table></figure>\n<p>确保.gitattributes 是被追踪的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .gitattributes</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加完成了，可以提交大文件进行测试下\"><a href=\"#添加完成了，可以提交大文件进行测试下\" class=\"headerlink\" title=\"添加完成了，可以提交大文件进行测试下\"></a>添加完成了，可以提交大文件进行测试下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.zip</span><br><span class=\"line\">git commit -m &apos;add big file&apos;</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<hr>\n<p>The End </p>\n<hr>\n"},{"title":"搭建基于yaws的erlang_web服务_1_环境搭建","date":"2018-04-26T04:51:25.000Z","description":"搭建基于yaws的erlang_web服务","_content":"\n# 搭建基于yaws的erlang web服务\n## yaws的安装\n\n---\n### windows下安装\n\nyaws window的下载地址[http://yaws.hyber.org/download/windows/](http://yaws.hyber.org/download/windows/)\n直接下载后双击.exe文件安装\n\n![](/img/zyf_img/Snip20180426_1.png)\n\n点击“next”按钮\n\n![](/img/zyf_img/Snip20180426_2.png)\n\n选择“I accept the agreement”，点击“next”\n\n![](/img/zyf_img/Snip20180426_3.png)\n\n选择安装路径同，点击“next”，进入下一步\n\n![](/img/zyf_img/Snip20180426_4.png)\n\n点击“next”,进入下一步\n\n![](/img/zyf_img/Snip20180426_5.png)\n\n点击“finish” 完成安装\n\n![](/img/zyf_img/Snip20180426_6.png)\n\n### mac安装\n\nyaws mac 直接用homebrew 安装即可\n\n```\nbrew install yaws\n```\n\n## 启动yaws服务\n\n---\n\n在mac系统示例如下：\n进入命令窗口，输入\n```\nyaws -i \n```\n\n会出现以下启动信息\n\n```\n➜  blog yaws -i \nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:true]\n\nEshell V5.9.3.1  (abort with ^G)\n1> \n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nYaws: Using config file /usr/local/etc/yaws/yaws.conf\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Add path \"/usr/local/var/yaws/ebin\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Add path \"/usr/local/lib/yaws/examples/ebin\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Add path \"/usr/local/lib/yaws/examples/ebin\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Running with id=\"default\" (localinstall=false) \nRunning with debug checks turned on (slower server) \nLogging to directory \"/usr/local/var/log/yaws\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nCtlfile : /Users/Macx/.yaws/yaws/default/CTL\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nYaws: Listening to 0.0.0.0:8089 for <2> virtual servers:\n - http://feng.local:8089 under /usr/local/var/yaws/www\n - http://localhost:8089 under /tmp\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nYaws: Listening to 0.0.0.0:4002 for <1> virtual servers:\n - https://feng.local:4002 under /tmp\n```\n\n其中yaws默认的配置文件如下：\n/usr/local/etc/yaws/yaws.conf\n\nyaws服务启动的端口为8089，（默认为8080）\n访问http://feng.local:8089可以得到如下页面，web服务启动成功\n![](/img/zyf_img/Snip20180426_9.png)\n\n## 编写第一个页面\n---\n进入/usr/local/var/yaws/www\n新建一个first.yaws文件\n输入内容如下：\n\n```\n<!DOCTYPE html>  \n<html>  \n<head>  \n    <title>my first page</title>  \n</head>  \n<body>  \n    <erl>  \n        out(Arg) ->  \n            {html,\"<p>my first page！</p>\"}.  \n    </erl>  \n</body>  \n</html>  \n```\n\n![](/img/zyf_img/Snip20180426_11.png)\n\n## 用erlang代码实现动态页面\n---\n<erl></erl>嵌入Erlang代码来定义函数，然后使用out(Args)函数来调用它，以达到实现动态页面目的\n\n可以在/usr/local/var/yaws/www/下新建my_out.erl\n输入以下内容：\n\n```\n -module(my_out).  \n -export([out/0]).  \n   \n out() ->  \n     \"<p>Hello Out!</p>\".  \n```\n编译erl文件my_out.erls\n进入到yaws启动的命令窗口后执行\n\n```\nc(my_out).\n```\n访问 http://feng.local:8089/first.yaws 可以得到\n![](/img/zyf_img/Snip20180426_12.png)\n\n\n\n\n\n\n","source":"_posts/yaws.web1.md","raw":"---\ntitle:  搭建基于yaws的erlang_web服务_1_环境搭建\ndate:  2018-04-26 12:51:25\ntags: [yaws,erlang,web]\ncategories: 张永枫\ndescription: 搭建基于yaws的erlang_web服务\n---\n\n# 搭建基于yaws的erlang web服务\n## yaws的安装\n\n---\n### windows下安装\n\nyaws window的下载地址[http://yaws.hyber.org/download/windows/](http://yaws.hyber.org/download/windows/)\n直接下载后双击.exe文件安装\n\n![](/img/zyf_img/Snip20180426_1.png)\n\n点击“next”按钮\n\n![](/img/zyf_img/Snip20180426_2.png)\n\n选择“I accept the agreement”，点击“next”\n\n![](/img/zyf_img/Snip20180426_3.png)\n\n选择安装路径同，点击“next”，进入下一步\n\n![](/img/zyf_img/Snip20180426_4.png)\n\n点击“next”,进入下一步\n\n![](/img/zyf_img/Snip20180426_5.png)\n\n点击“finish” 完成安装\n\n![](/img/zyf_img/Snip20180426_6.png)\n\n### mac安装\n\nyaws mac 直接用homebrew 安装即可\n\n```\nbrew install yaws\n```\n\n## 启动yaws服务\n\n---\n\n在mac系统示例如下：\n进入命令窗口，输入\n```\nyaws -i \n```\n\n会出现以下启动信息\n\n```\n➜  blog yaws -i \nErlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:true]\n\nEshell V5.9.3.1  (abort with ^G)\n1> \n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nYaws: Using config file /usr/local/etc/yaws/yaws.conf\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Add path \"/usr/local/var/yaws/ebin\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Add path \"/usr/local/lib/yaws/examples/ebin\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Add path \"/usr/local/lib/yaws/examples/ebin\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nyaws debug:Running with id=\"default\" (localinstall=false) \nRunning with debug checks turned on (slower server) \nLogging to directory \"/usr/local/var/log/yaws\"\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nCtlfile : /Users/Macx/.yaws/yaws/default/CTL\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nYaws: Listening to 0.0.0.0:8089 for <2> virtual servers:\n - http://feng.local:8089 under /usr/local/var/yaws/www\n - http://localhost:8089 under /tmp\n\n=INFO REPORT==== 26-Apr-2018::10:47:33 ===\nYaws: Listening to 0.0.0.0:4002 for <1> virtual servers:\n - https://feng.local:4002 under /tmp\n```\n\n其中yaws默认的配置文件如下：\n/usr/local/etc/yaws/yaws.conf\n\nyaws服务启动的端口为8089，（默认为8080）\n访问http://feng.local:8089可以得到如下页面，web服务启动成功\n![](/img/zyf_img/Snip20180426_9.png)\n\n## 编写第一个页面\n---\n进入/usr/local/var/yaws/www\n新建一个first.yaws文件\n输入内容如下：\n\n```\n<!DOCTYPE html>  \n<html>  \n<head>  \n    <title>my first page</title>  \n</head>  \n<body>  \n    <erl>  \n        out(Arg) ->  \n            {html,\"<p>my first page！</p>\"}.  \n    </erl>  \n</body>  \n</html>  \n```\n\n![](/img/zyf_img/Snip20180426_11.png)\n\n## 用erlang代码实现动态页面\n---\n<erl></erl>嵌入Erlang代码来定义函数，然后使用out(Args)函数来调用它，以达到实现动态页面目的\n\n可以在/usr/local/var/yaws/www/下新建my_out.erl\n输入以下内容：\n\n```\n -module(my_out).  \n -export([out/0]).  \n   \n out() ->  \n     \"<p>Hello Out!</p>\".  \n```\n编译erl文件my_out.erls\n进入到yaws启动的命令窗口后执行\n\n```\nc(my_out).\n```\n访问 http://feng.local:8089/first.yaws 可以得到\n![](/img/zyf_img/Snip20180426_12.png)\n\n\n\n\n\n\n","slug":"yaws.web1","published":1,"updated":"2019-05-07T02:19:37.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcowm8000qp7saoe3d6wpf","content":"<h1 id=\"搭建基于yaws的erlang-web服务\"><a href=\"#搭建基于yaws的erlang-web服务\" class=\"headerlink\" title=\"搭建基于yaws的erlang web服务\"></a>搭建基于yaws的erlang web服务</h1><h2 id=\"yaws的安装\"><a href=\"#yaws的安装\" class=\"headerlink\" title=\"yaws的安装\"></a>yaws的安装</h2><hr>\n<h3 id=\"windows下安装\"><a href=\"#windows下安装\" class=\"headerlink\" title=\"windows下安装\"></a>windows下安装</h3><p>yaws window的下载地址<a href=\"http://yaws.hyber.org/download/windows/\" target=\"_blank\" rel=\"noopener\">http://yaws.hyber.org/download/windows/</a><br>直接下载后双击.exe文件安装</p>\n<p><img src=\"/img/zyf_img/Snip20180426_1.png\" alt=\"\"></p>\n<p>点击“next”按钮</p>\n<p><img src=\"/img/zyf_img/Snip20180426_2.png\" alt=\"\"></p>\n<p>选择“I accept the agreement”，点击“next”</p>\n<p><img src=\"/img/zyf_img/Snip20180426_3.png\" alt=\"\"></p>\n<p>选择安装路径同，点击“next”，进入下一步</p>\n<p><img src=\"/img/zyf_img/Snip20180426_4.png\" alt=\"\"></p>\n<p>点击“next”,进入下一步</p>\n<p><img src=\"/img/zyf_img/Snip20180426_5.png\" alt=\"\"></p>\n<p>点击“finish” 完成安装</p>\n<p><img src=\"/img/zyf_img/Snip20180426_6.png\" alt=\"\"></p>\n<h3 id=\"mac安装\"><a href=\"#mac安装\" class=\"headerlink\" title=\"mac安装\"></a>mac安装</h3><p>yaws mac 直接用homebrew 安装即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install yaws</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动yaws服务\"><a href=\"#启动yaws服务\" class=\"headerlink\" title=\"启动yaws服务\"></a>启动yaws服务</h2><hr>\n<p>在mac系统示例如下：<br>进入命令窗口，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaws -i</span><br></pre></td></tr></table></figure></p>\n<p>会出现以下启动信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  blog yaws -i </span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:true]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; </span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Yaws: Using config file /usr/local/etc/yaws/yaws.conf</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Add path &quot;/usr/local/var/yaws/ebin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Add path &quot;/usr/local/lib/yaws/examples/ebin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Add path &quot;/usr/local/lib/yaws/examples/ebin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Running with id=&quot;default&quot; (localinstall=false) </span><br><span class=\"line\">Running with debug checks turned on (slower server) </span><br><span class=\"line\">Logging to directory &quot;/usr/local/var/log/yaws&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Ctlfile : /Users/Macx/.yaws/yaws/default/CTL</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Yaws: Listening to 0.0.0.0:8089 for &lt;2&gt; virtual servers:</span><br><span class=\"line\"> - http://feng.local:8089 under /usr/local/var/yaws/www</span><br><span class=\"line\"> - http://localhost:8089 under /tmp</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Yaws: Listening to 0.0.0.0:4002 for &lt;1&gt; virtual servers:</span><br><span class=\"line\"> - https://feng.local:4002 under /tmp</span><br></pre></td></tr></table></figure>\n<p>其中yaws默认的配置文件如下：<br>/usr/local/etc/yaws/yaws.conf</p>\n<p>yaws服务启动的端口为8089，（默认为8080）<br>访问<a href=\"http://feng.local:8089可以得到如下页面，web服务启动成功\" target=\"_blank\" rel=\"noopener\">http://feng.local:8089可以得到如下页面，web服务启动成功</a><br><img src=\"/img/zyf_img/Snip20180426_9.png\" alt=\"\"></p>\n<h2 id=\"编写第一个页面\"><a href=\"#编写第一个页面\" class=\"headerlink\" title=\"编写第一个页面\"></a>编写第一个页面</h2><hr>\n<p>进入/usr/local/var/yaws/www<br>新建一个first.yaws文件<br>输入内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;  </span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">&lt;head&gt;  </span><br><span class=\"line\">    &lt;title&gt;my first page&lt;/title&gt;  </span><br><span class=\"line\">&lt;/head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    &lt;erl&gt;  </span><br><span class=\"line\">        out(Arg) -&gt;  </span><br><span class=\"line\">            &#123;html,&quot;&lt;p&gt;my first page！&lt;/p&gt;&quot;&#125;.  </span><br><span class=\"line\">    &lt;/erl&gt;  </span><br><span class=\"line\">&lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/zyf_img/Snip20180426_11.png\" alt=\"\"></p>\n<h2 id=\"用erlang代码实现动态页面\"><a href=\"#用erlang代码实现动态页面\" class=\"headerlink\" title=\"用erlang代码实现动态页面\"></a>用erlang代码实现动态页面</h2><hr>\n<p><erl></erl>嵌入Erlang代码来定义函数，然后使用out(Args)函数来调用它，以达到实现动态页面目的</p>\n<p>可以在/usr/local/var/yaws/www/下新建my_out.erl<br>输入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(my_out).  </span><br><span class=\"line\">-export([out/0]).  </span><br><span class=\"line\">  </span><br><span class=\"line\">out() -&gt;  </span><br><span class=\"line\">    &quot;&lt;p&gt;Hello Out!&lt;/p&gt;&quot;.</span><br></pre></td></tr></table></figure>\n<p>编译erl文件my_out.erls<br>进入到yaws启动的命令窗口后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c(my_out).</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://feng.local:8089/first.yaws\" target=\"_blank\" rel=\"noopener\">http://feng.local:8089/first.yaws</a> 可以得到<br><img src=\"/img/zyf_img/Snip20180426_12.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建基于yaws的erlang-web服务\"><a href=\"#搭建基于yaws的erlang-web服务\" class=\"headerlink\" title=\"搭建基于yaws的erlang web服务\"></a>搭建基于yaws的erlang web服务</h1><h2 id=\"yaws的安装\"><a href=\"#yaws的安装\" class=\"headerlink\" title=\"yaws的安装\"></a>yaws的安装</h2><hr>\n<h3 id=\"windows下安装\"><a href=\"#windows下安装\" class=\"headerlink\" title=\"windows下安装\"></a>windows下安装</h3><p>yaws window的下载地址<a href=\"http://yaws.hyber.org/download/windows/\" target=\"_blank\" rel=\"noopener\">http://yaws.hyber.org/download/windows/</a><br>直接下载后双击.exe文件安装</p>\n<p><img src=\"/img/zyf_img/Snip20180426_1.png\" alt=\"\"></p>\n<p>点击“next”按钮</p>\n<p><img src=\"/img/zyf_img/Snip20180426_2.png\" alt=\"\"></p>\n<p>选择“I accept the agreement”，点击“next”</p>\n<p><img src=\"/img/zyf_img/Snip20180426_3.png\" alt=\"\"></p>\n<p>选择安装路径同，点击“next”，进入下一步</p>\n<p><img src=\"/img/zyf_img/Snip20180426_4.png\" alt=\"\"></p>\n<p>点击“next”,进入下一步</p>\n<p><img src=\"/img/zyf_img/Snip20180426_5.png\" alt=\"\"></p>\n<p>点击“finish” 完成安装</p>\n<p><img src=\"/img/zyf_img/Snip20180426_6.png\" alt=\"\"></p>\n<h3 id=\"mac安装\"><a href=\"#mac安装\" class=\"headerlink\" title=\"mac安装\"></a>mac安装</h3><p>yaws mac 直接用homebrew 安装即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install yaws</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动yaws服务\"><a href=\"#启动yaws服务\" class=\"headerlink\" title=\"启动yaws服务\"></a>启动yaws服务</h2><hr>\n<p>在mac系统示例如下：<br>进入命令窗口，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yaws -i</span><br></pre></td></tr></table></figure></p>\n<p>会出现以下启动信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  blog yaws -i </span><br><span class=\"line\">Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:8:8] [async-threads:0] [hipe] [kernel-poll:true]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.9.3.1  (abort with ^G)</span><br><span class=\"line\">1&gt; </span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Yaws: Using config file /usr/local/etc/yaws/yaws.conf</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Add path &quot;/usr/local/var/yaws/ebin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Add path &quot;/usr/local/lib/yaws/examples/ebin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Add path &quot;/usr/local/lib/yaws/examples/ebin&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">yaws debug:Running with id=&quot;default&quot; (localinstall=false) </span><br><span class=\"line\">Running with debug checks turned on (slower server) </span><br><span class=\"line\">Logging to directory &quot;/usr/local/var/log/yaws&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Ctlfile : /Users/Macx/.yaws/yaws/default/CTL</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Yaws: Listening to 0.0.0.0:8089 for &lt;2&gt; virtual servers:</span><br><span class=\"line\"> - http://feng.local:8089 under /usr/local/var/yaws/www</span><br><span class=\"line\"> - http://localhost:8089 under /tmp</span><br><span class=\"line\"></span><br><span class=\"line\">=INFO REPORT==== 26-Apr-2018::10:47:33 ===</span><br><span class=\"line\">Yaws: Listening to 0.0.0.0:4002 for &lt;1&gt; virtual servers:</span><br><span class=\"line\"> - https://feng.local:4002 under /tmp</span><br></pre></td></tr></table></figure>\n<p>其中yaws默认的配置文件如下：<br>/usr/local/etc/yaws/yaws.conf</p>\n<p>yaws服务启动的端口为8089，（默认为8080）<br>访问<a href=\"http://feng.local:8089可以得到如下页面，web服务启动成功\" target=\"_blank\" rel=\"noopener\">http://feng.local:8089可以得到如下页面，web服务启动成功</a><br><img src=\"/img/zyf_img/Snip20180426_9.png\" alt=\"\"></p>\n<h2 id=\"编写第一个页面\"><a href=\"#编写第一个页面\" class=\"headerlink\" title=\"编写第一个页面\"></a>编写第一个页面</h2><hr>\n<p>进入/usr/local/var/yaws/www<br>新建一个first.yaws文件<br>输入内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;  </span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">&lt;head&gt;  </span><br><span class=\"line\">    &lt;title&gt;my first page&lt;/title&gt;  </span><br><span class=\"line\">&lt;/head&gt;  </span><br><span class=\"line\">&lt;body&gt;  </span><br><span class=\"line\">    &lt;erl&gt;  </span><br><span class=\"line\">        out(Arg) -&gt;  </span><br><span class=\"line\">            &#123;html,&quot;&lt;p&gt;my first page！&lt;/p&gt;&quot;&#125;.  </span><br><span class=\"line\">    &lt;/erl&gt;  </span><br><span class=\"line\">&lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/zyf_img/Snip20180426_11.png\" alt=\"\"></p>\n<h2 id=\"用erlang代码实现动态页面\"><a href=\"#用erlang代码实现动态页面\" class=\"headerlink\" title=\"用erlang代码实现动态页面\"></a>用erlang代码实现动态页面</h2><hr>\n<p><erl></erl>嵌入Erlang代码来定义函数，然后使用out(Args)函数来调用它，以达到实现动态页面目的</p>\n<p>可以在/usr/local/var/yaws/www/下新建my_out.erl<br>输入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-module(my_out).  </span><br><span class=\"line\">-export([out/0]).  </span><br><span class=\"line\">  </span><br><span class=\"line\">out() -&gt;  </span><br><span class=\"line\">    &quot;&lt;p&gt;Hello Out!&lt;/p&gt;&quot;.</span><br></pre></td></tr></table></figure>\n<p>编译erl文件my_out.erls<br>进入到yaws启动的命令窗口后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c(my_out).</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://feng.local:8089/first.yaws\" target=\"_blank\" rel=\"noopener\">http://feng.local:8089/first.yaws</a> 可以得到<br><img src=\"/img/zyf_img/Snip20180426_12.png\" alt=\"\"></p>\n"},{"title":"Android_Activity_4-活动的生命周期探究","date":"2018-04-10T08:25:25.000Z","description":"本文是以Android Studi为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录","_content":"1、介绍\n\nAndroid的活动是可以层叠的，我们每启动一个新的活动，就会覆盖有原活动之上，点击Back键之后会销毁最上面的活动，下面的一个活动就会重新显示出来。\n2、 返回栈\n\nAndroid使用（Task）来管理活动；\n一个任务就是一组存放在栈里的的活动集合，这个栈也称之为返回栈（back Stack）;\n栈是一种先进先出的数据结构；\n工作流程：\n    在默认情况下，\n    每当启动了一个新的活动，它会在返回栈中入栈，并处于栈顶的位置，\n    每当我们按下Back键或调用finish()方法去销毁一个活动时，处于栈顶的位置的活动就会出栈，这时前一个入栈的活动就会重新处于栈顶的位置，系统就会是显示处于栈顶的活动给用。\n3、活动状态（每个活动其生命周期最多可能会有4种状态）\n\n3.1、运行状态\n\n当一个活动位于返回栈的栈顶时，活动就处于运行状态。\n3.2、暂停状态\n\n当一个活动不再处于栈顶位置，但仍然可见时，活动就进入了暂停状态。\n示例：并不是每一个活动都会占满整个屏幕，比如对话框形式的活动就只会占用屏幕中间的部分区域，你仍然可以看到后面的活动；\n处于暂停状态的活动仍然是完全存活着的；\n只有在内存极低的情况下才会考虑回收这种活动；\n3.3、停止状态\n\n当一个活动不再处于栈顶位置，并且完成不可见的时候，就进入了停止状态。系统会为这种活动保存相应的状态和成员变量（但是当其他地方需要内存时，处于停止活动下的活动有可能会被系统回收。）\n3.4、销毁状态\n\n当一个活动从返回栈中移除后变成了销毁状态。系统会倾向回收这种状态的活动，以保证手机内存的充足。\n4、活动的生存期\n\nActivity中定义了7个回调方法，覆盖了生命周期的每一个环节；\nonCreate()\n\n每个活动基本都会重写这个方法，它会在活动第一次创建的时候调用；这个方法会完成活动的初始化操作，比如:加载布局、绑定事件；\nonStart()\n\n这个方法在活动由不可见变为可见的时候调用；\nonResume()\n\n这个方法在活动准备好和用户进行交互的时候调用，此时的活动一定位于返回栈的栈顶，并且处于运行状态；\nonPause()\n\n这个方法在系统准备去启动或者恢复另一个活动的时候调用；\n（通常会在这个方法中将一）\nonStop()\n\n这个方法在活动完全不可见的时候调用；\nonDestroy()\n\n在活动被销毁之前调用，之后活动的状态变为销毁状态；\nonRestart()\n\n这个方法在活动由停止状态变为运行状态之前调用，就是活动被重新启动的时候调用；\n5、体验活动的生命周期\n\n准备工作\n*  新建一个项目，允许自动创建活动和布局，并设置主活动；\n*  再分别创建两人子活动NormalActivity(布局命名：normal_layout)和DialogActivity(布局命名：dialog_layout)；\n*  normal_layout.xml 修改成内容如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"this is a mormal activity\"\n        />\n\n</LinearLayout>\n```\n*  dialog_layout.xml 修改成内容如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              >\n    <TextView\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"wrap_content\"\n        android:text=\"This is a dialog activity\"\n        />\n</LinearLayout>\n```\n修改注册表AndroidManifest.xml如下：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.bignerdranch.android.activity_text\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <activity android:name=\".NormalActivity\">\n        </activity>\n        <activity android:name=\".DialoActivity\"\n            android:theme=\"@andrid:style/Theme.Dialog\">\n        </activity>\n    </application>\n\n</manifest>\n```\n添加两个按钮，一个用于启动活动NormalActivity，一个用于启动DialogActivity\n主活动的布局如下:\n```\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/start_normal_activity\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Start normal activity\"/>\n\n    <Button\n        android:id=\"@+id/start_dialog_activity\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Start dialog activity\"\n        />\n</LinearLayout>\n```\n活动修改代码如下:\n```\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\n\npublic class MainActivity extends AppCompatActivity {\n\n    public static final String TAG = \"MainActivity\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log.w(TAG,\"onCreate\");\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);\n        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);\n\n        //设置按钮的签听事件\n        startNormalActivity.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n                Intent intent = new Intent(MainActivity.this,NormalActivity.class);\n                startActivity(intent);\n            }\n        });\n\n        //设置按钮的签听事件\n        startDialogActivity.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n                Intent intent = new Intent(MainActivity.this,DialoActivity.class);\n                startActivity(intent);\n            }\n        });\n\n        }\n    protected void onStart(){\n        super.onStart();\n        Log.w(TAG,\"onStart\");\n    }\n\n    protected  void onResume(){\n        super.onResume();\n        Log.w(TAG,\"Onresume\");\n    }\n\n    protected  void onPause(){\n        super.onPause();\n        Log.w(TAG,\"onpause\");\n    }\n\n    protected  void onStop(){\n        super.onStop();\n        Log.w(TAG,\"onstop\");\n    }\n\n    protected void onDestroy(){\n        super.onDestroy();\n        Log.w(TAG,\"onDestroy\");\n    }\n\n    protected void onRestart(){\n        super.onRestart();\n        Log.w(TAG,\"onRestart\");\n    }\n}\n```\n进入时打印如下：\n```\n04-10 01:18:06.875 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动第一次创建的时候调用>> onCreate\n04-10 01:18:06.908 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用>> onStart\n04-10 01:18:06.911 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用>> Onresume\n```\n点击START NOTMAL ACTIVITY 按钮时会打印 如下：\n```\n04-10 01:18:27.265 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用>> onpause\n04-10 01:18:27.589 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用>> onstop\n```\n再点击返回主活动页面时打印 如下：\n```\n04-10 01:18:46.132 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由停止状态变为运行状态之前调用>> onRestart\n04-10 01:18:46.133 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用>> onStart\n04-10 01:18:46.134 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用>> Onresume\n```\n点击Start dialog activity 按钮进打印如下：\n```\n04-10 17:22:18.739 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用>> onpause\n```\n再点击返回主活动页面时打印 如下：\n```\n04-10 17:22:46.798 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用>> Onresume\n```\n再点击返回退出app时打印\n```\n04-10 01:20:35.510 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用>> onpause\n04-10 01:20:36.031 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用>> onstop\n    活动被销毁之前调用>> onDestroy\n```\n遇到的问题\n在运行过程中点击Start dialog activity 按钮弹出框的时候，会发生闪退\n分析出原因为类继承的问题，修改方法如下；\n修改DialoActivity.class中DialoActivity为继承Activity类，代码如下：\n```\npackage com.bignerdranch.android.activity_text;\n\nimport android.app.Activity;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\n\npublic class DialoActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.dialog_layout);\n    }\n}\n```","source":"_posts/android_activity4.md","raw":"---\ntitle:  Android_Activity_4-活动的生命周期探究\ndate:  2018-04-10 16:25:25\ntags: [android,Activity]\ncategories: 张永枫\ndescription: 本文是以Android Studi为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录\n---\n1、介绍\n\nAndroid的活动是可以层叠的，我们每启动一个新的活动，就会覆盖有原活动之上，点击Back键之后会销毁最上面的活动，下面的一个活动就会重新显示出来。\n2、 返回栈\n\nAndroid使用（Task）来管理活动；\n一个任务就是一组存放在栈里的的活动集合，这个栈也称之为返回栈（back Stack）;\n栈是一种先进先出的数据结构；\n工作流程：\n    在默认情况下，\n    每当启动了一个新的活动，它会在返回栈中入栈，并处于栈顶的位置，\n    每当我们按下Back键或调用finish()方法去销毁一个活动时，处于栈顶的位置的活动就会出栈，这时前一个入栈的活动就会重新处于栈顶的位置，系统就会是显示处于栈顶的活动给用。\n3、活动状态（每个活动其生命周期最多可能会有4种状态）\n\n3.1、运行状态\n\n当一个活动位于返回栈的栈顶时，活动就处于运行状态。\n3.2、暂停状态\n\n当一个活动不再处于栈顶位置，但仍然可见时，活动就进入了暂停状态。\n示例：并不是每一个活动都会占满整个屏幕，比如对话框形式的活动就只会占用屏幕中间的部分区域，你仍然可以看到后面的活动；\n处于暂停状态的活动仍然是完全存活着的；\n只有在内存极低的情况下才会考虑回收这种活动；\n3.3、停止状态\n\n当一个活动不再处于栈顶位置，并且完成不可见的时候，就进入了停止状态。系统会为这种活动保存相应的状态和成员变量（但是当其他地方需要内存时，处于停止活动下的活动有可能会被系统回收。）\n3.4、销毁状态\n\n当一个活动从返回栈中移除后变成了销毁状态。系统会倾向回收这种状态的活动，以保证手机内存的充足。\n4、活动的生存期\n\nActivity中定义了7个回调方法，覆盖了生命周期的每一个环节；\nonCreate()\n\n每个活动基本都会重写这个方法，它会在活动第一次创建的时候调用；这个方法会完成活动的初始化操作，比如:加载布局、绑定事件；\nonStart()\n\n这个方法在活动由不可见变为可见的时候调用；\nonResume()\n\n这个方法在活动准备好和用户进行交互的时候调用，此时的活动一定位于返回栈的栈顶，并且处于运行状态；\nonPause()\n\n这个方法在系统准备去启动或者恢复另一个活动的时候调用；\n（通常会在这个方法中将一）\nonStop()\n\n这个方法在活动完全不可见的时候调用；\nonDestroy()\n\n在活动被销毁之前调用，之后活动的状态变为销毁状态；\nonRestart()\n\n这个方法在活动由停止状态变为运行状态之前调用，就是活动被重新启动的时候调用；\n5、体验活动的生命周期\n\n准备工作\n*  新建一个项目，允许自动创建活动和布局，并设置主活动；\n*  再分别创建两人子活动NormalActivity(布局命名：normal_layout)和DialogActivity(布局命名：dialog_layout)；\n*  normal_layout.xml 修改成内容如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"this is a mormal activity\"\n        />\n\n</LinearLayout>\n```\n*  dialog_layout.xml 修改成内容如下：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              >\n    <TextView\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"wrap_content\"\n        android:text=\"This is a dialog activity\"\n        />\n</LinearLayout>\n```\n修改注册表AndroidManifest.xml如下：\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.bignerdranch.android.activity_text\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <activity android:name=\".NormalActivity\">\n        </activity>\n        <activity android:name=\".DialoActivity\"\n            android:theme=\"@andrid:style/Theme.Dialog\">\n        </activity>\n    </application>\n\n</manifest>\n```\n添加两个按钮，一个用于启动活动NormalActivity，一个用于启动DialogActivity\n主活动的布局如下:\n```\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/start_normal_activity\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Start normal activity\"/>\n\n    <Button\n        android:id=\"@+id/start_dialog_activity\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Start dialog activity\"\n        />\n</LinearLayout>\n```\n活动修改代码如下:\n```\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\n\npublic class MainActivity extends AppCompatActivity {\n\n    public static final String TAG = \"MainActivity\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        Log.w(TAG,\"onCreate\");\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);\n        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);\n\n        //设置按钮的签听事件\n        startNormalActivity.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n                Intent intent = new Intent(MainActivity.this,NormalActivity.class);\n                startActivity(intent);\n            }\n        });\n\n        //设置按钮的签听事件\n        startDialogActivity.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n                Intent intent = new Intent(MainActivity.this,DialoActivity.class);\n                startActivity(intent);\n            }\n        });\n\n        }\n    protected void onStart(){\n        super.onStart();\n        Log.w(TAG,\"onStart\");\n    }\n\n    protected  void onResume(){\n        super.onResume();\n        Log.w(TAG,\"Onresume\");\n    }\n\n    protected  void onPause(){\n        super.onPause();\n        Log.w(TAG,\"onpause\");\n    }\n\n    protected  void onStop(){\n        super.onStop();\n        Log.w(TAG,\"onstop\");\n    }\n\n    protected void onDestroy(){\n        super.onDestroy();\n        Log.w(TAG,\"onDestroy\");\n    }\n\n    protected void onRestart(){\n        super.onRestart();\n        Log.w(TAG,\"onRestart\");\n    }\n}\n```\n进入时打印如下：\n```\n04-10 01:18:06.875 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动第一次创建的时候调用>> onCreate\n04-10 01:18:06.908 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用>> onStart\n04-10 01:18:06.911 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用>> Onresume\n```\n点击START NOTMAL ACTIVITY 按钮时会打印 如下：\n```\n04-10 01:18:27.265 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用>> onpause\n04-10 01:18:27.589 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用>> onstop\n```\n再点击返回主活动页面时打印 如下：\n```\n04-10 01:18:46.132 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由停止状态变为运行状态之前调用>> onRestart\n04-10 01:18:46.133 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用>> onStart\n04-10 01:18:46.134 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用>> Onresume\n```\n点击Start dialog activity 按钮进打印如下：\n```\n04-10 17:22:18.739 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用>> onpause\n```\n再点击返回主活动页面时打印 如下：\n```\n04-10 17:22:46.798 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用>> Onresume\n```\n再点击返回退出app时打印\n```\n04-10 01:20:35.510 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用>> onpause\n04-10 01:20:36.031 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用>> onstop\n    活动被销毁之前调用>> onDestroy\n```\n遇到的问题\n在运行过程中点击Start dialog activity 按钮弹出框的时候，会发生闪退\n分析出原因为类继承的问题，修改方法如下；\n修改DialoActivity.class中DialoActivity为继承Activity类，代码如下：\n```\npackage com.bignerdranch.android.activity_text;\n\nimport android.app.Activity;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\n\npublic class DialoActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.dialog_layout);\n    }\n}\n```","slug":"android_activity4","published":1,"updated":"2019-05-07T02:19:37.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcoxm6001sp7sad95sbtkl","content":"<p>1、介绍</p>\n<p>Android的活动是可以层叠的，我们每启动一个新的活动，就会覆盖有原活动之上，点击Back键之后会销毁最上面的活动，下面的一个活动就会重新显示出来。<br>2、 返回栈</p>\n<p>Android使用（Task）来管理活动；<br>一个任务就是一组存放在栈里的的活动集合，这个栈也称之为返回栈（back Stack）;<br>栈是一种先进先出的数据结构；<br>工作流程：<br>    在默认情况下，<br>    每当启动了一个新的活动，它会在返回栈中入栈，并处于栈顶的位置，<br>    每当我们按下Back键或调用finish()方法去销毁一个活动时，处于栈顶的位置的活动就会出栈，这时前一个入栈的活动就会重新处于栈顶的位置，系统就会是显示处于栈顶的活动给用。<br>3、活动状态（每个活动其生命周期最多可能会有4种状态）</p>\n<p>3.1、运行状态</p>\n<p>当一个活动位于返回栈的栈顶时，活动就处于运行状态。<br>3.2、暂停状态</p>\n<p>当一个活动不再处于栈顶位置，但仍然可见时，活动就进入了暂停状态。<br>示例：并不是每一个活动都会占满整个屏幕，比如对话框形式的活动就只会占用屏幕中间的部分区域，你仍然可以看到后面的活动；<br>处于暂停状态的活动仍然是完全存活着的；<br>只有在内存极低的情况下才会考虑回收这种活动；<br>3.3、停止状态</p>\n<p>当一个活动不再处于栈顶位置，并且完成不可见的时候，就进入了停止状态。系统会为这种活动保存相应的状态和成员变量（但是当其他地方需要内存时，处于停止活动下的活动有可能会被系统回收。）<br>3.4、销毁状态</p>\n<p>当一个活动从返回栈中移除后变成了销毁状态。系统会倾向回收这种状态的活动，以保证手机内存的充足。<br>4、活动的生存期</p>\n<p>Activity中定义了7个回调方法，覆盖了生命周期的每一个环节；<br>onCreate()</p>\n<p>每个活动基本都会重写这个方法，它会在活动第一次创建的时候调用；这个方法会完成活动的初始化操作，比如:加载布局、绑定事件；<br>onStart()</p>\n<p>这个方法在活动由不可见变为可见的时候调用；<br>onResume()</p>\n<p>这个方法在活动准备好和用户进行交互的时候调用，此时的活动一定位于返回栈的栈顶，并且处于运行状态；<br>onPause()</p>\n<p>这个方法在系统准备去启动或者恢复另一个活动的时候调用；<br>（通常会在这个方法中将一）<br>onStop()</p>\n<p>这个方法在活动完全不可见的时候调用；<br>onDestroy()</p>\n<p>在活动被销毁之前调用，之后活动的状态变为销毁状态；<br>onRestart()</p>\n<p>这个方法在活动由停止状态变为运行状态之前调用，就是活动被重新启动的时候调用；<br>5、体验活动的生命周期</p>\n<p>准备工作</p>\n<ul>\n<li>新建一个项目，允许自动创建活动和布局，并设置主活动；</li>\n<li>再分别创建两人子活动NormalActivity(布局命名：normal_layout)和DialogActivity(布局命名：dialog_layout)；</li>\n<li><p>normal_layout.xml 修改成内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;this is a mormal activity&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dialog_layout.xml 修改成内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">              &gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;This is a dialog activity&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改注册表AndroidManifest.xml如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">          package=&quot;com.bignerdranch.android.activity_text&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">        android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class=\"line\">        android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.NormalActivity&quot;&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.DialoActivity&quot;</span><br><span class=\"line\">            android:theme=&quot;@andrid:style/Theme.Dialog&quot;&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加两个按钮，一个用于启动活动NormalActivity，一个用于启动DialogActivity<br>主活动的布局如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/start_normal_activity&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Start normal activity&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/start_dialog_activity&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Start dialog activity&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>活动修改代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String TAG = &quot;MainActivity&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        Log.w(TAG,&quot;onCreate&quot;);</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);</span><br><span class=\"line\">        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置按钮的签听事件</span><br><span class=\"line\">        startNormalActivity.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">                Intent intent = new Intent(MainActivity.this,NormalActivity.class);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置按钮的签听事件</span><br><span class=\"line\">        startDialogActivity.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">                Intent intent = new Intent(MainActivity.this,DialoActivity.class);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    protected void onStart()&#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        Log.w(TAG,&quot;onStart&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected  void onResume()&#123;</span><br><span class=\"line\">        super.onResume();</span><br><span class=\"line\">        Log.w(TAG,&quot;Onresume&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected  void onPause()&#123;</span><br><span class=\"line\">        super.onPause();</span><br><span class=\"line\">        Log.w(TAG,&quot;onpause&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected  void onStop()&#123;</span><br><span class=\"line\">        super.onStop();</span><br><span class=\"line\">        Log.w(TAG,&quot;onstop&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void onDestroy()&#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">        Log.w(TAG,&quot;onDestroy&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void onRestart()&#123;</span><br><span class=\"line\">        super.onRestart();</span><br><span class=\"line\">        Log.w(TAG,&quot;onRestart&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入时打印如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:18:06.875 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动第一次创建的时候调用&gt;&gt; onCreate</span><br><span class=\"line\">04-10 01:18:06.908 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用&gt;&gt; onStart</span><br><span class=\"line\">04-10 01:18:06.911 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用&gt;&gt; Onresume</span><br></pre></td></tr></table></figure></p>\n<p>点击START NOTMAL ACTIVITY 按钮时会打印 如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:18:27.265 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用&gt;&gt; onpause</span><br><span class=\"line\">04-10 01:18:27.589 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用&gt;&gt; onstop</span><br></pre></td></tr></table></figure></p>\n<p>再点击返回主活动页面时打印 如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:18:46.132 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由停止状态变为运行状态之前调用&gt;&gt; onRestart</span><br><span class=\"line\">04-10 01:18:46.133 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用&gt;&gt; onStart</span><br><span class=\"line\">04-10 01:18:46.134 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用&gt;&gt; Onresume</span><br></pre></td></tr></table></figure></p>\n<p>点击Start dialog activity 按钮进打印如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 17:22:18.739 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用&gt;&gt; onpause</span><br></pre></td></tr></table></figure></p>\n<p>再点击返回主活动页面时打印 如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 17:22:46.798 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用&gt;&gt; Onresume</span><br></pre></td></tr></table></figure></p>\n<p>再点击返回退出app时打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:20:35.510 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用&gt;&gt; onpause</span><br><span class=\"line\">04-10 01:20:36.031 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用&gt;&gt; onstop</span><br><span class=\"line\">    活动被销毁之前调用&gt;&gt; onDestroy</span><br></pre></td></tr></table></figure></p>\n<p>遇到的问题<br>在运行过程中点击Start dialog activity 按钮弹出框的时候，会发生闪退<br>分析出原因为类继承的问题，修改方法如下；<br>修改DialoActivity.class中DialoActivity为继承Activity类，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bignerdranch.android.activity_text;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.app.Activity;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DialoActivity extends Activity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.dialog_layout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、介绍</p>\n<p>Android的活动是可以层叠的，我们每启动一个新的活动，就会覆盖有原活动之上，点击Back键之后会销毁最上面的活动，下面的一个活动就会重新显示出来。<br>2、 返回栈</p>\n<p>Android使用（Task）来管理活动；<br>一个任务就是一组存放在栈里的的活动集合，这个栈也称之为返回栈（back Stack）;<br>栈是一种先进先出的数据结构；<br>工作流程：<br>    在默认情况下，<br>    每当启动了一个新的活动，它会在返回栈中入栈，并处于栈顶的位置，<br>    每当我们按下Back键或调用finish()方法去销毁一个活动时，处于栈顶的位置的活动就会出栈，这时前一个入栈的活动就会重新处于栈顶的位置，系统就会是显示处于栈顶的活动给用。<br>3、活动状态（每个活动其生命周期最多可能会有4种状态）</p>\n<p>3.1、运行状态</p>\n<p>当一个活动位于返回栈的栈顶时，活动就处于运行状态。<br>3.2、暂停状态</p>\n<p>当一个活动不再处于栈顶位置，但仍然可见时，活动就进入了暂停状态。<br>示例：并不是每一个活动都会占满整个屏幕，比如对话框形式的活动就只会占用屏幕中间的部分区域，你仍然可以看到后面的活动；<br>处于暂停状态的活动仍然是完全存活着的；<br>只有在内存极低的情况下才会考虑回收这种活动；<br>3.3、停止状态</p>\n<p>当一个活动不再处于栈顶位置，并且完成不可见的时候，就进入了停止状态。系统会为这种活动保存相应的状态和成员变量（但是当其他地方需要内存时，处于停止活动下的活动有可能会被系统回收。）<br>3.4、销毁状态</p>\n<p>当一个活动从返回栈中移除后变成了销毁状态。系统会倾向回收这种状态的活动，以保证手机内存的充足。<br>4、活动的生存期</p>\n<p>Activity中定义了7个回调方法，覆盖了生命周期的每一个环节；<br>onCreate()</p>\n<p>每个活动基本都会重写这个方法，它会在活动第一次创建的时候调用；这个方法会完成活动的初始化操作，比如:加载布局、绑定事件；<br>onStart()</p>\n<p>这个方法在活动由不可见变为可见的时候调用；<br>onResume()</p>\n<p>这个方法在活动准备好和用户进行交互的时候调用，此时的活动一定位于返回栈的栈顶，并且处于运行状态；<br>onPause()</p>\n<p>这个方法在系统准备去启动或者恢复另一个活动的时候调用；<br>（通常会在这个方法中将一）<br>onStop()</p>\n<p>这个方法在活动完全不可见的时候调用；<br>onDestroy()</p>\n<p>在活动被销毁之前调用，之后活动的状态变为销毁状态；<br>onRestart()</p>\n<p>这个方法在活动由停止状态变为运行状态之前调用，就是活动被重新启动的时候调用；<br>5、体验活动的生命周期</p>\n<p>准备工作</p>\n<ul>\n<li>新建一个项目，允许自动创建活动和布局，并设置主活动；</li>\n<li>再分别创建两人子活动NormalActivity(布局命名：normal_layout)和DialogActivity(布局命名：dialog_layout)；</li>\n<li><p>normal_layout.xml 修改成内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;this is a mormal activity&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dialog_layout.xml 修改成内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">              &gt;</span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;This is a dialog activity&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>修改注册表AndroidManifest.xml如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">          package=&quot;com.bignerdranch.android.activity_text&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">        android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">        android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class=\"line\">        android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.NormalActivity&quot;&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">        &lt;activity android:name=&quot;.DialoActivity&quot;</span><br><span class=\"line\">            android:theme=&quot;@andrid:style/Theme.Dialog&quot;&gt;</span><br><span class=\"line\">        &lt;/activity&gt;</span><br><span class=\"line\">    &lt;/application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加两个按钮，一个用于启动活动NormalActivity，一个用于启动DialogActivity<br>主活动的布局如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/start_normal_activity&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Start normal activity&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/start_dialog_activity&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Start dialog activity&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>活动修改代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String TAG = &quot;MainActivity&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        Log.w(TAG,&quot;onCreate&quot;);</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);</span><br><span class=\"line\">        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置按钮的签听事件</span><br><span class=\"line\">        startNormalActivity.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">                Intent intent = new Intent(MainActivity.this,NormalActivity.class);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置按钮的签听事件</span><br><span class=\"line\">        startDialogActivity.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">                Intent intent = new Intent(MainActivity.this,DialoActivity.class);</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    protected void onStart()&#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        Log.w(TAG,&quot;onStart&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected  void onResume()&#123;</span><br><span class=\"line\">        super.onResume();</span><br><span class=\"line\">        Log.w(TAG,&quot;Onresume&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected  void onPause()&#123;</span><br><span class=\"line\">        super.onPause();</span><br><span class=\"line\">        Log.w(TAG,&quot;onpause&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected  void onStop()&#123;</span><br><span class=\"line\">        super.onStop();</span><br><span class=\"line\">        Log.w(TAG,&quot;onstop&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void onDestroy()&#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">        Log.w(TAG,&quot;onDestroy&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void onRestart()&#123;</span><br><span class=\"line\">        super.onRestart();</span><br><span class=\"line\">        Log.w(TAG,&quot;onRestart&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>进入时打印如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:18:06.875 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动第一次创建的时候调用&gt;&gt; onCreate</span><br><span class=\"line\">04-10 01:18:06.908 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用&gt;&gt; onStart</span><br><span class=\"line\">04-10 01:18:06.911 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用&gt;&gt; Onresume</span><br></pre></td></tr></table></figure></p>\n<p>点击START NOTMAL ACTIVITY 按钮时会打印 如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:18:27.265 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用&gt;&gt; onpause</span><br><span class=\"line\">04-10 01:18:27.589 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用&gt;&gt; onstop</span><br></pre></td></tr></table></figure></p>\n<p>再点击返回主活动页面时打印 如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:18:46.132 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由停止状态变为运行状态之前调用&gt;&gt; onRestart</span><br><span class=\"line\">04-10 01:18:46.133 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动由不可见变为可见的时候调用&gt;&gt; onStart</span><br><span class=\"line\">04-10 01:18:46.134 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用&gt;&gt; Onresume</span><br></pre></td></tr></table></figure></p>\n<p>点击Start dialog activity 按钮进打印如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 17:22:18.739 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用&gt;&gt; onpause</span><br></pre></td></tr></table></figure></p>\n<p>再点击返回主活动页面时打印 如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 17:22:46.798 3798-3798/com.bignerdranch.android.activity_text W/MainActivity: 活动准备好和用户进行交互的时候调用&gt;&gt; Onresume</span><br></pre></td></tr></table></figure></p>\n<p>再点击返回退出app时打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-10 01:20:35.510 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 系统准备去启动或者恢复另一个活动的时候调用&gt;&gt; onpause</span><br><span class=\"line\">04-10 01:20:36.031 21015-21015/com.bignerdranch.android.activity_text W/MainActivity: 活动完全不可见的时候调用&gt;&gt; onstop</span><br><span class=\"line\">    活动被销毁之前调用&gt;&gt; onDestroy</span><br></pre></td></tr></table></figure></p>\n<p>遇到的问题<br>在运行过程中点击Start dialog activity 按钮弹出框的时候，会发生闪退<br>分析出原因为类继承的问题，修改方法如下；<br>修改DialoActivity.class中DialoActivity为继承Activity类，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bignerdranch.android.activity_text;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.app.Activity;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DialoActivity extends Activity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.dialog_layout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Android_Activity_3-Intent和数据传递","date":"2018-04-01T08:25:25.000Z","description":"本文是以Android Studio为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录","_content":"\n<!-- TOC -->\n\n- [1、写在前面](#1写在前面)\n- [2、介绍](#2介绍)\n- [3、使用显示intent](#3使用显示intent)\n- [4、使用隐式Intent](#4使用隐式intent)\n- [5、更多隐式Intent用法](#5更多隐式intent用法)\n- [7、返回数据给上一个活动](#7返回数据给上一个活动)\n\n<!-- /TOC -->\n\n## 1、写在前面\n\n本文是以Android Studio为开发工具，\n<<第一行代码Anroid第2版>> 为学习指导书籍\n> [电子书pdf百度云下载地址:](https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg) \n密码:rx3g\n[Android Studio运行的测试代码下载地址:](https://zhangyongfeng1.github.io/dowland/MyApplication1.zip)\n\n\n## 2、介绍\n功能：从启动器的主活动进入其他的活动,\n\nInten 分为显示Intent 和隐式 Intent\n\nIntent 是android 程序中各组件的交互方式，\n\n1、可以指明当前组件想要执行的动作\n2、要不同组件之间传递数据\n3、可被用于启动活动、启动服务，以及发送广播等（下面以启动活动为例）\n\n\n## 3、使用显示intent\n\n1、新建一个activity\n```\n新建一个空的活动Activity,命名SecondActivity,并勾选Generate Layout File,\n\n自动创建布局文件，给布局文件命名second_layout\n\n```\n2、 编辑second_layout.xml,使用linearLayout,改成如下内容：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/button_3\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button 3\"\n        />\n</LinearLayout>\n```\n3、 在页面定义一个Button 3按钮\n\n4、查看 AndroidMainifest.xml 中活动的注册情况，Android Studio 会自动完成\n\n5、启动第二个活动\n```\nIntent 有多个构造函数的重载\n其中Intent(Context packageContext, Class<?>cls )\n第一个参数Context 要求提供一个启动活动的上下文\n第二个参数class 则是指定想要启动的目标活动\nActivity类 中有个启动活动的方法，这个方法接收一个Intent 参数。\n6、点击一个按钮，跳转到下一个活动页面\n```\n代码如下：\n```\nButton button3  = (Button) findViewById(R.id.button_3);\nbutton3.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n        startActivity(intent);\n    }\n});\n```\n## 4、使用隐式Intent\n\n不明确指出想要启动那个活动\n指定一系列抽象的action、category 信息\n交由系统去分析这个Intent.找出合适的活动去启动\n\n运行隐式Intent示例：\n1、为SecondActivity活动指定action /category\n```\n<activity android:name=\".SecondActivity\">\n    <intent-filter>\n        <action android:name=\"com.example.activitytext.ACTION_START\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n    </intent-filter>\n</activity>\n```\naction： 表示当前活动可以响应com.example.activitytext.ACTION_START 这个action\ncategory： 包括一些附加信息\n\n2、在first_layout.xml添加一个按钮\n```\n<Button\n    android:id=\"@+id/button_4\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"用隐式intent跳转到下一个活动页面\"\n    />\n```\n3、在MainActivity.java 添加按钮对应监听方法\n```\nButton button4  = (Button) findViewById(R.id.button_4);\nbutton4.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(\"android.intent.action.ACTION_START\");\n        startActivity(intent);\n    }\n});\n```\n4、运行代码\ncategory 这里是用的默认有name，所以可以不用指category 就能启动\n\n注：一个intent 可以指定多个category\n\n运行指定多个category示例：\n1、修改AndroidMainfest.xml文件\n```\n<activity android:name=\".SecondActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.ACTION_START\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <category android:name=\"android.intent.category.MY_CATEGORY\"/>\n    </intent-filter>\n</activity>\n```\n2.修改MainActivity.java文件\n```\nButton button4  = (Button) findViewById(R.id.button_4);\nbutton4.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(\"android.intent.action.ACTION_START\");\n        intent.addCategory(\"android.intent.category.MY_CATEGORY\");\n        startActivity(intent);\n    }\n});\n```\n\n## 5、更多隐式Intent用法\n ```\n使用隐式intent，不仅可以启动自已的程序内活动，还可以启动其他程序的活动，这使行Adnroid多个应用程序之间功能共享成功了可能，\n```\n示例：\n在应用程中展示一个网页，调用系统浏览器来打开网页\n1、新添加一个按钮\n```\n<Button\n    android:id=\"@+id/button_5\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"用隐式intent调用系统浏览器来打开网页\"\n    />\n```\n2、添加这个按钮的监听事件\n```\nButton button5  = (Button) findViewById(R.id.button_5);\nbutton5.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setData(Uri.parse(\"http://www.baidu.com\"));\n        startActivity(intent);\n    }\n});\n```\n> 可以通过在注册表中组给活动的<date>标签 添加android:scheme 数据协议为http 协议 这样ThridActivity 就可以响应一个网页。？\n\n示例：\n添加一个按钮，跳转调用系统打电话的页面\n1、在layout文件中添加一个按钮\n```\n<Button\n    android:id=\"@+id/button_6\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"用隐式intent调用系统打电话功能\"\n    />\n```\n2、在java中添加响应事件\n```\nButton button6  = (Button) findViewById(R.id.button_6);\nbutton6.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(Intent.ACTION_DIAL);\n        //Intent.ACTION_DIAL为 android 的内置活动\n        intent.setData(Uri.parse(\"tel:10086\"));\n        startActivity(intent);\n    }\n});\n```\n\n## 6、向下一个活动传递数据\n > 启动活动数据传递思路\n运用Intent 中putExtra()方法的重载，可以将数据暂存在Intent中，启动另一个活动后，只需要把这些数据再从Intent 中取出就可以了。\n\n示例：\n在MainActivity 中的一个字符串，想把这个字符串传递到SecondActivity 中去\n1、MainActivityk中修改代码如下：\n ````\nButton button3  = (Button) findViewById(R.id.button_3);\nbutton3.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        //设置一个变量\n        String data = \"Hello SecondActivity\";\n        Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n        intent.putExtra(\"data_name \",data);\n        startActivity(intent);\n    }\n});\n```\n2、在第二个活动中将数据取出并打印出来；\n\n```\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.second_layout);\n    Intent intent = getIntent();\n    String data1 = intent.getStringExtra(\"data_name\");\n    Log.d(\"SecondActivity\", data1);\n}\n```\n\n## 7、返回数据给上一个活动\n\n> Activity 还有一个startActivtyForResult() 也用于启动活动的方法，在活动销毁的时候返回一个结果给上一个活动\nstartActivityForResult()方法接收两个参数\n第一个参数是：Intent \n第二个参数是：请求码\n\n1、在MainActivity活动中设定一个监听跳到secondActivity\n```\n Button button3  = (Button) findViewById(R.id.button_3);\n        button3.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n                //设置一个变量\n                String data = \"Hello SecondActivity\";\n                Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n                intent.putExtra(\"data_name11\", data);\n//                 startActivity(intent);\n                startActivityForResult(intent,1);\n                //用startActivityForResult，启动secondActivity活动，在活动销毁的时候返回一个结果给上一个活动\n            }\n        });\n```\n2、在secondActivity，新增一个按钮，并定义一个监听的方法\n```\n<Button\n    android:id=\"@+id/button_2\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"返回上一页面，并返回第二个页面的参数\"\n    />\n```\n```\n//      点击返回上一个活动页面，并返回数据\n        Button button2 = (Button)  findViewById(R.id.button_2);\n        button2.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n            Intent intent = new Intent();\n            intent.putExtra(\"date_return\",\"Hello fristActivity\");\n            setResult(RESULT_OK,intent);\n\n            String data2 = intent.getStringExtra(\"date_return\");\n            Log.i(\"SecondActivity_back\", data2);\n\n            finish();\n            }\n        });\n```\n3、在MainActivity，重写onActivityResult（）方法，接收secondActivity返回的参数\n```\n//重写方法，secondActivity 活动关闭后会调用\nprotected void onActivityResult(int requestCode,int resultCode,Intent data){\n    switch (requestCode){\n        case 1:\n            if (resultCode == RESULT_OK){\n                String returnedData = data.getStringExtra(\"date_return\");\n                Log.i(\"MainActivity\",returnedData);\n            }\n            break;\n        default:\n    }\n}\n```\n\n设置back()返回事件\n\n> 重写onBackPressed()\n\n ```\n//重写返回的方法\npublic void onBackPressed(){\n    Intent intent = new Intent();\n    intent.putExtra(\"data_return\",\"Hello back FirstActivity\");\n    setResult(RESULT_OK,intent);\n    finish();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/android_activity3.md","raw":"---\ntitle:  Android_Activity_3-Intent和数据传递\ndate:  2018-04-1 16:25:25\ntags: [android,Activity]\ncategories: 张永枫\ndescription: 本文是以Android Studio为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录\n---\n\n<!-- TOC -->\n\n- [1、写在前面](#1写在前面)\n- [2、介绍](#2介绍)\n- [3、使用显示intent](#3使用显示intent)\n- [4、使用隐式Intent](#4使用隐式intent)\n- [5、更多隐式Intent用法](#5更多隐式intent用法)\n- [7、返回数据给上一个活动](#7返回数据给上一个活动)\n\n<!-- /TOC -->\n\n## 1、写在前面\n\n本文是以Android Studio为开发工具，\n<<第一行代码Anroid第2版>> 为学习指导书籍\n> [电子书pdf百度云下载地址:](https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg) \n密码:rx3g\n[Android Studio运行的测试代码下载地址:](https://zhangyongfeng1.github.io/dowland/MyApplication1.zip)\n\n\n## 2、介绍\n功能：从启动器的主活动进入其他的活动,\n\nInten 分为显示Intent 和隐式 Intent\n\nIntent 是android 程序中各组件的交互方式，\n\n1、可以指明当前组件想要执行的动作\n2、要不同组件之间传递数据\n3、可被用于启动活动、启动服务，以及发送广播等（下面以启动活动为例）\n\n\n## 3、使用显示intent\n\n1、新建一个activity\n```\n新建一个空的活动Activity,命名SecondActivity,并勾选Generate Layout File,\n\n自动创建布局文件，给布局文件命名second_layout\n\n```\n2、 编辑second_layout.xml,使用linearLayout,改成如下内容：\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:orientation=\"vertical\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <Button\n        android:id=\"@+id/button_3\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button 3\"\n        />\n</LinearLayout>\n```\n3、 在页面定义一个Button 3按钮\n\n4、查看 AndroidMainifest.xml 中活动的注册情况，Android Studio 会自动完成\n\n5、启动第二个活动\n```\nIntent 有多个构造函数的重载\n其中Intent(Context packageContext, Class<?>cls )\n第一个参数Context 要求提供一个启动活动的上下文\n第二个参数class 则是指定想要启动的目标活动\nActivity类 中有个启动活动的方法，这个方法接收一个Intent 参数。\n6、点击一个按钮，跳转到下一个活动页面\n```\n代码如下：\n```\nButton button3  = (Button) findViewById(R.id.button_3);\nbutton3.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n        startActivity(intent);\n    }\n});\n```\n## 4、使用隐式Intent\n\n不明确指出想要启动那个活动\n指定一系列抽象的action、category 信息\n交由系统去分析这个Intent.找出合适的活动去启动\n\n运行隐式Intent示例：\n1、为SecondActivity活动指定action /category\n```\n<activity android:name=\".SecondActivity\">\n    <intent-filter>\n        <action android:name=\"com.example.activitytext.ACTION_START\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n    </intent-filter>\n</activity>\n```\naction： 表示当前活动可以响应com.example.activitytext.ACTION_START 这个action\ncategory： 包括一些附加信息\n\n2、在first_layout.xml添加一个按钮\n```\n<Button\n    android:id=\"@+id/button_4\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"用隐式intent跳转到下一个活动页面\"\n    />\n```\n3、在MainActivity.java 添加按钮对应监听方法\n```\nButton button4  = (Button) findViewById(R.id.button_4);\nbutton4.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(\"android.intent.action.ACTION_START\");\n        startActivity(intent);\n    }\n});\n```\n4、运行代码\ncategory 这里是用的默认有name，所以可以不用指category 就能启动\n\n注：一个intent 可以指定多个category\n\n运行指定多个category示例：\n1、修改AndroidMainfest.xml文件\n```\n<activity android:name=\".SecondActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.ACTION_START\"/>\n        <category android:name=\"android.intent.category.DEFAULT\"/>\n        <category android:name=\"android.intent.category.MY_CATEGORY\"/>\n    </intent-filter>\n</activity>\n```\n2.修改MainActivity.java文件\n```\nButton button4  = (Button) findViewById(R.id.button_4);\nbutton4.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(\"android.intent.action.ACTION_START\");\n        intent.addCategory(\"android.intent.category.MY_CATEGORY\");\n        startActivity(intent);\n    }\n});\n```\n\n## 5、更多隐式Intent用法\n ```\n使用隐式intent，不仅可以启动自已的程序内活动，还可以启动其他程序的活动，这使行Adnroid多个应用程序之间功能共享成功了可能，\n```\n示例：\n在应用程中展示一个网页，调用系统浏览器来打开网页\n1、新添加一个按钮\n```\n<Button\n    android:id=\"@+id/button_5\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"用隐式intent调用系统浏览器来打开网页\"\n    />\n```\n2、添加这个按钮的监听事件\n```\nButton button5  = (Button) findViewById(R.id.button_5);\nbutton5.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setData(Uri.parse(\"http://www.baidu.com\"));\n        startActivity(intent);\n    }\n});\n```\n> 可以通过在注册表中组给活动的<date>标签 添加android:scheme 数据协议为http 协议 这样ThridActivity 就可以响应一个网页。？\n\n示例：\n添加一个按钮，跳转调用系统打电话的页面\n1、在layout文件中添加一个按钮\n```\n<Button\n    android:id=\"@+id/button_6\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"用隐式intent调用系统打电话功能\"\n    />\n```\n2、在java中添加响应事件\n```\nButton button6  = (Button) findViewById(R.id.button_6);\nbutton6.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        Intent intent = new Intent(Intent.ACTION_DIAL);\n        //Intent.ACTION_DIAL为 android 的内置活动\n        intent.setData(Uri.parse(\"tel:10086\"));\n        startActivity(intent);\n    }\n});\n```\n\n## 6、向下一个活动传递数据\n > 启动活动数据传递思路\n运用Intent 中putExtra()方法的重载，可以将数据暂存在Intent中，启动另一个活动后，只需要把这些数据再从Intent 中取出就可以了。\n\n示例：\n在MainActivity 中的一个字符串，想把这个字符串传递到SecondActivity 中去\n1、MainActivityk中修改代码如下：\n ````\nButton button3  = (Button) findViewById(R.id.button_3);\nbutton3.setOnClickListener(new View.OnClickListener(){\n    public void onClick(View v){\n        //设置一个变量\n        String data = \"Hello SecondActivity\";\n        Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n        intent.putExtra(\"data_name \",data);\n        startActivity(intent);\n    }\n});\n```\n2、在第二个活动中将数据取出并打印出来；\n\n```\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.second_layout);\n    Intent intent = getIntent();\n    String data1 = intent.getStringExtra(\"data_name\");\n    Log.d(\"SecondActivity\", data1);\n}\n```\n\n## 7、返回数据给上一个活动\n\n> Activity 还有一个startActivtyForResult() 也用于启动活动的方法，在活动销毁的时候返回一个结果给上一个活动\nstartActivityForResult()方法接收两个参数\n第一个参数是：Intent \n第二个参数是：请求码\n\n1、在MainActivity活动中设定一个监听跳到secondActivity\n```\n Button button3  = (Button) findViewById(R.id.button_3);\n        button3.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n                //设置一个变量\n                String data = \"Hello SecondActivity\";\n                Intent intent = new Intent(MainActivity.this,SecondActivity.class);\n                intent.putExtra(\"data_name11\", data);\n//                 startActivity(intent);\n                startActivityForResult(intent,1);\n                //用startActivityForResult，启动secondActivity活动，在活动销毁的时候返回一个结果给上一个活动\n            }\n        });\n```\n2、在secondActivity，新增一个按钮，并定义一个监听的方法\n```\n<Button\n    android:id=\"@+id/button_2\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"返回上一页面，并返回第二个页面的参数\"\n    />\n```\n```\n//      点击返回上一个活动页面，并返回数据\n        Button button2 = (Button)  findViewById(R.id.button_2);\n        button2.setOnClickListener(new View.OnClickListener(){\n            public void onClick(View v){\n            Intent intent = new Intent();\n            intent.putExtra(\"date_return\",\"Hello fristActivity\");\n            setResult(RESULT_OK,intent);\n\n            String data2 = intent.getStringExtra(\"date_return\");\n            Log.i(\"SecondActivity_back\", data2);\n\n            finish();\n            }\n        });\n```\n3、在MainActivity，重写onActivityResult（）方法，接收secondActivity返回的参数\n```\n//重写方法，secondActivity 活动关闭后会调用\nprotected void onActivityResult(int requestCode,int resultCode,Intent data){\n    switch (requestCode){\n        case 1:\n            if (resultCode == RESULT_OK){\n                String returnedData = data.getStringExtra(\"date_return\");\n                Log.i(\"MainActivity\",returnedData);\n            }\n            break;\n        default:\n    }\n}\n```\n\n设置back()返回事件\n\n> 重写onBackPressed()\n\n ```\n//重写返回的方法\npublic void onBackPressed(){\n    Intent intent = new Intent();\n    intent.putExtra(\"data_return\",\"Hello back FirstActivity\");\n    setResult(RESULT_OK,intent);\n    finish();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"android_activity3","published":1,"updated":"2019-05-07T02:19:37.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcoxm8001tp7sac08dn4eu","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#1写在前面\">1、写在前面</a></li>\n<li><a href=\"#2介绍\">2、介绍</a></li>\n<li><a href=\"#3使用显示intent\">3、使用显示intent</a></li>\n<li><a href=\"#4使用隐式intent\">4、使用隐式Intent</a></li>\n<li><a href=\"#5更多隐式intent用法\">5、更多隐式Intent用法</a></li>\n<li><a href=\"#7返回数据给上一个活动\">7、返回数据给上一个活动</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>本文是以Android Studio为开发工具，<br>&lt;&lt;第一行代码Anroid第2版&gt;&gt; 为学习指导书籍</p>\n<blockquote>\n<p><a href=\"https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg\" target=\"_blank\" rel=\"noopener\">电子书pdf百度云下载地址:</a><br>密码:rx3g<br><a href=\"https://zhangyongfeng1.github.io/dowland/MyApplication1.zip\">Android Studio运行的测试代码下载地址:</a></p>\n</blockquote>\n<h2 id=\"2、介绍\"><a href=\"#2、介绍\" class=\"headerlink\" title=\"2、介绍\"></a>2、介绍</h2><p>功能：从启动器的主活动进入其他的活动,</p>\n<p>Inten 分为显示Intent 和隐式 Intent</p>\n<p>Intent 是android 程序中各组件的交互方式，</p>\n<p>1、可以指明当前组件想要执行的动作<br>2、要不同组件之间传递数据<br>3、可被用于启动活动、启动服务，以及发送广播等（下面以启动活动为例）</p>\n<h2 id=\"3、使用显示intent\"><a href=\"#3、使用显示intent\" class=\"headerlink\" title=\"3、使用显示intent\"></a>3、使用显示intent</h2><p>1、新建一个activity<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建一个空的活动Activity,命名SecondActivity,并勾选Generate Layout File,</span><br><span class=\"line\"></span><br><span class=\"line\">自动创建布局文件，给布局文件命名second_layout</span><br></pre></td></tr></table></figure></p>\n<p>2、 编辑second_layout.xml,使用linearLayout,改成如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/button_3&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Button 3&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3、 在页面定义一个Button 3按钮</p>\n<p>4、查看 AndroidMainifest.xml 中活动的注册情况，Android Studio 会自动完成</p>\n<p>5、启动第二个活动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent 有多个构造函数的重载</span><br><span class=\"line\">其中Intent(Context packageContext, Class&lt;?&gt;cls )</span><br><span class=\"line\">第一个参数Context 要求提供一个启动活动的上下文</span><br><span class=\"line\">第二个参数class 则是指定想要启动的目标活动</span><br><span class=\"line\">Activity类 中有个启动活动的方法，这个方法接收一个Intent 参数。</span><br><span class=\"line\">6、点击一个按钮，跳转到下一个活动页面</span><br></pre></td></tr></table></figure></p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button3  = (Button) findViewById(R.id.button_3);</span><br><span class=\"line\">button3.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、使用隐式Intent\"><a href=\"#4、使用隐式Intent\" class=\"headerlink\" title=\"4、使用隐式Intent\"></a>4、使用隐式Intent</h2><p>不明确指出想要启动那个活动<br>指定一系列抽象的action、category 信息<br>交由系统去分析这个Intent.找出合适的活动去启动</p>\n<p>运行隐式Intent示例：<br>1、为SecondActivity活动指定action /category<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.SecondActivity&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=&quot;com.example.activitytext.ACTION_START&quot;/&gt;</span><br><span class=\"line\">        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></p>\n<p>action： 表示当前活动可以响应com.example.activitytext.ACTION_START 这个action<br>category： 包括一些附加信息</p>\n<p>2、在first_layout.xml添加一个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_4&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;用隐式intent跳转到下一个活动页面&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3、在MainActivity.java 添加按钮对应监听方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button4  = (Button) findViewById(R.id.button_4);</span><br><span class=\"line\">button4.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.intent.action.ACTION_START&quot;);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>4、运行代码<br>category 这里是用的默认有name，所以可以不用指category 就能启动</p>\n<p>注：一个intent 可以指定多个category</p>\n<p>运行指定多个category示例：<br>1、修改AndroidMainfest.xml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.SecondActivity&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=&quot;android.intent.action.ACTION_START&quot;/&gt;</span><br><span class=\"line\">        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</span><br><span class=\"line\">        &lt;category android:name=&quot;android.intent.category.MY_CATEGORY&quot;/&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.修改MainActivity.java文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button4  = (Button) findViewById(R.id.button_4);</span><br><span class=\"line\">button4.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.intent.action.ACTION_START&quot;);</span><br><span class=\"line\">        intent.addCategory(&quot;android.intent.category.MY_CATEGORY&quot;);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5、更多隐式Intent用法\"><a href=\"#5、更多隐式Intent用法\" class=\"headerlink\" title=\"5、更多隐式Intent用法\"></a>5、更多隐式Intent用法</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用隐式intent，不仅可以启动自已的程序内活动，还可以启动其他程序的活动，这使行Adnroid多个应用程序之间功能共享成功了可能，</span><br></pre></td></tr></table></figure>\n<p>示例：<br>在应用程中展示一个网页，调用系统浏览器来打开网页<br>1、新添加一个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_5&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;用隐式intent调用系统浏览器来打开网页&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2、添加这个按钮的监听事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button5  = (Button) findViewById(R.id.button_5);</span><br><span class=\"line\">button5.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">        intent.setData(Uri.parse(&quot;http://www.baidu.com&quot;));</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>可以通过在注册表中组给活动的<date>标签 添加android:scheme 数据协议为http 协议 这样ThridActivity 就可以响应一个网页。？</date></p>\n</blockquote>\n<p>示例：<br>添加一个按钮，跳转调用系统打电话的页面<br>1、在layout文件中添加一个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_6&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;用隐式intent调用系统打电话功能&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2、在java中添加响应事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button6  = (Button) findViewById(R.id.button_6);</span><br><span class=\"line\">button6.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(Intent.ACTION_DIAL);</span><br><span class=\"line\">        //Intent.ACTION_DIAL为 android 的内置活动</span><br><span class=\"line\">        intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6、向下一个活动传递数据\"><a href=\"#6、向下一个活动传递数据\" class=\"headerlink\" title=\"6、向下一个活动传递数据\"></a>6、向下一个活动传递数据</h2><blockquote>\n<p>启动活动数据传递思路<br>运用Intent 中putExtra()方法的重载，可以将数据暂存在Intent中，启动另一个活动后，只需要把这些数据再从Intent 中取出就可以了。</p>\n</blockquote>\n<p>示例：<br>在MainActivity 中的一个字符串，想把这个字符串传递到SecondActivity 中去<br>1、MainActivityk中修改代码如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button3  = (Button) findViewById(R.id.button_3);</span><br><span class=\"line\">button3.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        //设置一个变量</span><br><span class=\"line\">        String data = &quot;Hello SecondActivity&quot;;</span><br><span class=\"line\">        Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">        intent.putExtra(&quot;data_name &quot;,data);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>2、在第二个活动中将数据取出并打印出来；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.second_layout);</span><br><span class=\"line\">    Intent intent = getIntent();</span><br><span class=\"line\">    String data1 = intent.getStringExtra(&quot;data_name&quot;);</span><br><span class=\"line\">    Log.d(&quot;SecondActivity&quot;, data1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、返回数据给上一个活动\"><a href=\"#7、返回数据给上一个活动\" class=\"headerlink\" title=\"7、返回数据给上一个活动\"></a>7、返回数据给上一个活动</h2><blockquote>\n<p>Activity 还有一个startActivtyForResult() 也用于启动活动的方法，在活动销毁的时候返回一个结果给上一个活动<br>startActivityForResult()方法接收两个参数<br>第一个参数是：Intent<br>第二个参数是：请求码</p>\n</blockquote>\n<p>1、在MainActivity活动中设定一个监听跳到secondActivity<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Button button3  = (Button) findViewById(R.id.button_3);</span><br><span class=\"line\">        button3.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">                //设置一个变量</span><br><span class=\"line\">                String data = &quot;Hello SecondActivity&quot;;</span><br><span class=\"line\">                Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">                intent.putExtra(&quot;data_name11&quot;, data);</span><br><span class=\"line\">//                 startActivity(intent);</span><br><span class=\"line\">                startActivityForResult(intent,1);</span><br><span class=\"line\">                //用startActivityForResult，启动secondActivity活动，在活动销毁的时候返回一个结果给上一个活动</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>2、在secondActivity，新增一个按钮，并定义一个监听的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_2&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;返回上一页面，并返回第二个页面的参数&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//      点击返回上一个活动页面，并返回数据</span><br><span class=\"line\">        Button button2 = (Button)  findViewById(R.id.button_2);</span><br><span class=\"line\">        button2.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">            Intent intent = new Intent();</span><br><span class=\"line\">            intent.putExtra(&quot;date_return&quot;,&quot;Hello fristActivity&quot;);</span><br><span class=\"line\">            setResult(RESULT_OK,intent);</span><br><span class=\"line\"></span><br><span class=\"line\">            String data2 = intent.getStringExtra(&quot;date_return&quot;);</span><br><span class=\"line\">            Log.i(&quot;SecondActivity_back&quot;, data2);</span><br><span class=\"line\"></span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>3、在MainActivity，重写onActivityResult（）方法，接收secondActivity返回的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写方法，secondActivity 活动关闭后会调用</span><br><span class=\"line\">protected void onActivityResult(int requestCode,int resultCode,Intent data)&#123;</span><br><span class=\"line\">    switch (requestCode)&#123;</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            if (resultCode == RESULT_OK)&#123;</span><br><span class=\"line\">                String returnedData = data.getStringExtra(&quot;date_return&quot;);</span><br><span class=\"line\">                Log.i(&quot;MainActivity&quot;,returnedData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置back()返回事件</p>\n<blockquote>\n<p>重写onBackPressed()</p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写返回的方法</span><br><span class=\"line\">public void onBackPressed()&#123;</span><br><span class=\"line\">    Intent intent = new Intent();</span><br><span class=\"line\">    intent.putExtra(&quot;data_return&quot;,&quot;Hello back FirstActivity&quot;);</span><br><span class=\"line\">    setResult(RESULT_OK,intent);</span><br><span class=\"line\">    finish();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#1写在前面\">1、写在前面</a></li>\n<li><a href=\"#2介绍\">2、介绍</a></li>\n<li><a href=\"#3使用显示intent\">3、使用显示intent</a></li>\n<li><a href=\"#4使用隐式intent\">4、使用隐式Intent</a></li>\n<li><a href=\"#5更多隐式intent用法\">5、更多隐式Intent用法</a></li>\n<li><a href=\"#7返回数据给上一个活动\">7、返回数据给上一个活动</a></li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>本文是以Android Studio为开发工具，<br>&lt;&lt;第一行代码Anroid第2版&gt;&gt; 为学习指导书籍</p>\n<blockquote>\n<p><a href=\"https://pan.baidu.com/s/1GP4sv4NLIvTo8gECTkOxQg\" target=\"_blank\" rel=\"noopener\">电子书pdf百度云下载地址:</a><br>密码:rx3g<br><a href=\"https://zhangyongfeng1.github.io/dowland/MyApplication1.zip\">Android Studio运行的测试代码下载地址:</a></p>\n</blockquote>\n<h2 id=\"2、介绍\"><a href=\"#2、介绍\" class=\"headerlink\" title=\"2、介绍\"></a>2、介绍</h2><p>功能：从启动器的主活动进入其他的活动,</p>\n<p>Inten 分为显示Intent 和隐式 Intent</p>\n<p>Intent 是android 程序中各组件的交互方式，</p>\n<p>1、可以指明当前组件想要执行的动作<br>2、要不同组件之间传递数据<br>3、可被用于启动活动、启动服务，以及发送广播等（下面以启动活动为例）</p>\n<h2 id=\"3、使用显示intent\"><a href=\"#3、使用显示intent\" class=\"headerlink\" title=\"3、使用显示intent\"></a>3、使用显示intent</h2><p>1、新建一个activity<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建一个空的活动Activity,命名SecondActivity,并勾选Generate Layout File,</span><br><span class=\"line\"></span><br><span class=\"line\">自动创建布局文件，给布局文件命名second_layout</span><br></pre></td></tr></table></figure></p>\n<p>2、 编辑second_layout.xml,使用linearLayout,改成如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">              android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">              android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">              android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/button_3&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Button 3&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3、 在页面定义一个Button 3按钮</p>\n<p>4、查看 AndroidMainifest.xml 中活动的注册情况，Android Studio 会自动完成</p>\n<p>5、启动第二个活动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent 有多个构造函数的重载</span><br><span class=\"line\">其中Intent(Context packageContext, Class&lt;?&gt;cls )</span><br><span class=\"line\">第一个参数Context 要求提供一个启动活动的上下文</span><br><span class=\"line\">第二个参数class 则是指定想要启动的目标活动</span><br><span class=\"line\">Activity类 中有个启动活动的方法，这个方法接收一个Intent 参数。</span><br><span class=\"line\">6、点击一个按钮，跳转到下一个活动页面</span><br></pre></td></tr></table></figure></p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button3  = (Button) findViewById(R.id.button_3);</span><br><span class=\"line\">button3.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、使用隐式Intent\"><a href=\"#4、使用隐式Intent\" class=\"headerlink\" title=\"4、使用隐式Intent\"></a>4、使用隐式Intent</h2><p>不明确指出想要启动那个活动<br>指定一系列抽象的action、category 信息<br>交由系统去分析这个Intent.找出合适的活动去启动</p>\n<p>运行隐式Intent示例：<br>1、为SecondActivity活动指定action /category<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.SecondActivity&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=&quot;com.example.activitytext.ACTION_START&quot;/&gt;</span><br><span class=\"line\">        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></p>\n<p>action： 表示当前活动可以响应com.example.activitytext.ACTION_START 这个action<br>category： 包括一些附加信息</p>\n<p>2、在first_layout.xml添加一个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_4&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;用隐式intent跳转到下一个活动页面&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3、在MainActivity.java 添加按钮对应监听方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button4  = (Button) findViewById(R.id.button_4);</span><br><span class=\"line\">button4.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.intent.action.ACTION_START&quot;);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>4、运行代码<br>category 这里是用的默认有name，所以可以不用指category 就能启动</p>\n<p>注：一个intent 可以指定多个category</p>\n<p>运行指定多个category示例：<br>1、修改AndroidMainfest.xml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;activity android:name=&quot;.SecondActivity&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;</span><br><span class=\"line\">        &lt;action android:name=&quot;android.intent.action.ACTION_START&quot;/&gt;</span><br><span class=\"line\">        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</span><br><span class=\"line\">        &lt;category android:name=&quot;android.intent.category.MY_CATEGORY&quot;/&gt;</span><br><span class=\"line\">    &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.修改MainActivity.java文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button4  = (Button) findViewById(R.id.button_4);</span><br><span class=\"line\">button4.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(&quot;android.intent.action.ACTION_START&quot;);</span><br><span class=\"line\">        intent.addCategory(&quot;android.intent.category.MY_CATEGORY&quot;);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5、更多隐式Intent用法\"><a href=\"#5、更多隐式Intent用法\" class=\"headerlink\" title=\"5、更多隐式Intent用法\"></a>5、更多隐式Intent用法</h2> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用隐式intent，不仅可以启动自已的程序内活动，还可以启动其他程序的活动，这使行Adnroid多个应用程序之间功能共享成功了可能，</span><br></pre></td></tr></table></figure>\n<p>示例：<br>在应用程中展示一个网页，调用系统浏览器来打开网页<br>1、新添加一个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_5&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;用隐式intent调用系统浏览器来打开网页&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2、添加这个按钮的监听事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button5  = (Button) findViewById(R.id.button_5);</span><br><span class=\"line\">button5.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">        intent.setData(Uri.parse(&quot;http://www.baidu.com&quot;));</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>可以通过在注册表中组给活动的<date>标签 添加android:scheme 数据协议为http 协议 这样ThridActivity 就可以响应一个网页。？</date></p>\n</blockquote>\n<p>示例：<br>添加一个按钮，跳转调用系统打电话的页面<br>1、在layout文件中添加一个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_6&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;用隐式intent调用系统打电话功能&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2、在java中添加响应事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button6  = (Button) findViewById(R.id.button_6);</span><br><span class=\"line\">button6.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        Intent intent = new Intent(Intent.ACTION_DIAL);</span><br><span class=\"line\">        //Intent.ACTION_DIAL为 android 的内置活动</span><br><span class=\"line\">        intent.setData(Uri.parse(&quot;tel:10086&quot;));</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6、向下一个活动传递数据\"><a href=\"#6、向下一个活动传递数据\" class=\"headerlink\" title=\"6、向下一个活动传递数据\"></a>6、向下一个活动传递数据</h2><blockquote>\n<p>启动活动数据传递思路<br>运用Intent 中putExtra()方法的重载，可以将数据暂存在Intent中，启动另一个活动后，只需要把这些数据再从Intent 中取出就可以了。</p>\n</blockquote>\n<p>示例：<br>在MainActivity 中的一个字符串，想把这个字符串传递到SecondActivity 中去<br>1、MainActivityk中修改代码如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button3  = (Button) findViewById(R.id.button_3);</span><br><span class=\"line\">button3.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">    public void onClick(View v)&#123;</span><br><span class=\"line\">        //设置一个变量</span><br><span class=\"line\">        String data = &quot;Hello SecondActivity&quot;;</span><br><span class=\"line\">        Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">        intent.putExtra(&quot;data_name &quot;,data);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>2、在第二个活动中将数据取出并打印出来；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.second_layout);</span><br><span class=\"line\">    Intent intent = getIntent();</span><br><span class=\"line\">    String data1 = intent.getStringExtra(&quot;data_name&quot;);</span><br><span class=\"line\">    Log.d(&quot;SecondActivity&quot;, data1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、返回数据给上一个活动\"><a href=\"#7、返回数据给上一个活动\" class=\"headerlink\" title=\"7、返回数据给上一个活动\"></a>7、返回数据给上一个活动</h2><blockquote>\n<p>Activity 还有一个startActivtyForResult() 也用于启动活动的方法，在活动销毁的时候返回一个结果给上一个活动<br>startActivityForResult()方法接收两个参数<br>第一个参数是：Intent<br>第二个参数是：请求码</p>\n</blockquote>\n<p>1、在MainActivity活动中设定一个监听跳到secondActivity<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Button button3  = (Button) findViewById(R.id.button_3);</span><br><span class=\"line\">        button3.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">                //设置一个变量</span><br><span class=\"line\">                String data = &quot;Hello SecondActivity&quot;;</span><br><span class=\"line\">                Intent intent = new Intent(MainActivity.this,SecondActivity.class);</span><br><span class=\"line\">                intent.putExtra(&quot;data_name11&quot;, data);</span><br><span class=\"line\">//                 startActivity(intent);</span><br><span class=\"line\">                startActivityForResult(intent,1);</span><br><span class=\"line\">                //用startActivityForResult，启动secondActivity活动，在活动销毁的时候返回一个结果给上一个活动</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>2、在secondActivity，新增一个按钮，并定义一个监听的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=&quot;@+id/button_2&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">    android:text=&quot;返回上一页面，并返回第二个页面的参数&quot;</span><br><span class=\"line\">    /&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//      点击返回上一个活动页面，并返回数据</span><br><span class=\"line\">        Button button2 = (Button)  findViewById(R.id.button_2);</span><br><span class=\"line\">        button2.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class=\"line\">            public void onClick(View v)&#123;</span><br><span class=\"line\">            Intent intent = new Intent();</span><br><span class=\"line\">            intent.putExtra(&quot;date_return&quot;,&quot;Hello fristActivity&quot;);</span><br><span class=\"line\">            setResult(RESULT_OK,intent);</span><br><span class=\"line\"></span><br><span class=\"line\">            String data2 = intent.getStringExtra(&quot;date_return&quot;);</span><br><span class=\"line\">            Log.i(&quot;SecondActivity_back&quot;, data2);</span><br><span class=\"line\"></span><br><span class=\"line\">            finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>3、在MainActivity，重写onActivityResult（）方法，接收secondActivity返回的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写方法，secondActivity 活动关闭后会调用</span><br><span class=\"line\">protected void onActivityResult(int requestCode,int resultCode,Intent data)&#123;</span><br><span class=\"line\">    switch (requestCode)&#123;</span><br><span class=\"line\">        case 1:</span><br><span class=\"line\">            if (resultCode == RESULT_OK)&#123;</span><br><span class=\"line\">                String returnedData = data.getStringExtra(&quot;date_return&quot;);</span><br><span class=\"line\">                Log.i(&quot;MainActivity&quot;,returnedData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置back()返回事件</p>\n<blockquote>\n<p>重写onBackPressed()</p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重写返回的方法</span><br><span class=\"line\">public void onBackPressed()&#123;</span><br><span class=\"line\">    Intent intent = new Intent();</span><br><span class=\"line\">    intent.putExtra(&quot;data_return&quot;,&quot;Hello back FirstActivity&quot;);</span><br><span class=\"line\">    setResult(RESULT_OK,intent);</span><br><span class=\"line\">    finish();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Android_6.数据存储_1.文件存储","date":"2018-05-02T04:27:25.000Z","description":"本文是以Android Studi为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录","_content":"<!-- TOC -->\n\n- [6.1 数据的持久化技术](#61-数据的持久化技术)\n- [6.2 文件存储](#62-文件存储)\n    - [6.2.1 将数据存储到文件中](#621-将数据存储到文件中)\n        - [openFileOutout()方法](#openfileoutout方法)\n    - [6.2.2 从文件中读取数据](#622-从文件中读取数据)\n\n<!-- /TOC -->\n\n[示例源码下载百度云地址](https://pan.baidu.com/s/1C-A73-CsGn493o-H_NBM1Q)\n\n# 6.1 数据的持久化技术\n数据持久代就是指那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。\nAndroid有三种方式实现数据持久化功能：\n1. 文件存储；\n2. SharePreferenced存储；\n3. 数据库存储。\n\n# 6.2 文件存储\n文件存储是Android中最基本的一种数据存储方式，这种方式不对存储的内容进行任何的格式化处理，数据会原封不动地保存到文件中；\n所以这种方法比较适合==一些简单的文本数据，如文本数据或二进制文件==。\n\n## 6.2.1 将数据存储到文件中\n\n### openFileOutout()方法\nContext类中提供了一个openfileOutput()方法，用于将数据存储到指定的文件中，这个方法接收两个参数：\n\n* 第一个参数：指定创建文件的名称(不包括文件的路径，文件默认会存储到/data/date/\\<pageage name\\>/file/目录下面\n* 第二个参数：指定文件的操作模式有两种\n\n    1. MODE_PRIVATE（默认模式,当保存的文件名一样时，写入的内容会覆盖原文件的内容）\n    2. MODE_APPEND（当保存的文件名一样时，写入的内容会在原文件的内容进入追加。）\n\nopenfileOutput（）方法返回的是一个FileOutputStream对象，得到这个对象后就可以使用==Java流的方式==将数据写入到文件中如下java 示例：\n\n```\n    public void save(){\n        String data = \"Data to save\";\n        FileOutputStream out = null;\n        BufferedWriter writer = null;\n        try{\n            out = openFileOutput(\"data\", Context.MODE_PRIVATE);\n            writer = new BufferedWriter(new OutputStreamWriter(out));\n            writer.write(data);\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally{\n            try{\n                if (writer != null){\n                    writer.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private FileOutputStream openFileOutput(String data, int modePrivate) {\n\n    }\n```\n\n\n新建一个“FilePersistenceTest”项目，\n修改activity_main.xml文件的代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/edit\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Type something here\"/>\n\n    <Button\n        android:id=\"@+id/button_1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"保存数据\"\n        />\n</LinearLayout>\n```\n\n修改MainActivity类的代码如下：\n\n```\npackage com.zyf.android.filepersistencetest;\n\nimport android.content.Context;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\n\npublic class MainActivity extends AppCompatActivity {\n    //声明一个EditText对象\n    private EditText edit;\n\n    private Button button_obj;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit = (EditText) findViewById(R.id.edit);//获取实例\n        button_obj = (Button) findViewById(R.id.button_1);\n        button_obj.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Log.i(\"SecondActivity\", \"123131231231231\");\n                String inputText = edit.getText().toString();\n                Log.i(\"SecondActivity\", inputText);\n                save(inputText);\n            }\n        });\n    }\n     \n    //窗口销毁后响应OnDestroy();\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    //保存数据的方法\n    public void save(String inputText){\n        FileOutputStream out = null;\n        BufferedWriter writer = null;\n        try{\n            out = openFileOutput(\"data2.txt\", Context.MODE_PRIVATE);\n            Log.i(\"SecondActivity\", \"out\");\n\n            writer = new BufferedWriter(new OutputStreamWriter(out));\n            Log.i(\"SecondActivity\", \"writer\");\n\n            writer.write(inputText);//执行写入数据的方法\n        }catch (IOException e){\n            Log.i(\"SecondActivity\", \"IOException1\");\n            e.printStackTrace();\n            //对异常进行处理\n\n        }finally {\n            try{\n                if (writer != null){\n                    writer.close();\n                    Log.i(\"SecondActivity\", \"writer is close\");\n                }\n            }catch (IOException e){\n                Log.i(\"SecondActivity\", \"IOException1\");\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n\n```\n\n查看保存的文件\n借助Android device Monitor 工具（点击AS,右下角的Android device Monitor）会打开一个列表。\n\n打开data>data>项目的包名>files>保存文件的名字\n![](https://upload-images.jianshu.io/upload_images/6841945-85bbe4977ee113af.jpg?imageMogr2/auto-orient/)\n\n## 6.2.2 从文件中读取数据\n\n使用openFileInput()方法，获取一个FileInputStream对象，再建一个InputStreamReader对象，接着构建BufferedReader对象，读取文字并存放到StringBuilder 对象中去。\n修改MainActivity 代码如下；\n\n```\npackage com.zyf.android.filepersistencetest;\nimport android.content.Context;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\n\npublic class MainActivity extends AppCompatActivity {\n    //声明一个EditText对象\n    private EditText edit;\n    private Button button_obj;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit = (EditText) findViewById(R.id.edit);//获取实例\n\n        String inputText = load();\n        if (!TextUtils.isEmpty(inputText)){\n            edit.setText(inputText);\n            edit.setSelection(inputText.length());\n            Toast.makeText(this,\"Restoring succeeded\",Toast.LENGTH_SHORT).show();\n        }\n\n        button_obj = (Button) findViewById(R.id.button_1);\n        button_obj.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Log.i(\"SecondActivity\", \"123131231231231\");\n                String inputText = edit.getText().toString();\n                Log.i(\"SecondActivity\", inputText);\n                save(inputText);\n            }\n        });\n    }\n\n    //加载文件的方法\n    private String load() {\n        FileInputStream in = null;\n        BufferedReader reader = null;\n        StringBuilder content = new StringBuilder();\n        try {\n            in = openFileInput(\"data2.txt\");\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line = \"\";\n            while ((line = reader.readLine()) != null){\n                content.append(line);\n            }\n        }catch (IOException e ){\n            e.printStackTrace();\n        }finally {\n            if (reader != null){\n                try{\n                    reader.close();\n                }catch (IOException e){\n                    e.printStackTrace();\n                }\n            }\n        }\n        return content.toString();\n    }\n\n    //窗口销毁后响应OnDestroy();\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    //保存数据的方法\n    public void save(String inputText){\n        FileOutputStream out = null;\n        BufferedWriter writer = null;\n        try{\n            out = openFileOutput(\"data2.txt\", Context.MODE_PRIVATE);\n            Log.i(\"SecondActivity\", \"out\");\n\n            writer = new BufferedWriter(new OutputStreamWriter(out));\n            Log.i(\"SecondActivity\", \"writer\");\n\n            writer.write(inputText);//执行写入数据的方法\n        }catch (IOException e){\n            Log.i(\"SecondActivity\", \"IOException1\");\n            e.printStackTrace();\n            //对异常进行处理\n\n        }finally {\n            try{\n                if (writer != null){\n                    writer.close();\n                    Log.i(\"SecondActivity\", \"writer is close\");\n                }\n            }catch (IOException e){\n                Log.i(\"SecondActivity\", \"IOException1\");\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n再运行代码就可以了\n\n\n","source":"_posts/android_store1.md","raw":"---\ntitle: Android_6.数据存储_1.文件存储\ndate:  2018-05-02 12:27:25\ntags: [android,file]\ncategories: 张永枫\ndescription: 本文是以Android Studi为开发工具，<<第一行代码Anroid第2版>> 为学习指导书籍的学习记录\n---\n<!-- TOC -->\n\n- [6.1 数据的持久化技术](#61-数据的持久化技术)\n- [6.2 文件存储](#62-文件存储)\n    - [6.2.1 将数据存储到文件中](#621-将数据存储到文件中)\n        - [openFileOutout()方法](#openfileoutout方法)\n    - [6.2.2 从文件中读取数据](#622-从文件中读取数据)\n\n<!-- /TOC -->\n\n[示例源码下载百度云地址](https://pan.baidu.com/s/1C-A73-CsGn493o-H_NBM1Q)\n\n# 6.1 数据的持久化技术\n数据持久代就是指那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。\nAndroid有三种方式实现数据持久化功能：\n1. 文件存储；\n2. SharePreferenced存储；\n3. 数据库存储。\n\n# 6.2 文件存储\n文件存储是Android中最基本的一种数据存储方式，这种方式不对存储的内容进行任何的格式化处理，数据会原封不动地保存到文件中；\n所以这种方法比较适合==一些简单的文本数据，如文本数据或二进制文件==。\n\n## 6.2.1 将数据存储到文件中\n\n### openFileOutout()方法\nContext类中提供了一个openfileOutput()方法，用于将数据存储到指定的文件中，这个方法接收两个参数：\n\n* 第一个参数：指定创建文件的名称(不包括文件的路径，文件默认会存储到/data/date/\\<pageage name\\>/file/目录下面\n* 第二个参数：指定文件的操作模式有两种\n\n    1. MODE_PRIVATE（默认模式,当保存的文件名一样时，写入的内容会覆盖原文件的内容）\n    2. MODE_APPEND（当保存的文件名一样时，写入的内容会在原文件的内容进入追加。）\n\nopenfileOutput（）方法返回的是一个FileOutputStream对象，得到这个对象后就可以使用==Java流的方式==将数据写入到文件中如下java 示例：\n\n```\n    public void save(){\n        String data = \"Data to save\";\n        FileOutputStream out = null;\n        BufferedWriter writer = null;\n        try{\n            out = openFileOutput(\"data\", Context.MODE_PRIVATE);\n            writer = new BufferedWriter(new OutputStreamWriter(out));\n            writer.write(data);\n        }catch (IOException e){\n            e.printStackTrace();\n        }finally{\n            try{\n                if (writer != null){\n                    writer.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private FileOutputStream openFileOutput(String data, int modePrivate) {\n\n    }\n```\n\n\n新建一个“FilePersistenceTest”项目，\n修改activity_main.xml文件的代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/edit\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Type something here\"/>\n\n    <Button\n        android:id=\"@+id/button_1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"保存数据\"\n        />\n</LinearLayout>\n```\n\n修改MainActivity类的代码如下：\n\n```\npackage com.zyf.android.filepersistencetest;\n\nimport android.content.Context;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\n\npublic class MainActivity extends AppCompatActivity {\n    //声明一个EditText对象\n    private EditText edit;\n\n    private Button button_obj;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit = (EditText) findViewById(R.id.edit);//获取实例\n        button_obj = (Button) findViewById(R.id.button_1);\n        button_obj.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Log.i(\"SecondActivity\", \"123131231231231\");\n                String inputText = edit.getText().toString();\n                Log.i(\"SecondActivity\", inputText);\n                save(inputText);\n            }\n        });\n    }\n     \n    //窗口销毁后响应OnDestroy();\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    //保存数据的方法\n    public void save(String inputText){\n        FileOutputStream out = null;\n        BufferedWriter writer = null;\n        try{\n            out = openFileOutput(\"data2.txt\", Context.MODE_PRIVATE);\n            Log.i(\"SecondActivity\", \"out\");\n\n            writer = new BufferedWriter(new OutputStreamWriter(out));\n            Log.i(\"SecondActivity\", \"writer\");\n\n            writer.write(inputText);//执行写入数据的方法\n        }catch (IOException e){\n            Log.i(\"SecondActivity\", \"IOException1\");\n            e.printStackTrace();\n            //对异常进行处理\n\n        }finally {\n            try{\n                if (writer != null){\n                    writer.close();\n                    Log.i(\"SecondActivity\", \"writer is close\");\n                }\n            }catch (IOException e){\n                Log.i(\"SecondActivity\", \"IOException1\");\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n\n```\n\n查看保存的文件\n借助Android device Monitor 工具（点击AS,右下角的Android device Monitor）会打开一个列表。\n\n打开data>data>项目的包名>files>保存文件的名字\n![](https://upload-images.jianshu.io/upload_images/6841945-85bbe4977ee113af.jpg?imageMogr2/auto-orient/)\n\n## 6.2.2 从文件中读取数据\n\n使用openFileInput()方法，获取一个FileInputStream对象，再建一个InputStreamReader对象，接着构建BufferedReader对象，读取文字并存放到StringBuilder 对象中去。\n修改MainActivity 代码如下；\n\n```\npackage com.zyf.android.filepersistencetest;\nimport android.content.Context;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\n\npublic class MainActivity extends AppCompatActivity {\n    //声明一个EditText对象\n    private EditText edit;\n    private Button button_obj;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        edit = (EditText) findViewById(R.id.edit);//获取实例\n\n        String inputText = load();\n        if (!TextUtils.isEmpty(inputText)){\n            edit.setText(inputText);\n            edit.setSelection(inputText.length());\n            Toast.makeText(this,\"Restoring succeeded\",Toast.LENGTH_SHORT).show();\n        }\n\n        button_obj = (Button) findViewById(R.id.button_1);\n        button_obj.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Log.i(\"SecondActivity\", \"123131231231231\");\n                String inputText = edit.getText().toString();\n                Log.i(\"SecondActivity\", inputText);\n                save(inputText);\n            }\n        });\n    }\n\n    //加载文件的方法\n    private String load() {\n        FileInputStream in = null;\n        BufferedReader reader = null;\n        StringBuilder content = new StringBuilder();\n        try {\n            in = openFileInput(\"data2.txt\");\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line = \"\";\n            while ((line = reader.readLine()) != null){\n                content.append(line);\n            }\n        }catch (IOException e ){\n            e.printStackTrace();\n        }finally {\n            if (reader != null){\n                try{\n                    reader.close();\n                }catch (IOException e){\n                    e.printStackTrace();\n                }\n            }\n        }\n        return content.toString();\n    }\n\n    //窗口销毁后响应OnDestroy();\n    protected void onDestroy(){\n        super.onDestroy();\n    }\n\n    //保存数据的方法\n    public void save(String inputText){\n        FileOutputStream out = null;\n        BufferedWriter writer = null;\n        try{\n            out = openFileOutput(\"data2.txt\", Context.MODE_PRIVATE);\n            Log.i(\"SecondActivity\", \"out\");\n\n            writer = new BufferedWriter(new OutputStreamWriter(out));\n            Log.i(\"SecondActivity\", \"writer\");\n\n            writer.write(inputText);//执行写入数据的方法\n        }catch (IOException e){\n            Log.i(\"SecondActivity\", \"IOException1\");\n            e.printStackTrace();\n            //对异常进行处理\n\n        }finally {\n            try{\n                if (writer != null){\n                    writer.close();\n                    Log.i(\"SecondActivity\", \"writer is close\");\n                }\n            }catch (IOException e){\n                Log.i(\"SecondActivity\", \"IOException1\");\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n再运行代码就可以了\n\n\n","slug":"android_store1","published":1,"updated":"2019-05-07T02:19:37.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcoxma001vp7sa76ecnq0w","content":"<!-- TOC -->\n<ul>\n<li><a href=\"#61-数据的持久化技术\">6.1 数据的持久化技术</a></li>\n<li><a href=\"#62-文件存储\">6.2 文件存储</a><ul>\n<li><a href=\"#621-将数据存储到文件中\">6.2.1 将数据存储到文件中</a><ul>\n<li><a href=\"#openfileoutout方法\">openFileOutout()方法</a></li>\n</ul>\n</li>\n<li><a href=\"#622-从文件中读取数据\">6.2.2 从文件中读取数据</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p><a href=\"https://pan.baidu.com/s/1C-A73-CsGn493o-H_NBM1Q\" target=\"_blank\" rel=\"noopener\">示例源码下载百度云地址</a></p>\n<h1 id=\"6-1-数据的持久化技术\"><a href=\"#6-1-数据的持久化技术\" class=\"headerlink\" title=\"6.1 数据的持久化技术\"></a>6.1 数据的持久化技术</h1><p>数据持久代就是指那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。<br>Android有三种方式实现数据持久化功能：</p>\n<ol>\n<li>文件存储；</li>\n<li>SharePreferenced存储；</li>\n<li>数据库存储。</li>\n</ol>\n<h1 id=\"6-2-文件存储\"><a href=\"#6-2-文件存储\" class=\"headerlink\" title=\"6.2 文件存储\"></a>6.2 文件存储</h1><p>文件存储是Android中最基本的一种数据存储方式，这种方式不对存储的内容进行任何的格式化处理，数据会原封不动地保存到文件中；<br>所以这种方法比较适合==一些简单的文本数据，如文本数据或二进制文件==。</p>\n<h2 id=\"6-2-1-将数据存储到文件中\"><a href=\"#6-2-1-将数据存储到文件中\" class=\"headerlink\" title=\"6.2.1 将数据存储到文件中\"></a>6.2.1 将数据存储到文件中</h2><h3 id=\"openFileOutout-方法\"><a href=\"#openFileOutout-方法\" class=\"headerlink\" title=\"openFileOutout()方法\"></a>openFileOutout()方法</h3><p>Context类中提供了一个openfileOutput()方法，用于将数据存储到指定的文件中，这个方法接收两个参数：</p>\n<ul>\n<li>第一个参数：指定创建文件的名称(不包括文件的路径，文件默认会存储到/data/date/\\<pageage name\\=\"\">/file/目录下面</pageage></li>\n<li><p>第二个参数：指定文件的操作模式有两种</p>\n<ol>\n<li>MODE_PRIVATE（默认模式,当保存的文件名一样时，写入的内容会覆盖原文件的内容）</li>\n<li>MODE_APPEND（当保存的文件名一样时，写入的内容会在原文件的内容进入追加。）</li>\n</ol>\n</li>\n</ul>\n<p>openfileOutput（）方法返回的是一个FileOutputStream对象，得到这个对象后就可以使用==Java流的方式==将数据写入到文件中如下java 示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void save()&#123;</span><br><span class=\"line\">    String data = &quot;Data to save&quot;;</span><br><span class=\"line\">    FileOutputStream out = null;</span><br><span class=\"line\">    BufferedWriter writer = null;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        out = openFileOutput(&quot;data&quot;, Context.MODE_PRIVATE);</span><br><span class=\"line\">        writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class=\"line\">        writer.write(data);</span><br><span class=\"line\">    &#125;catch (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;finally&#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            if (writer != null)&#123;</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private FileOutputStream openFileOutput(String data, int modePrivate) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个“FilePersistenceTest”项目，<br>修改activity_main.xml文件的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout</span><br><span class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;EditText</span><br><span class=\"line\">        android:id=&quot;@+id/edit&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Type something here&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/button_1&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;保存数据&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>修改MainActivity类的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zyf.android.filepersistencetest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.text.TextUtils;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.OutputStreamWriter;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    //声明一个EditText对象</span><br><span class=\"line\">    private EditText edit;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button_obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit = (EditText) findViewById(R.id.edit);//获取实例</span><br><span class=\"line\">        button_obj = (Button) findViewById(R.id.button_1);</span><br><span class=\"line\">        button_obj.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;123131231231231&quot;);</span><br><span class=\"line\">                String inputText = edit.getText().toString();</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, inputText);</span><br><span class=\"line\">                save(inputText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //窗口销毁后响应OnDestroy();</span><br><span class=\"line\">    protected void onDestroy()&#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //保存数据的方法</span><br><span class=\"line\">    public void save(String inputText)&#123;</span><br><span class=\"line\">        FileOutputStream out = null;</span><br><span class=\"line\">        BufferedWriter writer = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            out = openFileOutput(&quot;data2.txt&quot;, Context.MODE_PRIVATE);</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;out&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;writer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer.write(inputText);//执行写入数据的方法</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            //对异常进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                if (writer != null)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                    Log.i(&quot;SecondActivity&quot;, &quot;writer is close&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看保存的文件<br>借助Android device Monitor 工具（点击AS,右下角的Android device Monitor）会打开一个列表。</p>\n<p>打开data&gt;data&gt;项目的包名&gt;files&gt;保存文件的名字<br><img src=\"https://upload-images.jianshu.io/upload_images/6841945-85bbe4977ee113af.jpg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<h2 id=\"6-2-2-从文件中读取数据\"><a href=\"#6-2-2-从文件中读取数据\" class=\"headerlink\" title=\"6.2.2 从文件中读取数据\"></a>6.2.2 从文件中读取数据</h2><p>使用openFileInput()方法，获取一个FileInputStream对象，再建一个InputStreamReader对象，接着构建BufferedReader对象，读取文字并存放到StringBuilder 对象中去。<br>修改MainActivity 代码如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zyf.android.filepersistencetest;</span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.text.TextUtils;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.OutputStreamWriter;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    //声明一个EditText对象</span><br><span class=\"line\">    private EditText edit;</span><br><span class=\"line\">    private Button button_obj;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit = (EditText) findViewById(R.id.edit);//获取实例</span><br><span class=\"line\"></span><br><span class=\"line\">        String inputText = load();</span><br><span class=\"line\">        if (!TextUtils.isEmpty(inputText))&#123;</span><br><span class=\"line\">            edit.setText(inputText);</span><br><span class=\"line\">            edit.setSelection(inputText.length());</span><br><span class=\"line\">            Toast.makeText(this,&quot;Restoring succeeded&quot;,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        button_obj = (Button) findViewById(R.id.button_1);</span><br><span class=\"line\">        button_obj.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;123131231231231&quot;);</span><br><span class=\"line\">                String inputText = edit.getText().toString();</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, inputText);</span><br><span class=\"line\">                save(inputText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //加载文件的方法</span><br><span class=\"line\">    private String load() &#123;</span><br><span class=\"line\">        FileInputStream in = null;</span><br><span class=\"line\">        BufferedReader reader = null;</span><br><span class=\"line\">        StringBuilder content = new StringBuilder();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            in = openFileInput(&quot;data2.txt&quot;);</span><br><span class=\"line\">            reader = new BufferedReader(new InputStreamReader(in));</span><br><span class=\"line\">            String line = &quot;&quot;;</span><br><span class=\"line\">            while ((line = reader.readLine()) != null)&#123;</span><br><span class=\"line\">                content.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (IOException e )&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            if (reader != null)&#123;</span><br><span class=\"line\">                try&#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return content.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //窗口销毁后响应OnDestroy();</span><br><span class=\"line\">    protected void onDestroy()&#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //保存数据的方法</span><br><span class=\"line\">    public void save(String inputText)&#123;</span><br><span class=\"line\">        FileOutputStream out = null;</span><br><span class=\"line\">        BufferedWriter writer = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            out = openFileOutput(&quot;data2.txt&quot;, Context.MODE_PRIVATE);</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;out&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;writer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer.write(inputText);//执行写入数据的方法</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            //对异常进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                if (writer != null)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                    Log.i(&quot;SecondActivity&quot;, &quot;writer is close&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再运行代码就可以了</p>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<ul>\n<li><a href=\"#61-数据的持久化技术\">6.1 数据的持久化技术</a></li>\n<li><a href=\"#62-文件存储\">6.2 文件存储</a><ul>\n<li><a href=\"#621-将数据存储到文件中\">6.2.1 将数据存储到文件中</a><ul>\n<li><a href=\"#openfileoutout方法\">openFileOutout()方法</a></li>\n</ul>\n</li>\n<li><a href=\"#622-从文件中读取数据\">6.2.2 从文件中读取数据</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p><a href=\"https://pan.baidu.com/s/1C-A73-CsGn493o-H_NBM1Q\" target=\"_blank\" rel=\"noopener\">示例源码下载百度云地址</a></p>\n<h1 id=\"6-1-数据的持久化技术\"><a href=\"#6-1-数据的持久化技术\" class=\"headerlink\" title=\"6.1 数据的持久化技术\"></a>6.1 数据的持久化技术</h1><p>数据持久代就是指那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。<br>Android有三种方式实现数据持久化功能：</p>\n<ol>\n<li>文件存储；</li>\n<li>SharePreferenced存储；</li>\n<li>数据库存储。</li>\n</ol>\n<h1 id=\"6-2-文件存储\"><a href=\"#6-2-文件存储\" class=\"headerlink\" title=\"6.2 文件存储\"></a>6.2 文件存储</h1><p>文件存储是Android中最基本的一种数据存储方式，这种方式不对存储的内容进行任何的格式化处理，数据会原封不动地保存到文件中；<br>所以这种方法比较适合==一些简单的文本数据，如文本数据或二进制文件==。</p>\n<h2 id=\"6-2-1-将数据存储到文件中\"><a href=\"#6-2-1-将数据存储到文件中\" class=\"headerlink\" title=\"6.2.1 将数据存储到文件中\"></a>6.2.1 将数据存储到文件中</h2><h3 id=\"openFileOutout-方法\"><a href=\"#openFileOutout-方法\" class=\"headerlink\" title=\"openFileOutout()方法\"></a>openFileOutout()方法</h3><p>Context类中提供了一个openfileOutput()方法，用于将数据存储到指定的文件中，这个方法接收两个参数：</p>\n<ul>\n<li>第一个参数：指定创建文件的名称(不包括文件的路径，文件默认会存储到/data/date/\\<pageage name\\=\"\">/file/目录下面</pageage></li>\n<li><p>第二个参数：指定文件的操作模式有两种</p>\n<ol>\n<li>MODE_PRIVATE（默认模式,当保存的文件名一样时，写入的内容会覆盖原文件的内容）</li>\n<li>MODE_APPEND（当保存的文件名一样时，写入的内容会在原文件的内容进入追加。）</li>\n</ol>\n</li>\n</ul>\n<p>openfileOutput（）方法返回的是一个FileOutputStream对象，得到这个对象后就可以使用==Java流的方式==将数据写入到文件中如下java 示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void save()&#123;</span><br><span class=\"line\">    String data = &quot;Data to save&quot;;</span><br><span class=\"line\">    FileOutputStream out = null;</span><br><span class=\"line\">    BufferedWriter writer = null;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        out = openFileOutput(&quot;data&quot;, Context.MODE_PRIVATE);</span><br><span class=\"line\">        writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class=\"line\">        writer.write(data);</span><br><span class=\"line\">    &#125;catch (IOException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;finally&#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            if (writer != null)&#123;</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private FileOutputStream openFileOutput(String data, int modePrivate) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个“FilePersistenceTest”项目，<br>修改activity_main.xml文件的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;LinearLayout</span><br><span class=\"line\">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">    android:orientation=&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;EditText</span><br><span class=\"line\">        android:id=&quot;@+id/edit&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;Type something here&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">        android:id=&quot;@+id/button_1&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:text=&quot;保存数据&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>\n<p>修改MainActivity类的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zyf.android.filepersistencetest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.text.TextUtils;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.OutputStreamWriter;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    //声明一个EditText对象</span><br><span class=\"line\">    private EditText edit;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Button button_obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit = (EditText) findViewById(R.id.edit);//获取实例</span><br><span class=\"line\">        button_obj = (Button) findViewById(R.id.button_1);</span><br><span class=\"line\">        button_obj.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;123131231231231&quot;);</span><br><span class=\"line\">                String inputText = edit.getText().toString();</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, inputText);</span><br><span class=\"line\">                save(inputText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    //窗口销毁后响应OnDestroy();</span><br><span class=\"line\">    protected void onDestroy()&#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //保存数据的方法</span><br><span class=\"line\">    public void save(String inputText)&#123;</span><br><span class=\"line\">        FileOutputStream out = null;</span><br><span class=\"line\">        BufferedWriter writer = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            out = openFileOutput(&quot;data2.txt&quot;, Context.MODE_PRIVATE);</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;out&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;writer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer.write(inputText);//执行写入数据的方法</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            //对异常进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                if (writer != null)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                    Log.i(&quot;SecondActivity&quot;, &quot;writer is close&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看保存的文件<br>借助Android device Monitor 工具（点击AS,右下角的Android device Monitor）会打开一个列表。</p>\n<p>打开data&gt;data&gt;项目的包名&gt;files&gt;保存文件的名字<br><img src=\"https://upload-images.jianshu.io/upload_images/6841945-85bbe4977ee113af.jpg?imageMogr2/auto-orient/\" alt=\"\"></p>\n<h2 id=\"6-2-2-从文件中读取数据\"><a href=\"#6-2-2-从文件中读取数据\" class=\"headerlink\" title=\"6.2.2 从文件中读取数据\"></a>6.2.2 从文件中读取数据</h2><p>使用openFileInput()方法，获取一个FileInputStream对象，再建一个InputStreamReader对象，接着构建BufferedReader对象，读取文字并存放到StringBuilder 对象中去。<br>修改MainActivity 代码如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.zyf.android.filepersistencetest;</span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.text.TextUtils;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.widget.Button;</span><br><span class=\"line\">import android.widget.EditText;</span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.BufferedWriter;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.FileOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.io.OutputStreamWriter;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    //声明一个EditText对象</span><br><span class=\"line\">    private EditText edit;</span><br><span class=\"line\">    private Button button_obj;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        edit = (EditText) findViewById(R.id.edit);//获取实例</span><br><span class=\"line\"></span><br><span class=\"line\">        String inputText = load();</span><br><span class=\"line\">        if (!TextUtils.isEmpty(inputText))&#123;</span><br><span class=\"line\">            edit.setText(inputText);</span><br><span class=\"line\">            edit.setSelection(inputText.length());</span><br><span class=\"line\">            Toast.makeText(this,&quot;Restoring succeeded&quot;,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        button_obj = (Button) findViewById(R.id.button_1);</span><br><span class=\"line\">        button_obj.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;123131231231231&quot;);</span><br><span class=\"line\">                String inputText = edit.getText().toString();</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, inputText);</span><br><span class=\"line\">                save(inputText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //加载文件的方法</span><br><span class=\"line\">    private String load() &#123;</span><br><span class=\"line\">        FileInputStream in = null;</span><br><span class=\"line\">        BufferedReader reader = null;</span><br><span class=\"line\">        StringBuilder content = new StringBuilder();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            in = openFileInput(&quot;data2.txt&quot;);</span><br><span class=\"line\">            reader = new BufferedReader(new InputStreamReader(in));</span><br><span class=\"line\">            String line = &quot;&quot;;</span><br><span class=\"line\">            while ((line = reader.readLine()) != null)&#123;</span><br><span class=\"line\">                content.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (IOException e )&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            if (reader != null)&#123;</span><br><span class=\"line\">                try&#123;</span><br><span class=\"line\">                    reader.close();</span><br><span class=\"line\">                &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return content.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //窗口销毁后响应OnDestroy();</span><br><span class=\"line\">    protected void onDestroy()&#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //保存数据的方法</span><br><span class=\"line\">    public void save(String inputText)&#123;</span><br><span class=\"line\">        FileOutputStream out = null;</span><br><span class=\"line\">        BufferedWriter writer = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            out = openFileOutput(&quot;data2.txt&quot;, Context.MODE_PRIVATE);</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;out&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;writer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            writer.write(inputText);//执行写入数据的方法</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            //对异常进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try&#123;</span><br><span class=\"line\">                if (writer != null)&#123;</span><br><span class=\"line\">                    writer.close();</span><br><span class=\"line\">                    Log.i(&quot;SecondActivity&quot;, &quot;writer is close&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                Log.i(&quot;SecondActivity&quot;, &quot;IOException1&quot;);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再运行代码就可以了</p>\n"},{"title":"git 入门","date":"2019-05-06T04:00:00.000Z","description":"git 入门","_content":"\n<!-- TOC -->\n\n[随手记](#随手记)\n\n[安装](#安装)\n\n[配置用户名、邮箱](#配置用户名、邮箱)\n\n[创建版本库](#创建版本库)\n\n[把文件添加到版本库(暂存区)](#把文件添加到版本库暂存区)\n\n[提交到本地代码库](#提交到本地代码库)\n\n[仓库当前的状态](#仓库当前的状态)\n\n[git status小结](#gitstatus小结)\n\n[对比文件修改了什么内容](#对比文件修改了什么内容)\n\n[查看提交的日志](#查看提交的日志)\n\n[回退到上一个版本](#回退到上一个版本)\n\n[查看命令历史](#查看命令历史)\n\n[撤销修改](#撤销修改)\n\n[提交到远程代码库](#提交到远程代码库)\n\n[关联远程库](#关联远程库)\n\n[创建SSH_Key](#创建ssh_key)\n\n[查看所有分支](#查看所有分支)\n\n[切换分支](#切换分支)\n\n[合并分支](#合并分支)\n\n[删除掉dev分支](#删除掉dev分支)\n\n[分支小结](#分支小结)\n\n[解决冲突](#解决冲突)\n\n[分支管理策略](#分支管理策略)\n\n[强行删除分支](#强行删除分支)\n\n[多人协作](#多人协作)\n\n[更新远程库的代码到本地](#更新远程库的代码到本地)\n\n[添加标签](#添加标签)\n\n[操作标签](#操作标签)\n\n[查看远程库的信息](#查看远程库的信息)\n\n[删除已关联的名为origin的远程库](#删除已关联的名为origin的远程库)\n\n[忽略特殊文件](#忽略特殊文件)\n\n[强制添加忽略的文件](#强制添加忽略的文件)\n\n[检查添加文件是否被忽略](#检查添加文件是否被忽略)\n\n[设置命令别名](#设置命令别名)\n\n[配置文件](#配置文件)\n\n\n***\n## 随手记 \n    1、分布式版本控制系统\n    记录每次文件的改动，并且可以协作编辑\n    \n## 1、基本操作\n[目录](#git)\n### 安装\n    // Debian/Ubuntu Linux \n    sudo apt-get install git\n    \n    // 其他linux版本，源码安装\n    git官网 https://git-scm.com/\n    下载源码，然后解压，依次输入\n    ./config \n    make\n    sudo make install\n    \n    //mac osx \n    通过homebrew安装 \n    homebrew官网: http://brew.sh\n[目录](#git)\n### 配置用户名、邮箱 \n    git config --global user.name zhangyongfeng1\n    \n    git config --global user.username zhangyongfeng1\n    //配置用户名\n    \n    git config --global user.email 503977995@qq.com\n    //配置邮箱\n    \n    git config --global user.name\n    //没有传参数时，查询当前配置的用户名\n[目录](#git)\n### 创建版本库 \n\n    ubuntu:~/environment $   mkdir learngit\n    ubuntu:~/environment $     cd learngit\n    ubuntu:~/environment/learngit $     pwd\n    /home/ubuntu/environment/learngit\n    ubuntu:~/environment/learngit $ git init\n    Initialized empty Git repository in /home/ubuntu/environment/learngit/.git/\n    ubuntu:~/environment/learngit (master) $ ls -al\n    total 12\n    drwxrwxr-x 3 ubuntu ubuntu 4096 Apr 26 06:02 .\n    drwxr-xr-x 6 ubuntu ubuntu 4096 Apr 26 06:00 ..\n    drwxrwxr-x 7 ubuntu ubuntu 4096 Apr 26 06:02 .git\n[目录](#git)       \n### 把文件添加到版本库暂存区\n    \n    // 添加文件\n    git add <file>\n    //在learngit目录下新建 一个文件readme.md\n    git add readmne.md\n    git add . \n    //当前目录下的文件全部提交\n[目录](#git) \n### 提交到本地代码库\n    git commit -m <message>\n    git commit -m 注解信息\n[目录](#git)   \n### 仓库当前的状态 \n    git status\n    \n    On branch master\n    nothing to commit, working tree clean\n    //工作目录是干净的\n\n    On branch master\n    Changes to be committed:\n    (use \"git reset HEAD <file>...\" to unstage)\n\n    modified: readme.txt\n[目录](#git)    \n### gitstatus小结\n    要随时掌握工作区的状态，使用git status命令。\n    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n[目录](#git)    \n### 对比文件修改了什么内容 \n    git diff <filename>\n    \n    $ git diff readme.txt \n    diff --git a/readme.txt b/readme.txt\n    index 46d49bf..9247db6 100644\n    --- a/readme.txt\n    +++ b/readme.txt\n    @@ -1,2 +1,2 @@\n    -Git is a version control system.\n    +Git is a distributed version control system.\n    Git is free software.\n [目录](#git)    \n### 查看提交的日志\n    git log\n    \n    git log --pretty=oneline\n[目录](#git)    \n### 回退到上一个版本 \n    get reset\n    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，\n    使用命令git reset --hard commit_id。\n   \n    \n    在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n    \n    git reset --hard HEAD^ \n    //回退到上一个版本\n    \n    git reset --hard 772a2f\n    //回到指定的版本号 \n    \n[目录](#git)   \n### 查看命令历史 \n\n    git reflog\n\n    用来记录你的每一次命令：\n[目录](#git)\n### 撤销修改 \n    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n    \n    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。\n    \n    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n[目录](#git)\n### 提交到远程代码库 \n    \n    git push \n    \n    git push origin master\n[目录](#git)    \n### 关联远程库 \n\n    要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n\n    关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n\n    此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n[目录](#git)   \n### 创建ssh_key\n    由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n    第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n    $ ssh-keygen -t rsa -C \"youremail@example.com\"\n    你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n\n    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n    然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n\n    github-addkey-1\n\n    点“Add Key”，你就应该看到已经添加的Key：\n\n    github-addkey-2\n[目录](#git)\n### 查看所有分支 \n    git branch \n    创建分支：git branch <name>\n    git branch命令会列出所有分支，当前分支前面会标一个*号。\n[目录](#git)\n### 切换分支 \n    git checkout 分支名 \n    git checkout master \n[目录](#git)   \n### 合并分支 \n    git merge dev\n    \n[目录](#git) \n### 删除掉dev分支 \n    git branch -d dev \n\n    Deleted branch dev (was b17d20e).\n    删除后，查看branch，就只剩下master分支了：\n    git branch\n    因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n\n[目录](#git)\n### 分支小结 \n\n    Git鼓励大量使用分支：\n    \n    查看分支：git branch\n    \n    创建分支：git branch <name>\n    \n    切换分支：git checkout <name>\n    \n    创建+切换分支：git checkout -b <name>\n    \n    合并某分支到当前分支：git merge <name>\n    \n    删除分支：git branch -d <name>\n[目录](#git)\n### 解决冲突 \n    主线和分支修改的文件一样时，合并之后会报文件有冲突\n    \n    用带参数的git log也可以看到分支的合并情况：\n    git log --graph --pretty=oneline --abbrev-commit -10\n    \n    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n    解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n\n    用git log --graph命令可以看到分支合并图。\n[目录](#git)\n### 分支管理策略 \n    \n    通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n\n    如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n[目录](#git)\n### 强行删除分支 \n    git branch -D feature-vulcan\n    \n[目录](#git)\n### 多人协作 \n    多人协作的工作模式通常是这样：\n    \n    首先，可以试图用git push origin <branch-name>推送自己的修改；\n    \n    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n    \n    如果合并有冲突，则解决冲突，并在本地提交；\n    \n    没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！\n    \n    如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。\n    \n    这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n[目录](#git)   \n### 更新远程库的代码到本地 \n    git pull\n    \n    查看远程库信息，使用git remote -v；\n\n    本地新建的分支如果不推送到远程，对其他人就是不可见的；\n    \n    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n    \n    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n    \n    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n    \n    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n[目录](#git)   \n### 添加标签\n    命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n    \n    命令git tag -a <tagname> -m \"blablabla...\"可以指定标签信息；\n    \n    命令git tag可以查看所有标签。\n[目录](#git)    \n### 操作标签 \n    git tag -d v0.1\n    \n    小结\n    命令git push origin <tagname>可以推送一个本地标签；\n    \n    命令git push origin --tags可以推送全部未推送过的本地标签；\n    \n    命令git tag -d <tagname>可以删除一个本地标签；\n    \n    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。\n[目录](#git)\n### 查看远程库的信息 \n    git remote\n    \n    查看更多的信息\n    git remote -v\n[目录](#git)    \n### 删除已关联的名为origin的远程库 \n    git remote rm origin\n    先关联GitHub的远程库：\n\n    git remote add github git@github.com:michaelliao/learngit.git\n    注意，远程库的名称叫github，不叫origin了。\n    \n    接着，再关联码云的远程库：\n    \n    git remote add gitee git@gitee.com:liaoxuefeng/learngit.git\n    同样注意，远程库的名称叫gitee，不叫origin。\n    \n    现在，我们用git remote -v查看远程库信息，可以看到两个远程库：\n    \n    git remote -v\n    gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)\n    gitee    git@gitee.com:liaoxuefeng/learngit.git (push)\n    github    git@github.com:michaelliao/learngit.git (fetch)\n    github    git@github.com:michaelliao/learngit.git (push)\n    如果要推送到GitHub，使用命令：\n    \n    git push github master\n    如果要推送到码云，使用命令：\n    \n    git push gitee master\n    这样一来，我们的本地库就可以同时与多个远程库互相同步：\n[目录](#git)\n### 忽略特殊文件 \n    .gitignore\n[目录](#git)\n### 强制添加忽略的文件 \n    git add -f App.class\n[目录](#git)\n### 检查添加文件是否被忽略 \n    git check-ignore -v App.class\n    \n[目录](#git)\n### 设置命令别名 \n    git config --global alias.st status\n    //状态\n    git config --global alias.co checkout\n    //更新\n    git config --global alias.ci commit\n    //提交\n    git config --global alias.br branch\n    //分支\n    \n    git config --global alias.unstage 'reset HEAD'\n    //命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n    \n    git unstage test.py\n    =git reset HEAD test.py\n    \n    git config --global alias.last 'log -1'\n    //配置一个git last，让其显示最后一次提交信息\n    git last\n    \n    git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n [目录](#git)   \n## 配置文件 \n\n    .git/config\n    \n    cat ./git/config\n    \n[搭建见廖老师教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)","source":"_posts/git_1.md","raw":"---\ntitle: git 入门\ndate:  2019-05-06 12:00:00\ntags: [git]\ncategories: 张永枫\ndescription: git 入门\n---\n\n<!-- TOC -->\n\n[随手记](#随手记)\n\n[安装](#安装)\n\n[配置用户名、邮箱](#配置用户名、邮箱)\n\n[创建版本库](#创建版本库)\n\n[把文件添加到版本库(暂存区)](#把文件添加到版本库暂存区)\n\n[提交到本地代码库](#提交到本地代码库)\n\n[仓库当前的状态](#仓库当前的状态)\n\n[git status小结](#gitstatus小结)\n\n[对比文件修改了什么内容](#对比文件修改了什么内容)\n\n[查看提交的日志](#查看提交的日志)\n\n[回退到上一个版本](#回退到上一个版本)\n\n[查看命令历史](#查看命令历史)\n\n[撤销修改](#撤销修改)\n\n[提交到远程代码库](#提交到远程代码库)\n\n[关联远程库](#关联远程库)\n\n[创建SSH_Key](#创建ssh_key)\n\n[查看所有分支](#查看所有分支)\n\n[切换分支](#切换分支)\n\n[合并分支](#合并分支)\n\n[删除掉dev分支](#删除掉dev分支)\n\n[分支小结](#分支小结)\n\n[解决冲突](#解决冲突)\n\n[分支管理策略](#分支管理策略)\n\n[强行删除分支](#强行删除分支)\n\n[多人协作](#多人协作)\n\n[更新远程库的代码到本地](#更新远程库的代码到本地)\n\n[添加标签](#添加标签)\n\n[操作标签](#操作标签)\n\n[查看远程库的信息](#查看远程库的信息)\n\n[删除已关联的名为origin的远程库](#删除已关联的名为origin的远程库)\n\n[忽略特殊文件](#忽略特殊文件)\n\n[强制添加忽略的文件](#强制添加忽略的文件)\n\n[检查添加文件是否被忽略](#检查添加文件是否被忽略)\n\n[设置命令别名](#设置命令别名)\n\n[配置文件](#配置文件)\n\n\n***\n## 随手记 \n    1、分布式版本控制系统\n    记录每次文件的改动，并且可以协作编辑\n    \n## 1、基本操作\n[目录](#git)\n### 安装\n    // Debian/Ubuntu Linux \n    sudo apt-get install git\n    \n    // 其他linux版本，源码安装\n    git官网 https://git-scm.com/\n    下载源码，然后解压，依次输入\n    ./config \n    make\n    sudo make install\n    \n    //mac osx \n    通过homebrew安装 \n    homebrew官网: http://brew.sh\n[目录](#git)\n### 配置用户名、邮箱 \n    git config --global user.name zhangyongfeng1\n    \n    git config --global user.username zhangyongfeng1\n    //配置用户名\n    \n    git config --global user.email 503977995@qq.com\n    //配置邮箱\n    \n    git config --global user.name\n    //没有传参数时，查询当前配置的用户名\n[目录](#git)\n### 创建版本库 \n\n    ubuntu:~/environment $   mkdir learngit\n    ubuntu:~/environment $     cd learngit\n    ubuntu:~/environment/learngit $     pwd\n    /home/ubuntu/environment/learngit\n    ubuntu:~/environment/learngit $ git init\n    Initialized empty Git repository in /home/ubuntu/environment/learngit/.git/\n    ubuntu:~/environment/learngit (master) $ ls -al\n    total 12\n    drwxrwxr-x 3 ubuntu ubuntu 4096 Apr 26 06:02 .\n    drwxr-xr-x 6 ubuntu ubuntu 4096 Apr 26 06:00 ..\n    drwxrwxr-x 7 ubuntu ubuntu 4096 Apr 26 06:02 .git\n[目录](#git)       \n### 把文件添加到版本库暂存区\n    \n    // 添加文件\n    git add <file>\n    //在learngit目录下新建 一个文件readme.md\n    git add readmne.md\n    git add . \n    //当前目录下的文件全部提交\n[目录](#git) \n### 提交到本地代码库\n    git commit -m <message>\n    git commit -m 注解信息\n[目录](#git)   \n### 仓库当前的状态 \n    git status\n    \n    On branch master\n    nothing to commit, working tree clean\n    //工作目录是干净的\n\n    On branch master\n    Changes to be committed:\n    (use \"git reset HEAD <file>...\" to unstage)\n\n    modified: readme.txt\n[目录](#git)    \n### gitstatus小结\n    要随时掌握工作区的状态，使用git status命令。\n    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n[目录](#git)    \n### 对比文件修改了什么内容 \n    git diff <filename>\n    \n    $ git diff readme.txt \n    diff --git a/readme.txt b/readme.txt\n    index 46d49bf..9247db6 100644\n    --- a/readme.txt\n    +++ b/readme.txt\n    @@ -1,2 +1,2 @@\n    -Git is a version control system.\n    +Git is a distributed version control system.\n    Git is free software.\n [目录](#git)    \n### 查看提交的日志\n    git log\n    \n    git log --pretty=oneline\n[目录](#git)    \n### 回退到上一个版本 \n    get reset\n    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，\n    使用命令git reset --hard commit_id。\n   \n    \n    在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n    \n    git reset --hard HEAD^ \n    //回退到上一个版本\n    \n    git reset --hard 772a2f\n    //回到指定的版本号 \n    \n[目录](#git)   \n### 查看命令历史 \n\n    git reflog\n\n    用来记录你的每一次命令：\n[目录](#git)\n### 撤销修改 \n    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n    \n    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。\n    \n    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n[目录](#git)\n### 提交到远程代码库 \n    \n    git push \n    \n    git push origin master\n[目录](#git)    \n### 关联远程库 \n\n    要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n\n    关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n\n    此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n[目录](#git)   \n### 创建ssh_key\n    由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n    第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n    $ ssh-keygen -t rsa -C \"youremail@example.com\"\n    你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n\n    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n    然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n\n    github-addkey-1\n\n    点“Add Key”，你就应该看到已经添加的Key：\n\n    github-addkey-2\n[目录](#git)\n### 查看所有分支 \n    git branch \n    创建分支：git branch <name>\n    git branch命令会列出所有分支，当前分支前面会标一个*号。\n[目录](#git)\n### 切换分支 \n    git checkout 分支名 \n    git checkout master \n[目录](#git)   \n### 合并分支 \n    git merge dev\n    \n[目录](#git) \n### 删除掉dev分支 \n    git branch -d dev \n\n    Deleted branch dev (was b17d20e).\n    删除后，查看branch，就只剩下master分支了：\n    git branch\n    因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n\n[目录](#git)\n### 分支小结 \n\n    Git鼓励大量使用分支：\n    \n    查看分支：git branch\n    \n    创建分支：git branch <name>\n    \n    切换分支：git checkout <name>\n    \n    创建+切换分支：git checkout -b <name>\n    \n    合并某分支到当前分支：git merge <name>\n    \n    删除分支：git branch -d <name>\n[目录](#git)\n### 解决冲突 \n    主线和分支修改的文件一样时，合并之后会报文件有冲突\n    \n    用带参数的git log也可以看到分支的合并情况：\n    git log --graph --pretty=oneline --abbrev-commit -10\n    \n    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n    解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n\n    用git log --graph命令可以看到分支合并图。\n[目录](#git)\n### 分支管理策略 \n    \n    通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n\n    如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n[目录](#git)\n### 强行删除分支 \n    git branch -D feature-vulcan\n    \n[目录](#git)\n### 多人协作 \n    多人协作的工作模式通常是这样：\n    \n    首先，可以试图用git push origin <branch-name>推送自己的修改；\n    \n    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n    \n    如果合并有冲突，则解决冲突，并在本地提交；\n    \n    没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！\n    \n    如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。\n    \n    这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n[目录](#git)   \n### 更新远程库的代码到本地 \n    git pull\n    \n    查看远程库信息，使用git remote -v；\n\n    本地新建的分支如果不推送到远程，对其他人就是不可见的；\n    \n    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n    \n    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n    \n    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n    \n    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n[目录](#git)   \n### 添加标签\n    命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n    \n    命令git tag -a <tagname> -m \"blablabla...\"可以指定标签信息；\n    \n    命令git tag可以查看所有标签。\n[目录](#git)    \n### 操作标签 \n    git tag -d v0.1\n    \n    小结\n    命令git push origin <tagname>可以推送一个本地标签；\n    \n    命令git push origin --tags可以推送全部未推送过的本地标签；\n    \n    命令git tag -d <tagname>可以删除一个本地标签；\n    \n    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。\n[目录](#git)\n### 查看远程库的信息 \n    git remote\n    \n    查看更多的信息\n    git remote -v\n[目录](#git)    \n### 删除已关联的名为origin的远程库 \n    git remote rm origin\n    先关联GitHub的远程库：\n\n    git remote add github git@github.com:michaelliao/learngit.git\n    注意，远程库的名称叫github，不叫origin了。\n    \n    接着，再关联码云的远程库：\n    \n    git remote add gitee git@gitee.com:liaoxuefeng/learngit.git\n    同样注意，远程库的名称叫gitee，不叫origin。\n    \n    现在，我们用git remote -v查看远程库信息，可以看到两个远程库：\n    \n    git remote -v\n    gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)\n    gitee    git@gitee.com:liaoxuefeng/learngit.git (push)\n    github    git@github.com:michaelliao/learngit.git (fetch)\n    github    git@github.com:michaelliao/learngit.git (push)\n    如果要推送到GitHub，使用命令：\n    \n    git push github master\n    如果要推送到码云，使用命令：\n    \n    git push gitee master\n    这样一来，我们的本地库就可以同时与多个远程库互相同步：\n[目录](#git)\n### 忽略特殊文件 \n    .gitignore\n[目录](#git)\n### 强制添加忽略的文件 \n    git add -f App.class\n[目录](#git)\n### 检查添加文件是否被忽略 \n    git check-ignore -v App.class\n    \n[目录](#git)\n### 设置命令别名 \n    git config --global alias.st status\n    //状态\n    git config --global alias.co checkout\n    //更新\n    git config --global alias.ci commit\n    //提交\n    git config --global alias.br branch\n    //分支\n    \n    git config --global alias.unstage 'reset HEAD'\n    //命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n    \n    git unstage test.py\n    =git reset HEAD test.py\n    \n    git config --global alias.last 'log -1'\n    //配置一个git last，让其显示最后一次提交信息\n    git last\n    \n    git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n [目录](#git)   \n## 配置文件 \n\n    .git/config\n    \n    cat ./git/config\n    \n[搭建见廖老师教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)","slug":"git_1","published":1,"updated":"2019-05-07T02:19:37.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgcoxme001xp7sas9q3rev3","content":"<!-- TOC -->\n<p><a href=\"#随手记\">随手记</a></p>\n<p><a href=\"#安装\">安装</a></p>\n<p><a href=\"#配置用户名、邮箱\">配置用户名、邮箱</a></p>\n<p><a href=\"#创建版本库\">创建版本库</a></p>\n<p><a href=\"#把文件添加到版本库暂存区\">把文件添加到版本库(暂存区)</a></p>\n<p><a href=\"#提交到本地代码库\">提交到本地代码库</a></p>\n<p><a href=\"#仓库当前的状态\">仓库当前的状态</a></p>\n<p><a href=\"#gitstatus小结\">git status小结</a></p>\n<p><a href=\"#对比文件修改了什么内容\">对比文件修改了什么内容</a></p>\n<p><a href=\"#查看提交的日志\">查看提交的日志</a></p>\n<p><a href=\"#回退到上一个版本\">回退到上一个版本</a></p>\n<p><a href=\"#查看命令历史\">查看命令历史</a></p>\n<p><a href=\"#撤销修改\">撤销修改</a></p>\n<p><a href=\"#提交到远程代码库\">提交到远程代码库</a></p>\n<p><a href=\"#关联远程库\">关联远程库</a></p>\n<p><a href=\"#创建ssh_key\">创建SSH_Key</a></p>\n<p><a href=\"#查看所有分支\">查看所有分支</a></p>\n<p><a href=\"#切换分支\">切换分支</a></p>\n<p><a href=\"#合并分支\">合并分支</a></p>\n<p><a href=\"#删除掉dev分支\">删除掉dev分支</a></p>\n<p><a href=\"#分支小结\">分支小结</a></p>\n<p><a href=\"#解决冲突\">解决冲突</a></p>\n<p><a href=\"#分支管理策略\">分支管理策略</a></p>\n<p><a href=\"#强行删除分支\">强行删除分支</a></p>\n<p><a href=\"#多人协作\">多人协作</a></p>\n<p><a href=\"#更新远程库的代码到本地\">更新远程库的代码到本地</a></p>\n<p><a href=\"#添加标签\">添加标签</a></p>\n<p><a href=\"#操作标签\">操作标签</a></p>\n<p><a href=\"#查看远程库的信息\">查看远程库的信息</a></p>\n<p><a href=\"#删除已关联的名为origin的远程库\">删除已关联的名为origin的远程库</a></p>\n<p><a href=\"#忽略特殊文件\">忽略特殊文件</a></p>\n<p><a href=\"#强制添加忽略的文件\">强制添加忽略的文件</a></p>\n<p><a href=\"#检查添加文件是否被忽略\">检查添加文件是否被忽略</a></p>\n<p><a href=\"#设置命令别名\">设置命令别名</a></p>\n<p><a href=\"#配置文件\">配置文件</a></p>\n<hr>\n<h2 id=\"随手记\"><a href=\"#随手记\" class=\"headerlink\" title=\"随手记\"></a>随手记</h2><pre><code>1、分布式版本控制系统\n记录每次文件的改动，并且可以协作编辑\n</code></pre><h2 id=\"1、基本操作\"><a href=\"#1、基本操作\" class=\"headerlink\" title=\"1、基本操作\"></a>1、基本操作</h2><p><a href=\"#git\">目录</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>// Debian/Ubuntu Linux \nsudo apt-get install git\n\n// 其他linux版本，源码安装\ngit官网 https://git-scm.com/\n下载源码，然后解压，依次输入\n./config \nmake\nsudo make install\n\n//mac osx \n通过homebrew安装 \nhomebrew官网: http://brew.sh\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"配置用户名、邮箱\"><a href=\"#配置用户名、邮箱\" class=\"headerlink\" title=\"配置用户名、邮箱\"></a>配置用户名、邮箱</h3><pre><code>git config --global user.name zhangyongfeng1\n\ngit config --global user.username zhangyongfeng1\n//配置用户名\n\ngit config --global user.email 503977995@qq.com\n//配置邮箱\n\ngit config --global user.name\n//没有传参数时，查询当前配置的用户名\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h3><pre><code>ubuntu:~/environment $   mkdir learngit\nubuntu:~/environment $     cd learngit\nubuntu:~/environment/learngit $     pwd\n/home/ubuntu/environment/learngit\nubuntu:~/environment/learngit $ git init\nInitialized empty Git repository in /home/ubuntu/environment/learngit/.git/\nubuntu:~/environment/learngit (master) $ ls -al\ntotal 12\ndrwxrwxr-x 3 ubuntu ubuntu 4096 Apr 26 06:02 .\ndrwxr-xr-x 6 ubuntu ubuntu 4096 Apr 26 06:00 ..\ndrwxrwxr-x 7 ubuntu ubuntu 4096 Apr 26 06:02 .git\n</code></pre><p><a href=\"#git\">目录</a>       </p>\n<h3 id=\"把文件添加到版本库暂存区\"><a href=\"#把文件添加到版本库暂存区\" class=\"headerlink\" title=\"把文件添加到版本库暂存区\"></a>把文件添加到版本库暂存区</h3><pre><code>// 添加文件\ngit add &lt;file&gt;\n//在learngit目录下新建 一个文件readme.md\ngit add readmne.md\ngit add . \n//当前目录下的文件全部提交\n</code></pre><p><a href=\"#git\">目录</a> </p>\n<h3 id=\"提交到本地代码库\"><a href=\"#提交到本地代码库\" class=\"headerlink\" title=\"提交到本地代码库\"></a>提交到本地代码库</h3><pre><code>git commit -m &lt;message&gt;\ngit commit -m 注解信息\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"仓库当前的状态\"><a href=\"#仓库当前的状态\" class=\"headerlink\" title=\"仓库当前的状态\"></a>仓库当前的状态</h3><pre><code>git status\n\nOn branch master\nnothing to commit, working tree clean\n//工作目录是干净的\n\nOn branch master\nChanges to be committed:\n(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\nmodified: readme.txt\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"gitstatus小结\"><a href=\"#gitstatus小结\" class=\"headerlink\" title=\"gitstatus小结\"></a>gitstatus小结</h3><pre><code>要随时掌握工作区的状态，使用git status命令。\n如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"对比文件修改了什么内容\"><a href=\"#对比文件修改了什么内容\" class=\"headerlink\" title=\"对比文件修改了什么内容\"></a>对比文件修改了什么内容</h3><pre><code>git diff &lt;filename&gt;\n\n$ git diff readme.txt \ndiff --git a/readme.txt b/readme.txt\nindex 46d49bf..9247db6 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a version control system.\n+Git is a distributed version control system.\nGit is free software.\n</code></pre><p> <a href=\"#git\">目录</a>    </p>\n<h3 id=\"查看提交的日志\"><a href=\"#查看提交的日志\" class=\"headerlink\" title=\"查看提交的日志\"></a>查看提交的日志</h3><pre><code>git log\n\ngit log --pretty=oneline\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"回退到上一个版本\"><a href=\"#回退到上一个版本\" class=\"headerlink\" title=\"回退到上一个版本\"></a>回退到上一个版本</h3><pre><code>get reset\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，\n使用命令git reset --hard commit_id。\n\n\n在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\ngit reset --hard HEAD^ \n//回退到上一个版本\n\ngit reset --hard 772a2f\n//回到指定的版本号 \n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"查看命令历史\"><a href=\"#查看命令历史\" class=\"headerlink\" title=\"查看命令历史\"></a>查看命令历史</h3><pre><code>git reflog\n\n用来记录你的每一次命令：\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><pre><code>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &lt;file&gt;，就回到了场景1，第二步按场景1操作。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"提交到远程代码库\"><a href=\"#提交到远程代码库\" class=\"headerlink\" title=\"提交到远程代码库\"></a>提交到远程代码库</h3><pre><code>git push \n\ngit push origin master\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"关联远程库\"><a href=\"#关联远程库\" class=\"headerlink\" title=\"关联远程库\"></a>关联远程库</h3><pre><code>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n\n关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n\n此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"创建ssh-key\"><a href=\"#创建ssh-key\" class=\"headerlink\" title=\"创建ssh_key\"></a>创建ssh_key</h3><pre><code>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\n你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n\ngithub-addkey-1\n\n点“Add Key”，你就应该看到已经添加的Key：\n\ngithub-addkey-2\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"查看所有分支\"><a href=\"#查看所有分支\" class=\"headerlink\" title=\"查看所有分支\"></a>查看所有分支</h3><pre><code>git branch \n创建分支：git branch &lt;name&gt;\ngit branch命令会列出所有分支，当前分支前面会标一个*号。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><pre><code>git checkout 分支名 \ngit checkout master \n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><pre><code>git merge dev\n</code></pre><p><a href=\"#git\">目录</a> </p>\n<h3 id=\"删除掉dev分支\"><a href=\"#删除掉dev分支\" class=\"headerlink\" title=\"删除掉dev分支\"></a>删除掉dev分支</h3><pre><code>git branch -d dev \n\nDeleted branch dev (was b17d20e).\n删除后，查看branch，就只剩下master分支了：\ngit branch\n因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"分支小结\"><a href=\"#分支小结\" class=\"headerlink\" title=\"分支小结\"></a>分支小结</h3><pre><code>Git鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch &lt;name&gt;\n\n切换分支：git checkout &lt;name&gt;\n\n创建+切换分支：git checkout -b &lt;name&gt;\n\n合并某分支到当前分支：git merge &lt;name&gt;\n\n删除分支：git branch -d &lt;name&gt;\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><pre><code>主线和分支修改的文件一样时，合并之后会报文件有冲突\n\n用带参数的git log也可以看到分支的合并情况：\ngit log --graph --pretty=oneline --abbrev-commit -10\n\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n\n用git log --graph命令可以看到分支合并图。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><pre><code>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"强行删除分支\"><a href=\"#强行删除分支\" class=\"headerlink\" title=\"强行删除分支\"></a>强行删除分支</h3><pre><code>git branch -D feature-vulcan\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><pre><code>多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！\n\n如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"更新远程库的代码到本地\"><a href=\"#更新远程库的代码到本地\" class=\"headerlink\" title=\"更新远程库的代码到本地\"></a>更新远程库的代码到本地</h3><pre><code>git pull\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><pre><code>命令git tag &lt;tagname&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\n命令git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息；\n\n命令git tag可以查看所有标签。\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h3><pre><code>git tag -d v0.1\n\n小结\n命令git push origin &lt;tagname&gt;可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d &lt;tagname&gt;可以删除一个本地标签；\n\n命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"查看远程库的信息\"><a href=\"#查看远程库的信息\" class=\"headerlink\" title=\"查看远程库的信息\"></a>查看远程库的信息</h3><pre><code>git remote\n\n查看更多的信息\ngit remote -v\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"删除已关联的名为origin的远程库\"><a href=\"#删除已关联的名为origin的远程库\" class=\"headerlink\" title=\"删除已关联的名为origin的远程库\"></a>删除已关联的名为origin的远程库</h3><pre><code>git remote rm origin\n先关联GitHub的远程库：\n\ngit remote add github git@github.com:michaelliao/learngit.git\n注意，远程库的名称叫github，不叫origin了。\n\n接着，再关联码云的远程库：\n\ngit remote add gitee git@gitee.com:liaoxuefeng/learngit.git\n同样注意，远程库的名称叫gitee，不叫origin。\n\n现在，我们用git remote -v查看远程库信息，可以看到两个远程库：\n\ngit remote -v\ngitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)\ngitee    git@gitee.com:liaoxuefeng/learngit.git (push)\ngithub    git@github.com:michaelliao/learngit.git (fetch)\ngithub    git@github.com:michaelliao/learngit.git (push)\n如果要推送到GitHub，使用命令：\n\ngit push github master\n如果要推送到码云，使用命令：\n\ngit push gitee master\n这样一来，我们的本地库就可以同时与多个远程库互相同步：\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h3><pre><code>.gitignore\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"强制添加忽略的文件\"><a href=\"#强制添加忽略的文件\" class=\"headerlink\" title=\"强制添加忽略的文件\"></a>强制添加忽略的文件</h3><pre><code>git add -f App.class\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"检查添加文件是否被忽略\"><a href=\"#检查添加文件是否被忽略\" class=\"headerlink\" title=\"检查添加文件是否被忽略\"></a>检查添加文件是否被忽略</h3><pre><code>git check-ignore -v App.class\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"设置命令别名\"><a href=\"#设置命令别名\" class=\"headerlink\" title=\"设置命令别名\"></a>设置命令别名</h3><pre><code>git config --global alias.st status\n//状态\ngit config --global alias.co checkout\n//更新\ngit config --global alias.ci commit\n//提交\ngit config --global alias.br branch\n//分支\n\ngit config --global alias.unstage &apos;reset HEAD&apos;\n//命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n\ngit unstage test.py\n=git reset HEAD test.py\n\ngit config --global alias.last &apos;log -1&apos;\n//配置一个git last，让其显示最后一次提交信息\ngit last\n\ngit config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;\n</code></pre><p> <a href=\"#git\">目录</a>   </p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><pre><code>.git/config\n\ncat ./git/config\n</code></pre><p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">搭建见廖老师教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<p><a href=\"#随手记\">随手记</a></p>\n<p><a href=\"#安装\">安装</a></p>\n<p><a href=\"#配置用户名、邮箱\">配置用户名、邮箱</a></p>\n<p><a href=\"#创建版本库\">创建版本库</a></p>\n<p><a href=\"#把文件添加到版本库暂存区\">把文件添加到版本库(暂存区)</a></p>\n<p><a href=\"#提交到本地代码库\">提交到本地代码库</a></p>\n<p><a href=\"#仓库当前的状态\">仓库当前的状态</a></p>\n<p><a href=\"#gitstatus小结\">git status小结</a></p>\n<p><a href=\"#对比文件修改了什么内容\">对比文件修改了什么内容</a></p>\n<p><a href=\"#查看提交的日志\">查看提交的日志</a></p>\n<p><a href=\"#回退到上一个版本\">回退到上一个版本</a></p>\n<p><a href=\"#查看命令历史\">查看命令历史</a></p>\n<p><a href=\"#撤销修改\">撤销修改</a></p>\n<p><a href=\"#提交到远程代码库\">提交到远程代码库</a></p>\n<p><a href=\"#关联远程库\">关联远程库</a></p>\n<p><a href=\"#创建ssh_key\">创建SSH_Key</a></p>\n<p><a href=\"#查看所有分支\">查看所有分支</a></p>\n<p><a href=\"#切换分支\">切换分支</a></p>\n<p><a href=\"#合并分支\">合并分支</a></p>\n<p><a href=\"#删除掉dev分支\">删除掉dev分支</a></p>\n<p><a href=\"#分支小结\">分支小结</a></p>\n<p><a href=\"#解决冲突\">解决冲突</a></p>\n<p><a href=\"#分支管理策略\">分支管理策略</a></p>\n<p><a href=\"#强行删除分支\">强行删除分支</a></p>\n<p><a href=\"#多人协作\">多人协作</a></p>\n<p><a href=\"#更新远程库的代码到本地\">更新远程库的代码到本地</a></p>\n<p><a href=\"#添加标签\">添加标签</a></p>\n<p><a href=\"#操作标签\">操作标签</a></p>\n<p><a href=\"#查看远程库的信息\">查看远程库的信息</a></p>\n<p><a href=\"#删除已关联的名为origin的远程库\">删除已关联的名为origin的远程库</a></p>\n<p><a href=\"#忽略特殊文件\">忽略特殊文件</a></p>\n<p><a href=\"#强制添加忽略的文件\">强制添加忽略的文件</a></p>\n<p><a href=\"#检查添加文件是否被忽略\">检查添加文件是否被忽略</a></p>\n<p><a href=\"#设置命令别名\">设置命令别名</a></p>\n<p><a href=\"#配置文件\">配置文件</a></p>\n<hr>\n<h2 id=\"随手记\"><a href=\"#随手记\" class=\"headerlink\" title=\"随手记\"></a>随手记</h2><pre><code>1、分布式版本控制系统\n记录每次文件的改动，并且可以协作编辑\n</code></pre><h2 id=\"1、基本操作\"><a href=\"#1、基本操作\" class=\"headerlink\" title=\"1、基本操作\"></a>1、基本操作</h2><p><a href=\"#git\">目录</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>// Debian/Ubuntu Linux \nsudo apt-get install git\n\n// 其他linux版本，源码安装\ngit官网 https://git-scm.com/\n下载源码，然后解压，依次输入\n./config \nmake\nsudo make install\n\n//mac osx \n通过homebrew安装 \nhomebrew官网: http://brew.sh\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"配置用户名、邮箱\"><a href=\"#配置用户名、邮箱\" class=\"headerlink\" title=\"配置用户名、邮箱\"></a>配置用户名、邮箱</h3><pre><code>git config --global user.name zhangyongfeng1\n\ngit config --global user.username zhangyongfeng1\n//配置用户名\n\ngit config --global user.email 503977995@qq.com\n//配置邮箱\n\ngit config --global user.name\n//没有传参数时，查询当前配置的用户名\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h3><pre><code>ubuntu:~/environment $   mkdir learngit\nubuntu:~/environment $     cd learngit\nubuntu:~/environment/learngit $     pwd\n/home/ubuntu/environment/learngit\nubuntu:~/environment/learngit $ git init\nInitialized empty Git repository in /home/ubuntu/environment/learngit/.git/\nubuntu:~/environment/learngit (master) $ ls -al\ntotal 12\ndrwxrwxr-x 3 ubuntu ubuntu 4096 Apr 26 06:02 .\ndrwxr-xr-x 6 ubuntu ubuntu 4096 Apr 26 06:00 ..\ndrwxrwxr-x 7 ubuntu ubuntu 4096 Apr 26 06:02 .git\n</code></pre><p><a href=\"#git\">目录</a>       </p>\n<h3 id=\"把文件添加到版本库暂存区\"><a href=\"#把文件添加到版本库暂存区\" class=\"headerlink\" title=\"把文件添加到版本库暂存区\"></a>把文件添加到版本库暂存区</h3><pre><code>// 添加文件\ngit add &lt;file&gt;\n//在learngit目录下新建 一个文件readme.md\ngit add readmne.md\ngit add . \n//当前目录下的文件全部提交\n</code></pre><p><a href=\"#git\">目录</a> </p>\n<h3 id=\"提交到本地代码库\"><a href=\"#提交到本地代码库\" class=\"headerlink\" title=\"提交到本地代码库\"></a>提交到本地代码库</h3><pre><code>git commit -m &lt;message&gt;\ngit commit -m 注解信息\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"仓库当前的状态\"><a href=\"#仓库当前的状态\" class=\"headerlink\" title=\"仓库当前的状态\"></a>仓库当前的状态</h3><pre><code>git status\n\nOn branch master\nnothing to commit, working tree clean\n//工作目录是干净的\n\nOn branch master\nChanges to be committed:\n(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\nmodified: readme.txt\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"gitstatus小结\"><a href=\"#gitstatus小结\" class=\"headerlink\" title=\"gitstatus小结\"></a>gitstatus小结</h3><pre><code>要随时掌握工作区的状态，使用git status命令。\n如果git status告诉你有文件被修改过，用git diff可以查看修改内容。\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"对比文件修改了什么内容\"><a href=\"#对比文件修改了什么内容\" class=\"headerlink\" title=\"对比文件修改了什么内容\"></a>对比文件修改了什么内容</h3><pre><code>git diff &lt;filename&gt;\n\n$ git diff readme.txt \ndiff --git a/readme.txt b/readme.txt\nindex 46d49bf..9247db6 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a version control system.\n+Git is a distributed version control system.\nGit is free software.\n</code></pre><p> <a href=\"#git\">目录</a>    </p>\n<h3 id=\"查看提交的日志\"><a href=\"#查看提交的日志\" class=\"headerlink\" title=\"查看提交的日志\"></a>查看提交的日志</h3><pre><code>git log\n\ngit log --pretty=oneline\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"回退到上一个版本\"><a href=\"#回退到上一个版本\" class=\"headerlink\" title=\"回退到上一个版本\"></a>回退到上一个版本</h3><pre><code>get reset\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，\n使用命令git reset --hard commit_id。\n\n\n在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\n\ngit reset --hard HEAD^ \n//回退到上一个版本\n\ngit reset --hard 772a2f\n//回到指定的版本号 \n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"查看命令历史\"><a href=\"#查看命令历史\" class=\"headerlink\" title=\"查看命令历史\"></a>查看命令历史</h3><pre><code>git reflog\n\n用来记录你的每一次命令：\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><pre><code>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD &lt;file&gt;，就回到了场景1，第二步按场景1操作。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"提交到远程代码库\"><a href=\"#提交到远程代码库\" class=\"headerlink\" title=\"提交到远程代码库\"></a>提交到远程代码库</h3><pre><code>git push \n\ngit push origin master\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"关联远程库\"><a href=\"#关联远程库\" class=\"headerlink\" title=\"关联远程库\"></a>关联远程库</h3><pre><code>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n\n关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n\n此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"创建ssh-key\"><a href=\"#创建ssh-key\" class=\"headerlink\" title=\"创建ssh_key\"></a>创建ssh_key</h3><pre><code>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：\n\n第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;\n你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n\ngithub-addkey-1\n\n点“Add Key”，你就应该看到已经添加的Key：\n\ngithub-addkey-2\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"查看所有分支\"><a href=\"#查看所有分支\" class=\"headerlink\" title=\"查看所有分支\"></a>查看所有分支</h3><pre><code>git branch \n创建分支：git branch &lt;name&gt;\ngit branch命令会列出所有分支，当前分支前面会标一个*号。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><pre><code>git checkout 分支名 \ngit checkout master \n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><pre><code>git merge dev\n</code></pre><p><a href=\"#git\">目录</a> </p>\n<h3 id=\"删除掉dev分支\"><a href=\"#删除掉dev分支\" class=\"headerlink\" title=\"删除掉dev分支\"></a>删除掉dev分支</h3><pre><code>git branch -d dev \n\nDeleted branch dev (was b17d20e).\n删除后，查看branch，就只剩下master分支了：\ngit branch\n因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"分支小结\"><a href=\"#分支小结\" class=\"headerlink\" title=\"分支小结\"></a>分支小结</h3><pre><code>Git鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch &lt;name&gt;\n\n切换分支：git checkout &lt;name&gt;\n\n创建+切换分支：git checkout -b &lt;name&gt;\n\n合并某分支到当前分支：git merge &lt;name&gt;\n\n删除分支：git branch -d &lt;name&gt;\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><pre><code>主线和分支修改的文件一样时，合并之后会报文件有冲突\n\n用带参数的git log也可以看到分支的合并情况：\ngit log --graph --pretty=oneline --abbrev-commit -10\n\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n\n用git log --graph命令可以看到分支合并图。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><pre><code>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"强行删除分支\"><a href=\"#强行删除分支\" class=\"headerlink\" title=\"强行删除分支\"></a>强行删除分支</h3><pre><code>git branch -D feature-vulcan\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><pre><code>多人协作的工作模式通常是这样：\n\n首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改；\n\n如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n如果合并有冲突，则解决冲突，并在本地提交；\n\n没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！\n\n如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"更新远程库的代码到本地\"><a href=\"#更新远程库的代码到本地\" class=\"headerlink\" title=\"更新远程库的代码到本地\"></a>更新远程库的代码到本地</h3><pre><code>git pull\n\n查看远程库信息，使用git remote -v；\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n\n在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n\n建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n\n从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n</code></pre><p><a href=\"#git\">目录</a>   </p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><pre><code>命令git tag &lt;tagname&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\n命令git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息；\n\n命令git tag可以查看所有标签。\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h3><pre><code>git tag -d v0.1\n\n小结\n命令git push origin &lt;tagname&gt;可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d &lt;tagname&gt;可以删除一个本地标签；\n\n命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"查看远程库的信息\"><a href=\"#查看远程库的信息\" class=\"headerlink\" title=\"查看远程库的信息\"></a>查看远程库的信息</h3><pre><code>git remote\n\n查看更多的信息\ngit remote -v\n</code></pre><p><a href=\"#git\">目录</a>    </p>\n<h3 id=\"删除已关联的名为origin的远程库\"><a href=\"#删除已关联的名为origin的远程库\" class=\"headerlink\" title=\"删除已关联的名为origin的远程库\"></a>删除已关联的名为origin的远程库</h3><pre><code>git remote rm origin\n先关联GitHub的远程库：\n\ngit remote add github git@github.com:michaelliao/learngit.git\n注意，远程库的名称叫github，不叫origin了。\n\n接着，再关联码云的远程库：\n\ngit remote add gitee git@gitee.com:liaoxuefeng/learngit.git\n同样注意，远程库的名称叫gitee，不叫origin。\n\n现在，我们用git remote -v查看远程库信息，可以看到两个远程库：\n\ngit remote -v\ngitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)\ngitee    git@gitee.com:liaoxuefeng/learngit.git (push)\ngithub    git@github.com:michaelliao/learngit.git (fetch)\ngithub    git@github.com:michaelliao/learngit.git (push)\n如果要推送到GitHub，使用命令：\n\ngit push github master\n如果要推送到码云，使用命令：\n\ngit push gitee master\n这样一来，我们的本地库就可以同时与多个远程库互相同步：\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"忽略特殊文件\"><a href=\"#忽略特殊文件\" class=\"headerlink\" title=\"忽略特殊文件\"></a>忽略特殊文件</h3><pre><code>.gitignore\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"强制添加忽略的文件\"><a href=\"#强制添加忽略的文件\" class=\"headerlink\" title=\"强制添加忽略的文件\"></a>强制添加忽略的文件</h3><pre><code>git add -f App.class\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"检查添加文件是否被忽略\"><a href=\"#检查添加文件是否被忽略\" class=\"headerlink\" title=\"检查添加文件是否被忽略\"></a>检查添加文件是否被忽略</h3><pre><code>git check-ignore -v App.class\n</code></pre><p><a href=\"#git\">目录</a></p>\n<h3 id=\"设置命令别名\"><a href=\"#设置命令别名\" class=\"headerlink\" title=\"设置命令别名\"></a>设置命令别名</h3><pre><code>git config --global alias.st status\n//状态\ngit config --global alias.co checkout\n//更新\ngit config --global alias.ci commit\n//提交\ngit config --global alias.br branch\n//分支\n\ngit config --global alias.unstage &apos;reset HEAD&apos;\n//命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\n\ngit unstage test.py\n=git reset HEAD test.py\n\ngit config --global alias.last &apos;log -1&apos;\n//配置一个git last，让其显示最后一次提交信息\ngit last\n\ngit config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;\n</code></pre><p> <a href=\"#git\">目录</a>   </p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><pre><code>.git/config\n\ncat ./git/config\n</code></pre><p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">搭建见廖老师教程</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvgcowlq0007p7sa1knuk7t9","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowlz000dp7saxqdm6ef4"},{"post_id":"cjvgcowl80001p7sat0y6svbv","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowm2000hp7sawe4s5a7w"},{"post_id":"cjvgcowlr0008p7sawcqgw1eb","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowm5000kp7sarg0idu7g"},{"post_id":"cjvgcowlv000bp7saolnqkmz7","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowm7000op7saz9x15bjr"},{"post_id":"cjvgcowlf0003p7sa28fwvd1q","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowm9000rp7sauc6u8zel"},{"post_id":"cjvgcowlx000cp7sa8xcegnfg","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowma000tp7sacrn78kcq"},{"post_id":"cjvgcowm1000gp7sawsv98x5h","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowma000vp7sastsoq7jb"},{"post_id":"cjvgcowlo0006p7sa6s017lt0","category_id":"cjvgcowlz000ep7sauas3i22j","_id":"cjvgcowmb000yp7saco4jjmz8"},{"post_id":"cjvgcowm7000np7sags9mqkaz","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowmb0010p7sarfsuyeuq"},{"post_id":"cjvgcowm8000qp7saoe3d6wpf","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcowmb0012p7sadem2jsn1"},{"post_id":"cjvgcowm4000jp7saemmj0o10","category_id":"cjvgcowm8000pp7sadvveroqc","_id":"cjvgcowmc0014p7sauplmy32e"},{"post_id":"cjvgcoxm6001sp7sad95sbtkl","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcoxmf001yp7saediex25i"},{"post_id":"cjvgcoxm8001tp7sac08dn4eu","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcoxmg0021p7saxlqkcz0c"},{"post_id":"cjvgcoxma001vp7sa76ecnq0w","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcoxmg0023p7sa86350iax"},{"post_id":"cjvgcoxme001xp7sas9q3rev3","category_id":"cjvgcowlj0004p7saqj1ejx7m","_id":"cjvgcoxmh0025p7sam6v76luz"}],"PostTag":[{"post_id":"cjvgcowl80001p7sat0y6svbv","tag_id":"cjvgcowln0005p7sauvxy9s6r","_id":"cjvgcowm3000ip7saeag6j9hr"},{"post_id":"cjvgcowl80001p7sat0y6svbv","tag_id":"cjvgcowlt000ap7saqk2gr2ti","_id":"cjvgcowm6000lp7samh6q8i5o"},{"post_id":"cjvgcowlf0003p7sa28fwvd1q","tag_id":"cjvgcowln0005p7sauvxy9s6r","_id":"cjvgcowma000up7samukqjsdc"},{"post_id":"cjvgcowlf0003p7sa28fwvd1q","tag_id":"cjvgcowlt000ap7saqk2gr2ti","_id":"cjvgcowma000wp7sa2kreusyo"},{"post_id":"cjvgcowlo0006p7sa6s017lt0","tag_id":"cjvgcowm9000sp7sa7ax6rsul","_id":"cjvgcowmb000zp7sao0chgb85"},{"post_id":"cjvgcowlq0007p7sa1knuk7t9","tag_id":"cjvgcowma000xp7sa8v1whla2","_id":"cjvgcowmc0013p7saz6reouhf"},{"post_id":"cjvgcowlr0008p7sawcqgw1eb","tag_id":"cjvgcowma000xp7sa8v1whla2","_id":"cjvgcowmc0016p7sadexiklb0"},{"post_id":"cjvgcowlv000bp7saolnqkmz7","tag_id":"cjvgcowmc0015p7sae986yf2l","_id":"cjvgcowmd0018p7sa9shauooz"},{"post_id":"cjvgcowlx000cp7sa8xcegnfg","tag_id":"cjvgcowma000xp7sa8v1whla2","_id":"cjvgcowme001ap7sau6ildmbs"},{"post_id":"cjvgcowm1000gp7sawsv98x5h","tag_id":"cjvgcowmc0015p7sae986yf2l","_id":"cjvgcowmh001dp7satukjin2r"},{"post_id":"cjvgcowm1000gp7sawsv98x5h","tag_id":"cjvgcowmg001bp7savyb9tlw6","_id":"cjvgcowmh001ep7sah3c3m833"},{"post_id":"cjvgcowm4000jp7saemmj0o10","tag_id":"cjvgcowmg001cp7sadx6lzfd6","_id":"cjvgcowmi001ip7sai5284ek5"},{"post_id":"cjvgcowm4000jp7saemmj0o10","tag_id":"cjvgcowmh001fp7saxv293z7l","_id":"cjvgcowmi001jp7sarnoowzkd"},{"post_id":"cjvgcowm4000jp7saemmj0o10","tag_id":"cjvgcowmh001gp7sawa1obru0","_id":"cjvgcowmi001lp7sa275uqbuy"},{"post_id":"cjvgcowm7000np7sags9mqkaz","tag_id":"cjvgcowmi001hp7sak5unavk3","_id":"cjvgcowmj001mp7sa200mmelm"},{"post_id":"cjvgcowm8000qp7saoe3d6wpf","tag_id":"cjvgcowmi001kp7sarsl4ou9i","_id":"cjvgcowmk001pp7sals45t3ad"},{"post_id":"cjvgcowm8000qp7saoe3d6wpf","tag_id":"cjvgcowma000xp7sa8v1whla2","_id":"cjvgcowmk001qp7saktqevh5w"},{"post_id":"cjvgcowm8000qp7saoe3d6wpf","tag_id":"cjvgcowmk001op7saj19ywehq","_id":"cjvgcowml001rp7sa1867szqq"},{"post_id":"cjvgcoxm6001sp7sad95sbtkl","tag_id":"cjvgcowln0005p7sauvxy9s6r","_id":"cjvgcoxma001up7sa88a05857"},{"post_id":"cjvgcoxm6001sp7sad95sbtkl","tag_id":"cjvgcowlt000ap7saqk2gr2ti","_id":"cjvgcoxmd001wp7saqrddsqis"},{"post_id":"cjvgcoxm8001tp7sac08dn4eu","tag_id":"cjvgcowln0005p7sauvxy9s6r","_id":"cjvgcoxmf0020p7sasaxo9smb"},{"post_id":"cjvgcoxm8001tp7sac08dn4eu","tag_id":"cjvgcowlt000ap7saqk2gr2ti","_id":"cjvgcoxmg0022p7saudiz1zoi"},{"post_id":"cjvgcoxma001vp7sa76ecnq0w","tag_id":"cjvgcowln0005p7sauvxy9s6r","_id":"cjvgcoxmh0026p7salbwalxuc"},{"post_id":"cjvgcoxma001vp7sa76ecnq0w","tag_id":"cjvgcoxmf001zp7sanid875m6","_id":"cjvgcoxmi0027p7sa6cx5ajfj"},{"post_id":"cjvgcoxme001xp7sas9q3rev3","tag_id":"cjvgcoxmh0024p7saw8uoi5oi","_id":"cjvgcoxmi0028p7sae9i0fddn"}],"Tag":[{"name":"android","_id":"cjvgcowln0005p7sauvxy9s6r"},{"name":"Activity","_id":"cjvgcowlt000ap7saqk2gr2ti"},{"name":"hexo","_id":"cjvgcowm9000sp7sa7ax6rsul"},{"name":"erlang","_id":"cjvgcowma000xp7sa8v1whla2"},{"name":"javascript","_id":"cjvgcowmc0015p7sae986yf2l"},{"name":"ES6","_id":"cjvgcowmg001bp7savyb9tlw6"},{"name":"更新","_id":"cjvgcowmg001cp7sadx6lzfd6"},{"name":"记录","_id":"cjvgcowmh001fp7saxv293z7l"},{"name":"plan","_id":"cjvgcowmh001gp7sawa1obru0"},{"name":"git lfs","_id":"cjvgcowmi001hp7sak5unavk3"},{"name":"yaws","_id":"cjvgcowmi001kp7sarsl4ou9i"},{"name":"web","_id":"cjvgcowmk001op7saj19ywehq"},{"name":"file","_id":"cjvgcoxmf001zp7sanid875m6"},{"name":"git","_id":"cjvgcoxmh0024p7saw8uoi5oi"}]}}